17 Mar, 2022
------------

Batcher.sweep(address) (contracts/Batcher/Batcher.sol#259-264) ignores return value by IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this))) (contracts/Batcher/Batcher.sol#260-263)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

---

Batcher.batchDeposit(address,address[]) (contracts/Batcher/Batcher.sol#142-183) uses a dangerous strict equality:
	- require(bool,string)(lpTokensReceived == lpTokensReportedByHauler,LP tokens received by hauler does not match) (contracts/Batcher/Batcher.sol#169-172)
Batcher.batchWithdraw(address,address[]) (contracts/Batcher/Batcher.sol#186-229) uses a dangerous strict equality:
	- require(bool,string)(wantTokensReceived == wantTokensReportedByHauler,Want tokens received by hauler does not match) (contracts/Batcher/Batcher.sol#214-217)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Batcher.batchDeposit(address,address[]) (contracts/Batcher/Batcher.sol#142-183):
	External calls:
	- lpTokensReportedByHauler = hauler.deposit(amountToDeposit,address(this)) (contracts/Batcher/Batcher.sol#160-163)
	- IERC20(address(hauler)).safeTransfer(users[i_scope_0],userShare) (contracts/Batcher/Batcher.sol#179)
	State variables written after the call(s):
	- depositLedger[haulerAddress][users[i_scope_0]] = 0 (contracts/Batcher/Batcher.sol#180)
Reentrancy in Batcher.batchWithdraw(address,address[]) (contracts/Batcher/Batcher.sol#186-229):
	External calls:
	- wantTokensReportedByHauler = hauler.withdraw(amountToWithdraw,address(this)) (contracts/Batcher/Batcher.sol#206-209)
	- token.safeTransfer(users[i_scope_0],userShare) (contracts/Batcher/Batcher.sol#224)
	State variables written after the call(s):
	- withdrawLedger[haulerAddress][users[i_scope_0]] = 0 (contracts/Batcher/Batcher.sol#226)
Reentrancy in Batcher.depositFunds(uint256,address,bytes) (contracts/Batcher/Batcher.sol#59-82):
	External calls:
	- IERC20(vaults[haulerAddress].tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#72-76)
	State variables written after the call(s):
	- vaults[haulerAddress].currentAmount += amountIn (contracts/Batcher/Batcher.sol#78)
Reentrancy in Batcher.withdrawFunds(uint256,address) (contracts/Batcher/Batcher.sol#114-139):
	External calls:
	- IERC20(haulerAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#130)
	State variables written after the call(s):
	- vaults[haulerAddress].currentAmount -= amountIn (contracts/Batcher/Batcher.sol#136)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Batcher.setSlippage(uint256) (contracts/Batcher/Batcher.sol#316-322) contains a tautology or contradiction:
	- require(bool,string)(_slippage >= 0 && _slippage <= 10000,Slippage must be between 0 and 10000) (contracts/Batcher/Batcher.sol#317-320)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction

Batcher.setHaulerParams(address,address,uint256) (contracts/Batcher/Batcher.sol#232-248) ignores return value by IERC20(token).approve(haulerAddress,type()(uint256).max) (contracts/Batcher/Batcher.sol#247)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

---

Batcher.setAuthority(address) (contracts/Batcher/Batcher.sol#54-56) should emit an event for:
	- verificationAuthority = authority (contracts/Batcher/Batcher.sol#55)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Batcher.setSlippage(uint256) (contracts/Batcher/Batcher.sol#316-322) should emit an event for:
	- slippageForCurveLp = _slippage (contracts/Batcher/Batcher.sol#321)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Batcher.constructor(address,address)._verificationAuthority (contracts/Batcher/Batcher.sol#49) lacks a zero-check on :
		- verificationAuthority = _verificationAuthority (contracts/Batcher/Batcher.sol#50)
Batcher.constructor(address,address)._governance (contracts/Batcher/Batcher.sol#49) lacks a zero-check on :
		- governance = _governance (contracts/Batcher/Batcher.sol#51)
Batcher.setAuthority(address).authority (contracts/Batcher/Batcher.sol#54) lacks a zero-check on :
		- verificationAuthority = authority (contracts/Batcher/Batcher.sol#55)
Batcher.setGovernance(address)._governance (contracts/Batcher/Batcher.sol#266) lacks a zero-check on :
		- pendingGovernance = _governance (contracts/Batcher/Batcher.sol#267)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in Batcher.depositFunds(uint256,address,bytes) (contracts/Batcher/Batcher.sol#59-82):
	External calls:
	- IERC20(vaults[haulerAddress].tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#72-76)
	State variables written after the call(s):
	- _completeDeposit(haulerAddress,amountIn) (contracts/Batcher/Batcher.sol#81)
		- depositLedger[haulerAddress][msg.sender] = depositLedger[haulerAddress][msg.sender] + (amountIn) (contracts/Batcher/Batcher.sol#106-108)
Reentrancy in Batcher.depositFundsInCurveLpToken(uint256,address,bytes) (contracts/Batcher/Batcher.sol#85-103):
	External calls:
	- lpToken.safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#98)
	- usdcReceived = _convertLpTokenIntoUSDC(lpToken) (contracts/Batcher/Batcher.sol#100)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- lpToken.safeApprove(address(curve3PoolZap),_amount) (contracts/Batcher/Batcher.sol#296)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- expectedWantTokensOut = curve3PoolZap.calc_withdraw_one_coin(address(ust3Pool),_amount,usdcIndexInPool) (contracts/Batcher/Batcher.sol#301-305)
		- receivedWantTokens = curve3PoolZap.remove_liquidity_one_coin(address(ust3Pool),_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - slippageForCurveLp)) / (MAX_BPS)) (contracts/Batcher/Batcher.sol#307-312)
	External calls sending eth:
	- usdcReceived = _convertLpTokenIntoUSDC(lpToken) (contracts/Batcher/Batcher.sol#100)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- _completeDeposit(haulerAddress,usdcReceived) (contracts/Batcher/Batcher.sol#102)
		- depositLedger[haulerAddress][msg.sender] = depositLedger[haulerAddress][msg.sender] + (amountIn) (contracts/Batcher/Batcher.sol#106-108)
Reentrancy in Batcher.withdrawFunds(uint256,address) (contracts/Batcher/Batcher.sol#114-139):
	External calls:
	- IERC20(haulerAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#130)
	State variables written after the call(s):
	- withdrawLedger[haulerAddress][msg.sender] = withdrawLedger[haulerAddress][msg.sender] + (amountIn) (contracts/Batcher/Batcher.sol#132-134)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Batcher.depositFunds(uint256,address,bytes) (contracts/Batcher/Batcher.sol#59-82):
	External calls:
	- IERC20(vaults[haulerAddress].tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#72-76)
	Event emitted after the call(s):
	- DepositRequest(msg.sender,haulerAddress,amountIn) (contracts/Batcher/Batcher.sol#110)
		- _completeDeposit(haulerAddress,amountIn) (contracts/Batcher/Batcher.sol#81)
Reentrancy in Batcher.depositFundsInCurveLpToken(uint256,address,bytes) (contracts/Batcher/Batcher.sol#85-103):
	External calls:
	- lpToken.safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#98)
	- usdcReceived = _convertLpTokenIntoUSDC(lpToken) (contracts/Batcher/Batcher.sol#100)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- lpToken.safeApprove(address(curve3PoolZap),_amount) (contracts/Batcher/Batcher.sol#296)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- expectedWantTokensOut = curve3PoolZap.calc_withdraw_one_coin(address(ust3Pool),_amount,usdcIndexInPool) (contracts/Batcher/Batcher.sol#301-305)
		- receivedWantTokens = curve3PoolZap.remove_liquidity_one_coin(address(ust3Pool),_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - slippageForCurveLp)) / (MAX_BPS)) (contracts/Batcher/Batcher.sol#307-312)
	External calls sending eth:
	- usdcReceived = _convertLpTokenIntoUSDC(lpToken) (contracts/Batcher/Batcher.sol#100)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	Event emitted after the call(s):
	- DepositRequest(msg.sender,haulerAddress,amountIn) (contracts/Batcher/Batcher.sol#110)
		- _completeDeposit(haulerAddress,usdcReceived) (contracts/Batcher/Batcher.sol#102)
Reentrancy in Batcher.withdrawFunds(uint256,address) (contracts/Batcher/Batcher.sol#114-139):
	External calls:
	- IERC20(haulerAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#130)
	Event emitted after the call(s):
	- WithdrawRequest(msg.sender,haulerAddress,amountIn) (contracts/Batcher/Batcher.sol#138)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)
EIP712.splitSignature(bytes) (contracts/Batcher/EIP712.sol#45-73) uses assembly
	- INLINE ASM (contracts/Batcher/EIP712.sol#56-70)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Different versions of Solidity is used:
	- Version used: ['^0.8.0', '^0.8.1', '^0.8.4']
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.4 (contracts/Batcher/Batcher.sol#2)
	- ^0.8.0 (contracts/Batcher/EIP712.sol#2)
	- ^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurvePool.sol#2)
	- ^0.8.0 (interfaces/IHauler.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Address.functionCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#85-87) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-120) is never used and should be removed
Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#174-176) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193) is never used and should be removed
Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#147-149) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166) is never used and should be removed
Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65) is never used and should be removed
Batcher._tokenBalance(IERC20Metadata) (contracts/Batcher/Batcher.sol#255-257) is never used and should be removed
Context._msgData() (node_modules/@openzeppelin/contracts/utils/Context.sol#21-23) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#69-80) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#60-67) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (contracts/Batcher/EIP712.sol#2) allows old versions
Pragma version^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurvePool.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/IHauler.sol#2) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Batcher.sweep(address)._token (contracts/Batcher/Batcher.sol#259) is not in mixedCase
Parameter Batcher.setGovernance(address)._governance (contracts/Batcher/Batcher.sol#266) is not in mixedCase
Parameter Batcher.setSlippage(uint256)._slippage (contracts/Batcher/Batcher.sol#316) is not in mixedCase
Variable Batcher.DUST_LIMIT (contracts/Batcher/Batcher.sol#21) is not in mixedCase
Function ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#5-9) is not in mixedCase
Parameter ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128)._token_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#7) is not in mixedCase
Function ICurveDepositZapper.calc_token_amount(address,uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#11-15) is not in mixedCase
Parameter ICurveDepositZapper.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#14) is not in mixedCase
Function ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#17-22) is not in mixedCase
Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._burn_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#19) is not in mixedCase
Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#21) is not in mixedCase
Function ICurveDepositZapper.add_liquidity(address,uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#24-28) is not in mixedCase
Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._deposit_amounts (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#26) is not in mixedCase
Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#27) is not in mixedCase
Parameter ICurvePool.exchange(int128,int128,uint256,uint256,address)._min_dy (contracts/ConvexExecutor/interfaces/ICurvePool.sol#9) is not in mixedCase
Function ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#13-17) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#14) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#16) is not in mixedCase
Function ICurvePool.add_liquidity(uint256[3],uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19-21) is not in mixedCase
Parameter ICurvePool.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19) is not in mixedCase
Function ICurvePool.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#23-27) is not in mixedCase
Function ICurvePool.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurvePool.sol#29) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Batcher.DUST_LIMIT (contracts/Batcher/Batcher.sol#21) is never used in Batcher (contracts/Batcher/Batcher.sol#18-347)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Batcher.DUST_LIMIT (contracts/Batcher/Batcher.sol#21) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (node_modules/@openzeppelin/contracts/access/Ownable.sol#54-56)
transferOwnership(address) should be declared external:
	- Ownable.transferOwnership(address) (node_modules/@openzeppelin/contracts/access/Ownable.sol#62-65)
setAuthority(address) should be declared external:
	- Batcher.setAuthority(address) (contracts/Batcher/Batcher.sol#54-56)
sweep(address) should be declared external:
	- Batcher.sweep(address) (contracts/Batcher/Batcher.sol#259-264)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
contracts/Batcher/Batcher.sol analyzed (12 contracts with 77 detectors), 78 result(s) found