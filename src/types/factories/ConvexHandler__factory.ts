/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConvexHandler, ConvexHandlerInterface } from "../ConvexHandler";

const _abi = [
  {
    inputs: [],
    name: "baseRewardPool",
    outputs: [
      {
        internalType: "contract IConvexRewards",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ust3Pool",
    outputs: [
      {
        internalType: "contract ICurvePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ad8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80631f1fa133146037578063475a91d1146065575b600080fd5b6001546049906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546049906001600160a01b03168156fea26469706673582212204781f4cbe7088acad985090fab09e6ab90fdf6d83efbcd23930c25c3137591b764736f6c63430008040033";

export class ConvexHandler__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConvexHandler> {
    return super.deploy(overrides || {}) as Promise<ConvexHandler>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConvexHandler {
    return super.attach(address) as ConvexHandler;
  }
  connect(signer: Signer): ConvexHandler__factory {
    return super.connect(signer) as ConvexHandler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexHandlerInterface {
    return new utils.Interface(_abi) as ConvexHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexHandler {
    return new Contract(address, _abi, signerOrProvider) as ConvexHandler;
  }
}
