07 Apr, 2022
------------

BaseTradeExecutor.sweep(address) (contracts/BaseTradeExecutor.sol#44-49) ignores return value by IERC20(_token).transfer(governance(),IERC20(_token).balanceOf(address(this))) (contracts/BaseTradeExecutor.sol#45-48)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

---

ConvexPositionHandler._lpTokenValueInUSDC(uint256) (contracts/ConvexExecutor/ConvexPositionHandler.sol#377-386) uses a dangerous strict equality:
	- _value == 0 (contracts/ConvexExecutor/ConvexPositionHandler.sol#378)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

BaseTradeExecutor.constructor(address) (contracts/BaseTradeExecutor.sol#17-20) ignores return value by IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)
ConvexPositionHandler._closePosition(bytes) (contracts/ConvexExecutor/ConvexPositionHandler.sol#240-251) ignores return value by baseRewardPool.withdrawAndUnwrap(closePositionParams._amount,true) (contracts/ConvexExecutor/ConvexPositionHandler.sol#250)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

---

Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/ConvexPositionHandler.sol#262-286):
	External calls:
	- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/ConvexPositionHandler.sol#263)
	- harvester.harvest() (contracts/ConvexExecutor/ConvexPositionHandler.sol#280)
	State variables written after the call(s):
	- latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance (contracts/ConvexExecutor/ConvexPositionHandler.sol#282-284)
	- totalCummulativeRewards += latestHarvestedRewards (contracts/ConvexExecutor/ConvexPositionHandler.sol#285)
Reentrancy in ConvexTradeExecutor._initateDeposit(bytes) (contracts/ConvexTradeExecutor.sol#94-97):
	External calls:
	- ConvexPositionHandler._deposit(_data) (contracts/ConvexTradeExecutor.sol#95)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- wantToken.approve(address(curve3PoolZap),_amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#356)
		- receivedLpTokens = curve3PoolZap.add_liquidity(address(ust3Pool),liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/ConvexPositionHandler.sol#365-369)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	External calls sending eth:
	- ConvexPositionHandler._deposit(_data) (contracts/ConvexTradeExecutor.sol#95)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- BaseTradeExecutor.confirmDeposit() (contracts/ConvexTradeExecutor.sol#96)
		- depositStatus.inProcess = false (contracts/BaseTradeExecutor.sol#60)
Reentrancy in ConvexTradeExecutor._initiateWithdraw(bytes) (contracts/ConvexTradeExecutor.sol#104-107):
	External calls:
	- ConvexPositionHandler._withdraw(_data) (contracts/ConvexTradeExecutor.sol#105)
		- lpToken.approve(address(curve3PoolZap),_amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#325)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- receivedWantTokens = curve3PoolZap.remove_liquidity_one_coin(address(ust3Pool),_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/ConvexPositionHandler.sol#336-341)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/ConvexPositionHandler.sol#189-192)
	External calls sending eth:
	- ConvexPositionHandler._withdraw(_data) (contracts/ConvexTradeExecutor.sol#105)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- BaseTradeExecutor.confirmWithdraw() (contracts/ConvexTradeExecutor.sol#106)
		- withdrawalStatus.inProcess = false (contracts/BaseTradeExecutor.sol#72)
Reentrancy in ConvexTradeExecutor.constructor(address,address,address,address,address,address) (contracts/ConvexTradeExecutor.sol#20-36):
	External calls:
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- lpToken.approve(address(convexBooster),type()(uint256).max) (contracts/ConvexExecutor/ConvexPositionHandler.sol#109)
	- BaseTradeExecutor(_vault) (contracts/ConvexTradeExecutor.sol#27)
		- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)
	External calls sending eth:
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- baseRewardPool = IConvexRewards(_baseRewardPool) (contracts/ConvexExecutor/ConvexPositionHandler.sol#99)
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- curve3PoolZap = ICurveDepositZapper(_curve3PoolZap) (contracts/ConvexExecutor/ConvexPositionHandler.sol#103)
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- harvester = IHarvester(_harvester) (contracts/ConvexExecutor/ConvexPositionHandler.sol#108)
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- ust3Pool = ICurvePool(_ust3Pool) (contracts/ConvexExecutor/ConvexPositionHandler.sol#102)
	- ConvexPositionHandler._configHandler(_baseRewardPool,_convexBooster,_ust3Pool,_curve3PoolZap,vaultWantToken(),_harvester) (contracts/ConvexTradeExecutor.sol#28-35)
		- wantToken = IERC20(_token) (contracts/ConvexExecutor/ConvexPositionHandler.sol#105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in ConvexPositionHandler._deposit(bytes) (contracts/ConvexExecutor/ConvexPositionHandler.sol#145-155):
	External calls:
	- _convertUSDCIntoLpToken(depositParams._amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#152)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- wantToken.approve(address(curve3PoolZap),_amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#356)
		- receivedLpTokens = curve3PoolZap.add_liquidity(address(ust3Pool),liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/ConvexPositionHandler.sol#365-369)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	External calls sending eth:
	- _convertUSDCIntoLpToken(depositParams._amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#152)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	Event emitted after the call(s):
	- Deposit(depositParams._amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#154)
Reentrancy in ConvexPositionHandler._withdraw(bytes) (contracts/ConvexExecutor/ConvexPositionHandler.sol#162-206):
	External calls:
	- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/ConvexPositionHandler.sol#189-192)
	- _convertLpTokenIntoUSDC(lpTokensToConvert) (contracts/ConvexExecutor/ConvexPositionHandler.sol#202)
		- lpToken.approve(address(curve3PoolZap),_amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#325)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- receivedWantTokens = curve3PoolZap.remove_liquidity_one_coin(address(ust3Pool),_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/ConvexPositionHandler.sol#336-341)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	External calls sending eth:
	- _convertLpTokenIntoUSDC(lpTokensToConvert) (contracts/ConvexExecutor/ConvexPositionHandler.sol#202)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	Event emitted after the call(s):
	- Withdraw(withdrawParams._amount) (contracts/ConvexExecutor/ConvexPositionHandler.sol#205)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Different versions of Solidity is used:
	- Version used: ['^0.8.0', '^0.8.1']
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.0 (contracts/BaseTradeExecutor.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/ConvexPositionHandler.sol#2)
	- v2 (contracts/ConvexExecutor/ConvexPositionHandler.sol#3)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexBooster.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexRewards.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurvePool.sol#2)
	- ^0.8.0 (contracts/ConvexExecutor/interfaces/IHarvester.sol#2)
	- ^0.8.0 (contracts/ConvexTradeExecutor.sol#2)
	- ^0.8.0 (interfaces/BasePositionHandler.sol#2)
	- ^0.8.0 (interfaces/ITradeExecutor.sol#2)
	- ^0.8.0 (interfaces/IVault.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Address.functionCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#85-87) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-120) is never used and should be removed
Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#174-176) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193) is never used and should be removed
Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#147-149) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166) is never used and should be removed
Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65) is never used and should be removed
BasePositionHandler._claimRewards(bytes) (interfaces/BasePositionHandler.sol#35) is never used and should be removed
BasePositionHandler._closePosition(bytes) (interfaces/BasePositionHandler.sol#29) is never used and should be removed
BasePositionHandler._deposit(bytes) (interfaces/BasePositionHandler.sol#31) is never used and should be removed
BasePositionHandler._openPosition(bytes) (interfaces/BasePositionHandler.sol#27) is never used and should be removed
BasePositionHandler._withdraw(bytes) (interfaces/BasePositionHandler.sol#33) is never used and should be removed
BaseTradeExecutor._confirmDeposit() (contracts/BaseTradeExecutor.sol#79) is never used and should be removed
BaseTradeExecutor._confirmWithdraw() (contracts/BaseTradeExecutor.sol#83) is never used and should be removed
BaseTradeExecutor._initateDeposit(bytes) (contracts/BaseTradeExecutor.sol#77) is never used and should be removed
BaseTradeExecutor._initiateWithdraw(bytes) (contracts/BaseTradeExecutor.sol#81) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#69-80) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#60-67) is never used and should be removed
SafeERC20.safeTransferFrom(IERC20,address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#29-36) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (contracts/BaseTradeExecutor.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/ConvexPositionHandler.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexBooster.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexRewards.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurvePool.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IHarvester.sol#2) allows old versions
Pragma version^0.8.0 (contracts/ConvexTradeExecutor.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/BasePositionHandler.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/ITradeExecutor.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/IVault.sol#2) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter BaseTradeExecutor.sweep(address)._token (contracts/BaseTradeExecutor.sol#44) is not in mixedCase
Parameter BaseTradeExecutor.initiateDeposit(bytes)._data (contracts/BaseTradeExecutor.sol#51) is not in mixedCase
Parameter BaseTradeExecutor.initateWithdraw(bytes)._data (contracts/BaseTradeExecutor.sol#63) is not in mixedCase
Function ConvexPositionHandler._USDCValueInLpToken(uint256) (contracts/ConvexExecutor/ConvexPositionHandler.sol#393-402) is not in mixedCase
Parameter ConvexPositionHandler._USDCValueInLpToken(uint256)._value (contracts/ConvexExecutor/ConvexPositionHandler.sol#393) is not in mixedCase
Variable ConvexPositionHandler.MAX_BPS (contracts/ConvexExecutor/ConvexPositionHandler.sol#42) is not in mixedCase
Function ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#5-9) is not in mixedCase
Parameter ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128)._token_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#7) is not in mixedCase
Function ICurveDepositZapper.calc_token_amount(address,uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#11-15) is not in mixedCase
Parameter ICurveDepositZapper.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#14) is not in mixedCase
Function ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#17-22) is not in mixedCase
Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._burn_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#19) is not in mixedCase
Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#21) is not in mixedCase
Function ICurveDepositZapper.add_liquidity(address,uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#24-28) is not in mixedCase
Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._deposit_amounts (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#26) is not in mixedCase
Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#27) is not in mixedCase
Parameter ICurvePool.exchange(int128,int128,uint256,uint256,address)._min_dy (contracts/ConvexExecutor/interfaces/ICurvePool.sol#9) is not in mixedCase
Function ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#13-17) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#14) is not in mixedCase
Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#16) is not in mixedCase
Function ICurvePool.add_liquidity(uint256[3],uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19-21) is not in mixedCase
Parameter ICurvePool.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19) is not in mixedCase
Function ICurvePool.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#23-27) is not in mixedCase
Function ICurvePool.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurvePool.sol#29) is not in mixedCase
Function IHarvester._3crv() (contracts/ConvexExecutor/interfaces/IHarvester.sol#11) is not in mixedCase
Parameter ConvexTradeExecutor.setSlippage(uint256)._slippage (contracts/ConvexTradeExecutor.sol#57) is not in mixedCase
Parameter ConvexTradeExecutor.setHandler(address,address,address,address,address)._baseRewardPool (contracts/ConvexTradeExecutor.sol#70) is not in mixedCase
Parameter ConvexTradeExecutor.setHandler(address,address,address,address,address)._convexBooster (contracts/ConvexTradeExecutor.sol#71) is not in mixedCase
Parameter ConvexTradeExecutor.setHandler(address,address,address,address,address)._ust3Pool (contracts/ConvexTradeExecutor.sol#72) is not in mixedCase
Parameter ConvexTradeExecutor.setHandler(address,address,address,address,address)._curve3PoolZap (contracts/ConvexTradeExecutor.sol#73) is not in mixedCase
Parameter ConvexTradeExecutor.setHandler(address,address,address,address,address)._harvester (contracts/ConvexTradeExecutor.sol#74) is not in mixedCase
Parameter ConvexTradeExecutor.openPosition(bytes)._data (contracts/ConvexTradeExecutor.sol#129) is not in mixedCase
Parameter ConvexTradeExecutor.closePosition(bytes)._data (contracts/ConvexTradeExecutor.sol#138) is not in mixedCase
Parameter ConvexTradeExecutor.claimRewards(bytes)._data (contracts/ConvexTradeExecutor.sol#150) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

sweep(address) should be declared external:
	- BaseTradeExecutor.sweep(address) (contracts/BaseTradeExecutor.sol#44-49)
initiateDeposit(bytes) should be declared external:
	- BaseTradeExecutor.initiateDeposit(bytes) (contracts/BaseTradeExecutor.sol#51-55)
initateWithdraw(bytes) should be declared external:
	- BaseTradeExecutor.initateWithdraw(bytes) (contracts/BaseTradeExecutor.sol#63-67)
totalFunds() should be declared external:
	- ConvexTradeExecutor.totalFunds() (contracts/ConvexTradeExecutor.sol#46-48)
openPosition(bytes) should be declared external:
	- ConvexTradeExecutor.openPosition(bytes) (contracts/ConvexTradeExecutor.sol#129-131)
closePosition(bytes) should be declared external:
	- ConvexTradeExecutor.closePosition(bytes) (contracts/ConvexTradeExecutor.sol#138-140)
claimRewards(bytes) should be declared external:
	- ConvexTradeExecutor.claimRewards(bytes) (contracts/ConvexTradeExecutor.sol#150-152)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
contracts/ConvexTradeExecutor.sol analyzed (15 contracts with 77 detectors), 91 result(s) found