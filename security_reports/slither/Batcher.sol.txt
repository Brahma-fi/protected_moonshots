23 June, 2022
-------------

Batcher.sweep(address) (contracts/Batcher/Batcher.sol#413-419) ignores return value by IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this))) (contracts/Batcher/Batcher.sol#415-418)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

---
Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291) uses a dangerous strict equality:
	- assert(bool)(lpTokensReceived == lpTokensReportedByVault) (contracts/Batcher/Batcher.sol#270)
Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354) uses a dangerous strict equality:
	- assert(bool)(wantTokensReceived == wantTokensReportedByVault) (contracts/Batcher/Batcher.sol#333)
Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121) uses a dangerous strict equality:
	- assert(bool)(wantBalanceAfterTransfer - wantBalanceBeforeTransfer == amountIn) (contracts/Batcher/Batcher.sol#104-106)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):
	External calls:
	- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)
	State variables written after the call(s):
	- userLPTokens[msg.sender] = 0 (contracts/Batcher/Batcher.sol#142)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Batcher.constructor(address,address,uint256) (contracts/Batcher/Batcher.sol#28-44) ignores return value by IERC20(vaultInfo.tokenAddress).approve(vaultAddress,type()(uint256).max) (contracts/Batcher/Batcher.sol#43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

---

Batcher.constructor(address,address,uint256)._verificationAuthority (contracts/Batcher/Batcher.sol#29) lacks a zero-check on :
		- verificationAuthority = _verificationAuthority (contracts/Batcher/Batcher.sol#33)
Batcher.setAuthority(address).authority (contracts/Batcher/Batcher.sol#386) lacks a zero-check on :
		- verificationAuthority = authority (contracts/Batcher/Batcher.sol#391)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Variable 'ECDSA.tryRecover(bytes32,bytes).r (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#62)' in ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#57-86) potentially used before declaration: r = mload(uint256)(signature + 0x20) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#79)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables

Reentrancy in Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291):
	External calls:
	- lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this)) (contracts/Batcher/Batcher.sol#261-264)
	State variables written after the call(s):
	- pendingDeposit = pendingDeposit - amountToDeposit (contracts/Batcher/Batcher.sol#288)
	- userLPTokens[users[i_scope_0]] = userLPTokens[users[i_scope_0]] + userShare (contracts/Batcher/Batcher.sol#283)
Reentrancy in Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354):
	External calls:
	- wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this)) (contracts/Batcher/Batcher.sol#325-328)
	State variables written after the call(s):
	- pendingWithdrawal = pendingWithdrawal - amountToWithdraw (contracts/Batcher/Batcher.sol#351)
	- userWantTokens[users[i_scope_0]] = userWantTokens[users[i_scope_0]] + userShare (contracts/Batcher/Batcher.sol#346)
Reentrancy in Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121):
	External calls:
	- IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s) (contracts/Batcher/Batcher.sol#80-88)
	- IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#94-98)
	State variables written after the call(s):
	- depositLedger[recipient] = depositLedger[recipient] + (amountIn) (contracts/Batcher/Batcher.sol#117)
	- pendingDeposit = pendingDeposit + amountIn (contracts/Batcher/Batcher.sol#118)
Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):
	External calls:
	- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)
	State variables written after the call(s):
	- pendingWithdrawal = pendingWithdrawal + amountIn (contracts/Batcher/Batcher.sol#149)
	- withdrawLedger[msg.sender] = withdrawLedger[msg.sender] + (amountIn) (contracts/Batcher/Batcher.sol#147)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291):
	External calls:
	- lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this)) (contracts/Batcher/Batcher.sol#261-264)
	Event emitted after the call(s):
	- BatchDepositSuccessful(lpTokensReceived,totalUsersProcessed) (contracts/Batcher/Batcher.sol#290)
Reentrancy in Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354):
	External calls:
	- wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this)) (contracts/Batcher/Batcher.sol#325-328)
	Event emitted after the call(s):
	- BatchWithdrawSuccessful(wantTokensReceived,totalUsersProcessed) (contracts/Batcher/Batcher.sol#353)
Reentrancy in Batcher.completeWithdrawal(uint256,address) (contracts/Batcher/Batcher.sol#158-170):
	External calls:
	- IERC20(vaultInfo.tokenAddress).safeTransfer(recipient,amountOut) (contracts/Batcher/Batcher.sol#167)
	Event emitted after the call(s):
	- WithdrawComplete(recipient,vaultInfo.vaultAddress,amountOut) (contracts/Batcher/Batcher.sol#169)
Reentrancy in Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121):
	External calls:
	- IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s) (contracts/Batcher/Batcher.sol#80-88)
	- IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#94-98)
	Event emitted after the call(s):
	- DepositRequest(recipient,vaultInfo.vaultAddress,amountIn) (contracts/Batcher/Batcher.sol#120)
Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):
	External calls:
	- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)
	Event emitted after the call(s):
	- WithdrawRequest(msg.sender,vaultInfo.vaultAddress,amountIn) (contracts/Batcher/Batcher.sol#151)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#57-86) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#67-71)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#78-81)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Different versions of Solidity is used:
	- Version used: ['^0.8.0', '^0.8.1', '^0.8.4']
	- ^0.8.4 (contracts/Batcher/Batcher.sol#2)
	- ^0.8.0 (contracts/Batcher/EIP712.sol#2)
	- ^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2)
	- ^0.8.0 (interfaces/IVault.sol#2)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Address.functionCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#85-87) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-120) is never used and should be removed
Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#174-176) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193) is never used and should be removed
Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#147-149) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166) is never used and should be removed
Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65) is never used and should be removed
ECDSA.recover(bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#130-138) is never used and should be removed
ECDSA.recover(bytes32,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#181-190) is never used and should be removed
ECDSA.toEthSignedMessageHash(bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#214-216) is never used and should be removed
ECDSA.toEthSignedMessageHash(bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#200-204) is never used and should be removed
ECDSA.toTypedDataHash(bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#227-229) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#45-58) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#69-80) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#60-67) is never used and should be removed
Strings.toHexString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#40-51) is never used and should be removed
Strings.toHexString(uint256,uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#56-66) is never used and should be removed
Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#15-35) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (contracts/Batcher/EIP712.sol#2) allows old versions
Pragma version^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/IVault.sol#2) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4) allows old versions
solc-0.8.9 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Batcher.sweep(address)._token (contracts/Batcher/Batcher.sol#413) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

claimTokens(uint256,address) should be declared external:
	- Batcher.claimTokens(uint256,address) (contracts/Batcher/Batcher.sol#210-218)
setAuthority(address) should be declared external:
	- Batcher.setAuthority(address) (contracts/Batcher/Batcher.sol#386-392)
setDepositSignatureCheck(bool) should be declared external:
	- Batcher.setDepositSignatureCheck(bool) (contracts/Batcher/Batcher.sol#406-409)
sweep(address) should be declared external:
	- Batcher.sweep(address) (contracts/Batcher/Batcher.sol#413-419)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external

contracts/Batcher/Batcher.sol analyzed (12 contracts with 77 detectors), 61 result(s) found