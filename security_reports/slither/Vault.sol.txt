
07 Apr, 2022
------------

Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#78-98):
	External calls:
	- collectFees() (contracts/Vault.sol#89)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	- IERC20(wantToken).safeTransferFrom(receiver,address(this),amountIn) (contracts/Vault.sol#94)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#89)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- _mint(receiver,shares) (contracts/Vault.sol#95)
		- _totalSupply += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#262)
	- prevVaultFunds = totalVaultFunds() (contracts/Vault.sol#97)
Reentrancy in Vault.withdraw(uint256,address) (contracts/Vault.sol#103-121):
	External calls:
	- collectFees() (contracts/Vault.sol#114)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	- IERC20(wantToken).safeTransfer(receiver,amountOut) (contracts/Vault.sol#118)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#114)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- prevVaultFunds = totalVaultFunds() (contracts/Vault.sol#120)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

---

Vault.constructor(string,string,address,address,address)._name (contracts/Vault.sol#56) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
Vault.constructor(string,string,address,address,address)._symbol (contracts/Vault.sol#57) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Vault.constructor(string,string,address,address,address)._wantToken (contracts/Vault.sol#58) lacks a zero-check on :
		- wantToken = _wantToken (contracts/Vault.sol#63)
Vault.constructor(string,string,address,address,address)._keeper (contracts/Vault.sol#59) lacks a zero-check on :
		- keeper = _keeper (contracts/Vault.sol#64)
Vault.constructor(string,string,address,address,address)._governance (contracts/Vault.sol#60) lacks a zero-check on :
		- governance = _governance (contracts/Vault.sol#65)
Vault.setBatcher(address)._batcher (contracts/Vault.sol#303) lacks a zero-check on :
		- batcher = _batcher (contracts/Vault.sol#306)
Vault.setGovernance(address)._governance (contracts/Vault.sol#325) lacks a zero-check on :
		- pendingGovernance = _governance (contracts/Vault.sol#327)
Vault.setKeeper(address)._keeper (contracts/Vault.sol#353) lacks a zero-check on :
		- keeper = _keeper (contracts/Vault.sol#355)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Vault.totalExecutorFunds() (contracts/Vault.sol#279-289) has external calls inside a loop: (executorFunds,blockUpdated) = ITradeExecutor(executor).totalFunds() (contracts/Vault.sol#283-284)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#78-98):
	External calls:
	- collectFees() (contracts/Vault.sol#89)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	- IERC20(wantToken).safeTransferFrom(receiver,address(this),amountIn) (contracts/Vault.sol#94)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#89)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- _mint(receiver,shares) (contracts/Vault.sol#95)
		- _balances[account] += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#263)
Reentrancy in Vault.withdraw(uint256,address) (contracts/Vault.sol#103-121):
	External calls:
	- collectFees() (contracts/Vault.sol#114)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#114)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	State variables written after the call(s):
	- _burn(receiver,sharesIn) (contracts/Vault.sol#117)
		- _balances[account] = accountBalance - amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#288)
	- _burn(receiver,sharesIn) (contracts/Vault.sol#117)
		- _totalSupply -= amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#290)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Vault.collectFees() (contracts/Vault.sol#204-214):
	External calls:
	- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	Event emitted after the call(s):
	- FeesCollected(yieldEarned) (contracts/Vault.sol#212)
Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#78-98):
	External calls:
	- collectFees() (contracts/Vault.sol#89)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	- IERC20(wantToken).safeTransferFrom(receiver,address(this),amountIn) (contracts/Vault.sol#94)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#89)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#264)
		- _mint(receiver,shares) (contracts/Vault.sol#95)
Reentrancy in Vault.depositIntoExecutor(address,uint256) (contracts/Vault.sol#149-158):
	External calls:
	- IERC20(wantToken).safeTransfer(_executor,_amount) (contracts/Vault.sol#156)
	Event emitted after the call(s):
	- ExecutorDeposit(_executor,_amount) (contracts/Vault.sol#157)
Reentrancy in Vault.withdraw(uint256,address) (contracts/Vault.sol#103-121):
	External calls:
	- collectFees() (contracts/Vault.sol#114)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
		- IERC20(wantToken).safeTransfer(governance,yieldEarned) (contracts/Vault.sol#211)
	External calls sending eth:
	- collectFees() (contracts/Vault.sol#114)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
	Event emitted after the call(s):
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#292)
		- _burn(receiver,sharesIn) (contracts/Vault.sol#117)
Reentrancy in Vault.withdrawFromExecutor(address,uint256) (contracts/Vault.sol#163-172):
	External calls:
	- IERC20(wantToken).safeTransferFrom(_executor,address(this),_amount) (contracts/Vault.sol#170)
	Event emitted after the call(s):
	- ExecutorWithdrawal(_executor,_amount) (contracts/Vault.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Different versions of Solidity is used:
	- Version used: ['^0.8.0', '^0.8.1']
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (contracts/Vault.sol#2)
	- ^0.8.0 (interfaces/ITradeExecutor.sol#2)
	- ^0.8.0 (interfaces/IVault.sol#2)
	- ^0.8.0 (library/AddArrayLib.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

AddrArrayLib.getAllAddresses(AddrArrayLib.Addresses) (library/AddArrayLib.sol#76-78) is never used and should be removed
Address.functionCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#85-87) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-120) is never used and should be removed
Address.functionDelegateCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#174-176) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193) is never used and should be removed
Address.functionStaticCall(address,bytes) (node_modules/@openzeppelin/contracts/utils/Address.sol#147-149) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166) is never used and should be removed
Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65) is never used and should be removed
Context._msgData() (node_modules/@openzeppelin/contracts/utils/Context.sol#21-23) is never used and should be removed
SafeERC20.approve(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#45-58) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#69-80) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#60-67) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (contracts/Vault.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/ITradeExecutor.sol#2) allows old versions
Pragma version^0.8.0 (interfaces/IVault.sol#2) allows old versions
Pragma version^0.8.0 (library/AddArrayLib.sol#2) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter Vault.depositIntoExecutor(address,uint256)._executor (contracts/Vault.sol#149) is not in mixedCase
Parameter Vault.depositIntoExecutor(address,uint256)._amount (contracts/Vault.sol#149) is not in mixedCase
Parameter Vault.withdrawFromExecutor(address,uint256)._executor (contracts/Vault.sol#163) is not in mixedCase
Parameter Vault.withdrawFromExecutor(address,uint256)._amount (contracts/Vault.sol#163) is not in mixedCase
Parameter Vault.setPerformanceFee(uint256)._fee (contracts/Vault.sol#188) is not in mixedCase
Parameter Vault.addExecutor(address)._tradeExecutor (contracts/Vault.sol#229) is not in mixedCase
Parameter Vault.removeExecutor(address)._tradeExecutor (contracts/Vault.sol#247) is not in mixedCase
Parameter Vault.executorByIndex(uint256)._index (contracts/Vault.sol#272) is not in mixedCase
Parameter Vault.setBatcher(address)._batcher (contracts/Vault.sol#303) is not in mixedCase
Parameter Vault.setBatcherOnlyDeposit(bool)._batcherOnlyDeposit (contracts/Vault.sol#316) is not in mixedCase
Parameter Vault.setGovernance(address)._governance (contracts/Vault.sol#325) is not in mixedCase
Parameter Vault.setKeeper(address)._keeper (contracts/Vault.sol#353) is not in mixedCase
Parameter Vault.sweep(address)._token (contracts/Vault.sol#363) is not in mixedCase
Parameter Vault.isValidAddress(address)._tradeExecutor (contracts/Vault.sol#392) is not in mixedCase
Parameter Vault.isActiveExecutor(address)._tradeExecutor (contracts/Vault.sol#397) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

name() should be declared external:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64)
symbol() should be declared external:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#70-72)
decimals() should be declared external:
	- ERC20.decimals() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#87-89)
	- Vault.decimals() (contracts/Vault.sol#68-70)
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#101-103)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#113-117)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#136-140)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#158-167)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#181-185)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#201-210)
deposit(uint256,address) should be declared external:
	- Vault.deposit(uint256,address) (contracts/Vault.sol#78-98)
withdraw(uint256,address) should be declared external:
	- Vault.withdraw(uint256,address) (contracts/Vault.sol#103-121)
depositIntoExecutor(address,uint256) should be declared external:
	- Vault.depositIntoExecutor(address,uint256) (contracts/Vault.sol#149-158)
withdrawFromExecutor(address,uint256) should be declared external:
	- Vault.withdrawFromExecutor(address,uint256) (contracts/Vault.sol#163-172)
setPerformanceFee(uint256) should be declared external:
	- Vault.setPerformanceFee(uint256) (contracts/Vault.sol#188-193)
addExecutor(address) should be declared external:
	- Vault.addExecutor(address) (contracts/Vault.sol#229-242)
removeExecutor(address) should be declared external:
	- Vault.removeExecutor(address) (contracts/Vault.sol#247-262)
setBatcher(address) should be declared external:
	- Vault.setBatcher(address) (contracts/Vault.sol#303-307)
setBatcherOnlyDeposit(bool) should be declared external:
	- Vault.setBatcherOnlyDeposit(bool) (contracts/Vault.sol#316-320)
setGovernance(address) should be declared external:
	- Vault.setGovernance(address) (contracts/Vault.sol#325-328)
acceptGovernance() should be declared external:
	- Vault.acceptGovernance() (contracts/Vault.sol#340-344)
setKeeper(address) should be declared external:
	- Vault.setKeeper(address) (contracts/Vault.sol#353-357)
sweep(address) should be declared external:
	- Vault.sweep(address) (contracts/Vault.sol#363-369)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
contracts/Vault.sol analyzed (11 contracts with 77 detectors), 84 result(s) found