{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.8.2",
          "rules": [
            {
              "id": "0-0-name-reused",
              "name": "name-reused",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Name reused"
              },
              "help": {
                "text": "Rename the contract."
              }
            },
            {
              "id": "0-1-reentrancy-eth",
              "name": "reentrancy-eth",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions pattern`](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "0-1-unchecked-transfer",
              "name": "unchecked-transfer",
              "properties": {
                "precision": "high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Unchecked transfer"
              },
              "help": {
                "text": "Use `SafeERC20`, or ensure that the transfer/transferFrom return value is checked."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-0-incorrect-equality",
              "name": "incorrect-equality",
              "properties": {
                "precision": "very-high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Dangerous strict equalities"
              },
              "help": {
                "text": "Don't use strict equality to determine if an account has enough Ether or tokens."
              }
            },
            {
              "id": "1-1-reentrancy-no-eth",
              "name": "reentrancy-no-eth",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "1-1-uninitialized-local",
              "name": "uninitialized-local",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Uninitialized local variables"
              },
              "help": {
                "text": "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-missing-zero-check",
              "name": "missing-zero-check",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Missing zero address validation"
              },
              "help": {
                "text": "Check that the address is not zero."
              }
            },
            {
              "id": "2-1-calls-loop",
              "name": "calls-loop",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Calls inside a loop"
              },
              "help": {
                "text": "Favor [pull over push](https://github.com/ethereum/wiki/wiki/Safety#favor-pull-over-push-for-external-calls) strategy for external calls."
              }
            },
            {
              "id": "2-0-variable-scope",
              "name": "variable-scope",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Pre-declaration usage of local variables"
              },
              "help": {
                "text": "Move all variable declarations prior to any usage of the variable, and ensure that reaching a variable declaration does not depend on some conditional if it is used unconditionally."
              }
            },
            {
              "id": "2-1-reentrancy-benign",
              "name": "reentrancy-benign",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-boolean-equal",
              "name": "boolean-equal",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Boolean equality"
              },
              "help": {
                "text": "Remove the equality to the boolean constant."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-1-dead-code",
              "name": "dead-code",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Dead-code"
              },
              "help": {
                "text": "Remove unused functions."
              }
            },
            {
              "id": "3-0-function-init-state",
              "name": "function-init-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Function Initializing State"
              },
              "help": {
                "text": "Remove any initialization of state variables via non-constant state variables or function calls. If variables must be set upon contract deployment, locate initialization in the constructor instead."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.5.16 - 0.5.17\n- 0.6.11 - 0.6.12\n- 0.7.5 - 0.7.6\n- 0.8.4 - 0.8.7\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            },
            {
              "id": "3-1-too-many-digits",
              "name": "too-many-digits",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Too many digits"
              },
              "help": {
                "text": "\nUse:\n- [Ether suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units),\n- [Time suffix](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#time-units), or\n- [The scientific notation](https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer-literals)\n"
              }
            },
            {
              "id": "3-0-unused-state",
              "name": "unused-state",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Unused state variable"
              },
              "help": {
                "text": "Remove unused state variables."
              }
            },
            {
              "id": "4-0-constable-states",
              "name": "constable-states",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "State variables that could be declared constant"
              },
              "help": {
                "text": "Add the `constant` attributes to state variables that never change."
              }
            },
            {
              "id": "4-0-external-function",
              "name": "external-function",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Public function that could be declared external"
              },
              "help": {
                "text": "Use the `external` attribute for functions never called from the contract."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "ConvexPositionHandler is re-used:\n\t- ConvexPositionHandler (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#20-479)\n\t- ConvexPositionHandler (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#21-490)\n",
            "markdown": "ConvexPositionHandler is re-used:\n\t- [ConvexPositionHandler](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L20-L479)\n\t- [ConvexPositionHandler](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L21-L490)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 479
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "46a44401350389f2e5995c47183d04ca7e13b3077aa7b14565e25ec301a61f34"
          }
        },
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "EIP712 is re-used:\n\t- EIP712 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#27-104)\n\t- EIP712 (contracts/Batcher/EIP712.sol#9-44)\n",
            "markdown": "EIP712 is re-used:\n\t- [EIP712](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L27-L104)\n\t- [EIP712](contracts/Batcher/EIP712.sol#L9-L44)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca112f589771b771dea9005693cd919a97a1441a8bcc017f2d43bb351c5635f1"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#90-108):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Vault.sol#106)\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tState variables written after the call(s):\n\t- _mint(receiver,shares) (contracts/Vault.sol#107)\n\t\t- _totalSupply += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#262)\n",
            "markdown": "Reentrancy in [Vault.deposit(uint256,address)](contracts/Vault.sol#L90-L108):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn)](contracts/Vault.sol#L106)\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tState variables written after the call(s):\n\t- [_mint(receiver,shares)](contracts/Vault.sol#L107)\n\t\t- [_totalSupply += amount](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L262)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "09bf62f107470e3e18ccd9ce7913299526c7d6b05037ac9de5eb1be6b84d6fc7"
          }
        },
        {
          "ruleId": "0-1-reentrancy-eth",
          "message": {
            "text": "Reentrancy in Vault.ensureFeesAreCollected() (contracts/Vault.sol#280-287):\n\tExternal calls:\n\t- collectFees() (contracts/Vault.sol#281)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- collectFees() (contracts/Vault.sol#281)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tState variables written after the call(s):\n\t- lastReportedTime = block.timestamp (contracts/Vault.sol#286)\n\t- prevVaultFunds = totalVaultFunds() (contracts/Vault.sol#284)\n",
            "markdown": "Reentrancy in [Vault.ensureFeesAreCollected()](contracts/Vault.sol#L280-L287):\n\tExternal calls:\n\t- [collectFees()](contracts/Vault.sol#L281)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [collectFees()](contracts/Vault.sol#L281)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tState variables written after the call(s):\n\t- [lastReportedTime = block.timestamp](contracts/Vault.sol#L286)\n\t- [prevVaultFunds = totalVaultFunds()](contracts/Vault.sol#L284)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 280,
                  "endLine": 287
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95f1062b2731f9b310b61c863be951c62008985b553a5d41fd6e40ba80d0b8d4"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "PerpPositionHandlerL2.sweep(address) (contracts/PerpL2/PerpPositionHandlerL2.sol#188-193) ignores return value by IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this))) (contracts/PerpL2/PerpPositionHandlerL2.sol#189-192)\n",
            "markdown": "[PerpPositionHandlerL2.sweep(address)](contracts/PerpL2/PerpPositionHandlerL2.sol#L188-L193) ignores return value by [IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this)))](contracts/PerpL2/PerpPositionHandlerL2.sol#L189-L192)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96aa2cea755739b46278b3041f5f640f082880bcc259ae8b2c11efa4453118a7"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "BaseTradeExecutor.sweep(address) (contracts/BaseTradeExecutor.sol#54-59) ignores return value by IERC20(_token).transfer(governance(),IERC20(_token).balanceOf(address(this))) (contracts/BaseTradeExecutor.sol#55-58)\n",
            "markdown": "[BaseTradeExecutor.sweep(address)](contracts/BaseTradeExecutor.sol#L54-L59) ignores return value by [IERC20(_token).transfer(governance(),IERC20(_token).balanceOf(address(this)))](contracts/BaseTradeExecutor.sol#L55-L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fda2466a8c97bd6729276b6a4cf5ece1914e4ae4b1200b05933f6d0969dcc7f0"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "Batcher.sweep(address) (contracts/Batcher/Batcher.sol#413-419) ignores return value by IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this))) (contracts/Batcher/Batcher.sol#415-418)\n",
            "markdown": "[Batcher.sweep(address)](contracts/Batcher/Batcher.sol#L413-L419) ignores return value by [IERC20(_token).transfer(msg.sender,IERC20(_token).balanceOf(address(this)))](contracts/Batcher/Batcher.sol#L415-L418)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 419
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab541853ef6d44bd578c67aa14b147c2b1b564d919490a63ee4b60e43a4d0587"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) (contracts/Migration/Migratooor.sol#28-84) ignores return value by usdc.transferFrom(msg.sender,address(this),amountOut) (contracts/Migration/Migratooor.sol#64)\n",
            "markdown": "[Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes)](contracts/Migration/Migratooor.sol#L28-L84) ignores return value by [usdc.transferFrom(msg.sender,address(this),amountOut)](contracts/Migration/Migratooor.sol#L64)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1343382ef53fdd24a91550bf6a058c02b54014b49aa93b2ee6b8091e9b430b4"
          }
        },
        {
          "ruleId": "0-1-unchecked-transfer",
          "message": {
            "text": "Vault.withdraw(uint256,address) (contracts/Vault.sol#113-135) ignores return value by IERC20(wantToken).transfer(governance,fee) (contracts/Vault.sol#131)\n",
            "markdown": "[Vault.withdraw(uint256,address)](contracts/Vault.sol#L113-L135) ignores return value by [IERC20(wantToken).transfer(governance,fee)](contracts/Vault.sol#L131)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "730d0d995f64bcc72b9450cf0fb311123b79bde89b0d8455f310008e52d3a533"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv = (3 * denominator) ^ 2 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#87)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv = (3 * denominator) ^ 2](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d2e34250d0896deea11b297f65674c9b128b469527554219c3f6b080c9c3cc5"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#91)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L91)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7fd03496d87c8a329db0c85791cf14f953d80ea4919ddf1df1343240e4cbbe84"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#92)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34f299286914d73bb1c70aeb2c8a00a9113366b98f69cfb062b169a36d5e74c8"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#93)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L93)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8fc35fb34c196499483b4a473165549785eedbd34f296028ba54c1a95a41885a"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#94)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L94)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a96010fe58e9326ab83428dd676b8e52eab27b0e4649699e15850fe383ebdc01"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#95)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "19a1dc794182ff913cd42d45fcf6bff659da6d4ed0723205dd874610da9c7d94"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)\n\t-inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#96)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[denominator = denominator / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L67)\n\t-[inv *= 2 - denominator * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dbb7cb97919754ee7475ae5b3e80d74694daf5f37cab7874d54293b309f8744b"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:\n\t-prod0 = prod0 / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#72)\n\t-result = prod0 * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#104)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) performs a multiplication on the result of a division:\n\t-[prod0 = prod0 / twos](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L72)\n\t-[result = prod0 * inv](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6b129354da6a50edaab85de0aca39406cf4765198bc081c9124d60afd8af9e45"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "PerpV2Controller._openPositionByAmount(bool,uint256,uint24) (contracts/PerpL2/PerpV2Controller.sol#85-123) performs a multiplication on the result of a division:\n\t-amountOut = amountOut.mul(MAX_BPS).div(price) (contracts/PerpL2/PerpV2Controller.sol#102)\n\t-amountOut = amountIn.mul(MAX_BPS - slippage).div(MAX_BPS) (contracts/PerpL2/PerpV2Controller.sol#97-99)\n",
            "markdown": "[PerpV2Controller._openPositionByAmount(bool,uint256,uint24)](contracts/PerpL2/PerpV2Controller.sol#L85-L123) performs a multiplication on the result of a division:\n\t-[amountOut = amountOut.mul(MAX_BPS).div(price)](contracts/PerpL2/PerpV2Controller.sol#L102)\n\t-[amountOut = amountIn.mul(MAX_BPS - slippage).div(MAX_BPS)](contracts/PerpL2/PerpV2Controller.sol#L97-L99)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 123
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97e6e701a48d46c1c8a1e7424ed40b468173c98f6e06c89d7b25f33ab8df8033"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "PerpV2Controller._closePosition(uint256) (contracts/PerpL2/PerpV2Controller.sol#127-152) performs a multiplication on the result of a division:\n\t-amountOut = amountOut.mul(MAX_BPS + slippage).div(MAX_BPS) (contracts/PerpL2/PerpV2Controller.sol#136-138)\n\t-amountOut = amountOut.mul(MAX_BPS - slippage).div(MAX_BPS) (contracts/PerpL2/PerpV2Controller.sol#136-138)\n",
            "markdown": "[PerpV2Controller._closePosition(uint256)](contracts/PerpL2/PerpV2Controller.sol#L127-L152) performs a multiplication on the result of a division:\n\t-[amountOut = amountOut.mul(MAX_BPS + slippage).div(MAX_BPS)](contracts/PerpL2/PerpV2Controller.sol#L136-L138)\n\t-[amountOut = amountOut.mul(MAX_BPS - slippage).div(MAX_BPS)](contracts/PerpL2/PerpV2Controller.sol#L136-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a8b632b64da87f4c643e649422ff88b03fac6a3c147ad832c1f3f4e84ab134d"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "PerpV2Controller._closePosition(uint256) (contracts/PerpL2/PerpV2Controller.sol#127-152) performs a multiplication on the result of a division:\n\t-amountOut = amountOut.mul(price).div(MAX_BPS) (contracts/PerpL2/PerpV2Controller.sol#139)\n\t-amountOut = amountOut.mul(MAX_BPS + slippage).div(MAX_BPS) (contracts/PerpL2/PerpV2Controller.sol#136-138)\n",
            "markdown": "[PerpV2Controller._closePosition(uint256)](contracts/PerpL2/PerpV2Controller.sol#L127-L152) performs a multiplication on the result of a division:\n\t-[amountOut = amountOut.mul(price).div(MAX_BPS)](contracts/PerpL2/PerpV2Controller.sol#L139)\n\t-[amountOut = amountOut.mul(MAX_BPS + slippage).div(MAX_BPS)](contracts/PerpL2/PerpV2Controller.sol#L136-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58aa597f8e197e36c82130894ea7aeb20341de1fd6d9d04c36c9c3b3cf3a0519"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FraxConvexPositionHandler._convertLpTokenIntoUSDC(uint256) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#317-334) performs a multiplication on the result of a division:\n\t-expectedWantTokensOut = (_amount * fraxPool.get_virtual_price()) / NORMALIZATION_FACTOR (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#326-327)\n\t-receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#329-333)\n",
            "markdown": "[FraxConvexPositionHandler._convertLpTokenIntoUSDC(uint256)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L317-L334) performs a multiplication on the result of a division:\n\t-[expectedWantTokensOut = (_amount * fraxPool.get_virtual_price()) / NORMALIZATION_FACTOR](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L326-L327)\n\t-[receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L329-L333)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 317,
                  "endLine": 334
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3f8158d578aa560256d763e4a6f4e9510924b37bb950205851a441c0bf06c11"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "FraxConvexPositionHandler._convertUSDCIntoLpToken(uint256) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#342-356) performs a multiplication on the result of a division:\n\t-expectedLpOut = (_amount * NORMALIZATION_FACTOR) / fraxPool.get_virtual_price() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#349-350)\n\t-receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#352-355)\n",
            "markdown": "[FraxConvexPositionHandler._convertUSDCIntoLpToken(uint256)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L342-L356) performs a multiplication on the result of a division:\n\t-[expectedLpOut = (_amount * NORMALIZATION_FACTOR) / fraxPool.get_virtual_price()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L349-L350)\n\t-[receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L352-L355)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 342,
                  "endLine": 356
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "559d9cef6b77cc0eec6a2eee3eea17256c590bfafb4017e4fc5dda102a07618d"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "ConvexPositionHandler._convertLpTokenIntoUSDC(uint256) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#376-393) performs a multiplication on the result of a division:\n\t-expectedWantTokensOut = (_amount * fraxPool.get_virtual_price()) / NORMALIZATION_FACTOR (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#385-386)\n\t-receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n",
            "markdown": "[ConvexPositionHandler._convertLpTokenIntoUSDC(uint256)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L376-L393) performs a multiplication on the result of a division:\n\t-[expectedWantTokensOut = (_amount * fraxPool.get_virtual_price()) / NORMALIZATION_FACTOR](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L385-L386)\n\t-[receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 376,
                  "endLine": 393
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4f2c4fd7cda17be1e5de37fdd1abcef3faeafd609c23637827e1ac6ec29afa8"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "ConvexPositionHandler._convertUSDCIntoLpToken(uint256) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#401-415) performs a multiplication on the result of a division:\n\t-expectedLpOut = (_amount * NORMALIZATION_FACTOR) / fraxPool.get_virtual_price() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#408-409)\n\t-receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#411-414)\n",
            "markdown": "[ConvexPositionHandler._convertUSDCIntoLpToken(uint256)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L401-L415) performs a multiplication on the result of a division:\n\t-[expectedLpOut = (_amount * NORMALIZATION_FACTOR) / fraxPool.get_virtual_price()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L408-L409)\n\t-[receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L411-L414)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 401,
                  "endLine": 415
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f092051e05c8b1fb641852b54a8d0026baab4f6c9185e341cc10046ff8048428"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "ConvexPositionHandler._convertLpTokenIntoUSDC(uint256) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#379-401) performs a multiplication on the result of a division:\n\t-expectedWantTokensOut = (_amount * susdPool.get_virtual_price()) / NORMALIZATION_FACTOR (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#389-390)\n\t-susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n",
            "markdown": "[ConvexPositionHandler._convertLpTokenIntoUSDC(uint256)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L379-L401) performs a multiplication on the result of a division:\n\t-[expectedWantTokensOut = (_amount * susdPool.get_virtual_price()) / NORMALIZATION_FACTOR](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L389-L390)\n\t-[susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 401
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "013396200282510b2f8e2d424cd95b5511ea7a6d2802d5cf66fb1b629df9f7a4"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "ConvexPositionHandler._convertUSDCIntoLpToken(uint256) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#409-426) performs a multiplication on the result of a division:\n\t-expectedLpOut = (_amount * NORMALIZATION_FACTOR) / susdPool.get_virtual_price() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#417-418)\n\t-susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#420-423)\n",
            "markdown": "[ConvexPositionHandler._convertUSDCIntoLpToken(uint256)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L409-L426) performs a multiplication on the result of a division:\n\t-[expectedLpOut = (_amount * NORMALIZATION_FACTOR) / susdPool.get_virtual_price()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L417-L418)\n\t-[susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L420-L423)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 409,
                  "endLine": 426
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a3c9455388164ef2dd4ac592c38a28cf1b285fe0bb350f46b321542025a1c94"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Vault.withdraw(uint256,address) (contracts/Vault.sol#113-135) performs a multiplication on the result of a division:\n\t-amountOut = (sharesIn * totalVaultFunds()) / totalSupply() (contracts/Vault.sol#125)\n\t-fee = (amountOut * exitFee) / MAX_BPS (contracts/Vault.sol#130)\n",
            "markdown": "[Vault.withdraw(uint256,address)](contracts/Vault.sol#L113-L135) performs a multiplication on the result of a division:\n\t-[amountOut = (sharesIn * totalVaultFunds()) / totalSupply()](contracts/Vault.sol#L125)\n\t-[fee = (amountOut * exitFee) / MAX_BPS](contracts/Vault.sol#L130)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44f01e71b939162c2e6bf953d23f89bb329e0edaab0f640722fb71cf68b9e46b"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291) uses a dangerous strict equality:\n\t- assert(bool)(lpTokensReceived == lpTokensReportedByVault) (contracts/Batcher/Batcher.sol#270)\n",
            "markdown": "[Batcher.batchDeposit(address[])](contracts/Batcher/Batcher.sol#L234-L291) uses a dangerous strict equality:\n\t- [assert(bool)(lpTokensReceived == lpTokensReportedByVault)](contracts/Batcher/Batcher.sol#L270)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 291
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f662ca695cfff224ca8ce9adb271cbe0aa11085b1980c707f92b7f3f5c22ac66"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354) uses a dangerous strict equality:\n\t- assert(bool)(wantTokensReceived == wantTokensReportedByVault) (contracts/Batcher/Batcher.sol#333)\n",
            "markdown": "[Batcher.batchWithdraw(address[])](contracts/Batcher/Batcher.sol#L297-L354) uses a dangerous strict equality:\n\t- [assert(bool)(wantTokensReceived == wantTokensReportedByVault)](contracts/Batcher/Batcher.sol#L333)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fad91a221a5de3c0e297ef292630a663d49a044d5eab4d553a60d8ba173d6d5f"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121) uses a dangerous strict equality:\n\t- assert(bool)(wantBalanceAfterTransfer - wantBalanceBeforeTransfer == amountIn) (contracts/Batcher/Batcher.sol#104-106)\n",
            "markdown": "[Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams)](contracts/Batcher/Batcher.sol#L71-L121) uses a dangerous strict equality:\n\t- [assert(bool)(wantBalanceAfterTransfer - wantBalanceBeforeTransfer == amountIn)](contracts/Batcher/Batcher.sol#L104-L106)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd867ef8398dbd3469263a648bbb892322dcbe37a4faed054a04ab5592ee76a1"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "FraxConvexPositionHandler._lpTokenValueInUSDC(uint256) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#363-375) uses a dangerous strict equality:\n\t- _value == 0 (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#368)\n",
            "markdown": "[FraxConvexPositionHandler._lpTokenValueInUSDC(uint256)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L363-L375) uses a dangerous strict equality:\n\t- [_value == 0](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L368)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 363,
                  "endLine": 375
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e2ed557714be682e0af6bf7fa142017abcb464499ec73655d58c388f0820f15c"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "ConvexPositionHandler._lpTokenValueInUSDC(uint256) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#422-434) uses a dangerous strict equality:\n\t- _value == 0 (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#427)\n",
            "markdown": "[ConvexPositionHandler._lpTokenValueInUSDC(uint256)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L422-L434) uses a dangerous strict equality:\n\t- [_value == 0](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L427)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 422,
                  "endLine": 434
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f40cf5f5eff6e7786b7a08d8e22ca8c02bfc01101992d2455f070acfa6ef3d26"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "ConvexPositionHandler._lpTokenValueInUSDC(uint256) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#433-445) uses a dangerous strict equality:\n\t- _value == 0 (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#438)\n",
            "markdown": "[ConvexPositionHandler._lpTokenValueInUSDC(uint256)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L433-L445) uses a dangerous strict equality:\n\t- [_value == 0](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L438)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 433,
                  "endLine": 445
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bb57282d9da57e120224d6d4d9bfcbc40d001af503d2472dfab97954e8c0a1a"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) (contracts/Migration/Migratooor.sol#28-84) uses a dangerous strict equality:\n\t- require(bool,string)(newUserBalance - oldUserBalance == amountOut,USDC balance mismatch) (contracts/Migration/Migratooor.sol#56-59)\n",
            "markdown": "[Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes)](contracts/Migration/Migratooor.sol#L28-L84) uses a dangerous strict equality:\n\t- [require(bool,string)(newUserBalance - oldUserBalance == amountOut,USDC balance mismatch)](contracts/Migration/Migratooor.sol#L56-L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db4905a254d75c22c1421ad14621f0581e2ad0dfec3c4698fca39db58a64f388"
          }
        },
        {
          "ruleId": "1-0-incorrect-equality",
          "message": {
            "text": "Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) (contracts/Migration/Migratooor.sol#28-84) uses a dangerous strict equality:\n\t- require(bool,string)(newMigratorBalance - oldMigratorBalance == amountOut,No usdc received) (contracts/Migration/Migratooor.sol#68-71)\n",
            "markdown": "[Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes)](contracts/Migration/Migratooor.sol#L28-L84) uses a dangerous strict equality:\n\t- [require(bool,string)(newMigratorBalance - oldMigratorBalance == amountOut,No usdc received)](contracts/Migration/Migratooor.sol#L68-L71)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7da67e8b1ba24535d28335bbe37d36643de005b1ec7bc08f60fd0189476472d4"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in PerpPositionHandlerL2.closePosition(uint24) (contracts/PerpL2/PerpPositionHandlerL2.sol#175-180):\n\tExternal calls:\n\t- _closePosition(slippage) (contracts/PerpL2/PerpPositionHandlerL2.sol#177)\n\t\t- clearingHouse.closePosition(params) (contracts/PerpL2/PerpV2Controller.sol#151)\n\tState variables written after the call(s):\n\t- perpPosition.isActive = false (contracts/PerpL2/PerpPositionHandlerL2.sol#178)\n",
            "markdown": "Reentrancy in [PerpPositionHandlerL2.closePosition(uint24)](contracts/PerpL2/PerpPositionHandlerL2.sol#L175-L180):\n\tExternal calls:\n\t- [_closePosition(slippage)](contracts/PerpL2/PerpPositionHandlerL2.sol#L177)\n\t\t- [clearingHouse.closePosition(params)](contracts/PerpL2/PerpV2Controller.sol#L151)\n\tState variables written after the call(s):\n\t- [perpPosition.isActive = false](contracts/PerpL2/PerpPositionHandlerL2.sol#L178)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4487d212ed0779501e20cee6cabc4aa90fb88ebda27b95bcb109f100fbd7a09"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in PerpPositionHandlerL2.openPosition(bool,uint256,uint24) (contracts/PerpL2/PerpPositionHandlerL2.sol#154-170):\n\tExternal calls:\n\t- _depositToPerp(wantTokenBalance) (contracts/PerpL2/PerpPositionHandlerL2.sol#161)\n\t\t- token.approve(address(perpVault),_value) (contracts/PerpL2/PerpV2Controller.sol#162)\n\t\t- perpVault.deposit(settlementToken,_value) (contracts/PerpL2/PerpV2Controller.sol#68)\n\tState variables written after the call(s):\n\t- perpPosition = PerpPosition(formatSqrtPriceX96(getMarkTwapPrice()),getIndexTwapPrice(),amountIn,isShort,true) (contracts/PerpL2/PerpPositionHandlerL2.sol#162-168)\n",
            "markdown": "Reentrancy in [PerpPositionHandlerL2.openPosition(bool,uint256,uint24)](contracts/PerpL2/PerpPositionHandlerL2.sol#L154-L170):\n\tExternal calls:\n\t- [_depositToPerp(wantTokenBalance)](contracts/PerpL2/PerpPositionHandlerL2.sol#L161)\n\t\t- [token.approve(address(perpVault),_value)](contracts/PerpL2/PerpV2Controller.sol#L162)\n\t\t- [perpVault.deposit(settlementToken,_value)](contracts/PerpL2/PerpV2Controller.sol#L68)\n\tState variables written after the call(s):\n\t- [perpPosition = PerpPosition(formatSqrtPriceX96(getMarkTwapPrice()),getIndexTwapPrice(),amountIn,isShort,true)](contracts/PerpL2/PerpPositionHandlerL2.sol#L162-L168)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 170
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35024be027be247bd1038cbfe12a51f16eb0e9bac04a3a61405f65ae016b8d23"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#275-328):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#276)\n\t- harvester.harvest() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#296)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#312-315)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#318)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n\tState variables written after the call(s):\n\t- prevSharePrice = currentSharePrice (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#320)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L275-L328):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L276)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L296)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L312-L315)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L318)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n\tState variables written after the call(s):\n\t- [prevSharePrice = currentSharePrice](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L320)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 328
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a77558b1423c573f69e556c89fd3242a3da03a273ce0d421a9ee2bed547a633d"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#278-331):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#279)\n\t- harvester.harvest() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#299)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#315-318)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#321)\n\t\t- susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n\tState variables written after the call(s):\n\t- prevSharePrice = currentSharePrice (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#323)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L278-L331):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L279)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L299)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L315-L318)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L321)\n\t\t- [susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n\tState variables written after the call(s):\n\t- [prevSharePrice = currentSharePrice](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L323)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a7022b43dffe02474fb47d6680fc9e7c708c4e48dc041ddf3f5d3fbd9d3c480a"
          }
        },
        {
          "ruleId": "1-1-reentrancy-no-eth",
          "message": {
            "text": "Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):\n\tExternal calls:\n\t- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)\n\tState variables written after the call(s):\n\t- userLPTokens[msg.sender] = 0 (contracts/Batcher/Batcher.sol#142)\n",
            "markdown": "Reentrancy in [Batcher.initiateWithdrawal(uint256)](contracts/Batcher/Batcher.sol#L127-L152):\n\tExternal calls:\n\t- [IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender])](contracts/Batcher/Batcher.sol#L137-L141)\n\tState variables written after the call(s):\n\t- [userLPTokens[msg.sender] = 0](contracts/Batcher/Batcher.sol#L142)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a32ba42a531227b6e639c5de5b1f131a51b06da368c80485be07a7f011ae705"
          }
        },
        {
          "ruleId": "1-1-uninitialized-local",
          "message": {
            "text": "Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).fundingGrowthRangeInfo (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#86) is a local variable never initialized\n",
            "markdown": "[Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).fundingGrowthRangeInfo](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L86) is a local variable never initialized\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/Tick.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ce3bb80a03f3d57adfdcd05487b43e7a72267948b55d2c695355e14702c8cdb6"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "PerpV2Controller._openPositionByAmount(bool,uint256,uint24) (contracts/PerpL2/PerpV2Controller.sol#85-123) ignores return value by clearingHouse.openPosition(params) (contracts/PerpL2/PerpV2Controller.sol#117)\n",
            "markdown": "[PerpV2Controller._openPositionByAmount(bool,uint256,uint24)](contracts/PerpL2/PerpV2Controller.sol#L85-L123) ignores return value by [clearingHouse.openPosition(params)](contracts/PerpL2/PerpV2Controller.sol#L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 123
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85a1a7b20c935e7cc269f84c03c4f5ce0aaf1cb2d976d6e3591a66a2df3051d8"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "PerpV2Controller._closePosition(uint256) (contracts/PerpL2/PerpV2Controller.sol#127-152) ignores return value by clearingHouse.closePosition(params) (contracts/PerpL2/PerpV2Controller.sol#151)\n",
            "markdown": "[PerpV2Controller._closePosition(uint256)](contracts/PerpL2/PerpV2Controller.sol#L127-L152) ignores return value by [clearingHouse.closePosition(params)](contracts/PerpL2/PerpV2Controller.sol#L151)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "973cbb72a0694828484abe8d6a13d1de78f0887c3a8c9e94ae4e98c83d07e347"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "PerpV2Controller.approveQuoteToken(IERC20,uint256) (contracts/PerpL2/PerpV2Controller.sol#161-163) ignores return value by token.approve(address(perpVault),_value) (contracts/PerpL2/PerpV2Controller.sol#162)\n",
            "markdown": "[PerpV2Controller.approveQuoteToken(IERC20,uint256)](contracts/PerpL2/PerpV2Controller.sol#L161-L163) ignores return value by [token.approve(address(perpVault),_value)](contracts/PerpL2/PerpV2Controller.sol#L162)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 163
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51339312cfab1476d739890cac08a9c455e6502d27598b89666509beb66bf35c"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes) (contracts/PerpL2/SocketV1Controller.sol#70-88) ignores return value by IERC20(token).approve(allowanceTarget,amount) (contracts/PerpL2/SocketV1Controller.sol#85)\n",
            "markdown": "[SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes)](contracts/PerpL2/SocketV1Controller.sol#L70-L88) ignores return value by [IERC20(token).approve(allowanceTarget,amount)](contracts/PerpL2/SocketV1Controller.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb8170cdef6b93e27705425b651f206324b3ec5b54d4cd7728c25c263ec16e19"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "BaseTradeExecutor.constructor(address) (contracts/BaseTradeExecutor.sol#17-20) ignores return value by IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n",
            "markdown": "[BaseTradeExecutor.constructor(address)](contracts/BaseTradeExecutor.sol#L17-L20) ignores return value by [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f51135edf610e8b7731a4023d5799928f48547250ff602b192e6546f732a87d"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Batcher.constructor(address,address,uint256) (contracts/Batcher/Batcher.sol#28-44) ignores return value by IERC20(vaultInfo.tokenAddress).approve(vaultAddress,type()(uint256).max) (contracts/Batcher/Batcher.sol#43)\n",
            "markdown": "[Batcher.constructor(address,address,uint256)](contracts/Batcher/Batcher.sol#L28-L44) ignores return value by [IERC20(vaultInfo.tokenAddress).approve(vaultAddress,type()(uint256).max)](contracts/Batcher/Batcher.sol#L43)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0abea66199e3203310021d383170b7d1566c92b39e7b11ec6e9b06f634669745"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FraxConvexPositionHandler.constructor() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#91-104) ignores return value by lpToken.approve(address(_stakingVault),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#101)\n",
            "markdown": "[FraxConvexPositionHandler.constructor()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L91-L104) ignores return value by [lpToken.approve(address(_stakingVault),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d8f71e75dfff5afae6b71f1ed0ab3b86420f9ef59e37aea7c370e30a08e1257"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FraxConvexPositionHandler.constructor() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#91-104) ignores return value by lpToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#103)\n",
            "markdown": "[FraxConvexPositionHandler.constructor()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L91-L104) ignores return value by [lpToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L103)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba1f91a1c6427bfbeaf5af5b8e4f9a97697c553c3c1e224af85d4e72e3516b4d"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FraxConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#109-115) ignores return value by wantToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#114)\n",
            "markdown": "[FraxConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L109-L115) ignores return value by [wantToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L114)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0960b312c05cb8a80f35abc16c5a236ee0ff556c0c8fd00baa1935d6c0b00198"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FraxConvexPositionHandler._openPosition(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#186-208) ignores return value by convexVault.stakeLockedCurveLp(openPositionParams._amount,stakingPeriodSecs) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#199-202)\n",
            "markdown": "[FraxConvexPositionHandler._openPosition(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L186-L208) ignores return value by [convexVault.stakeLockedCurveLp(openPositionParams._amount,stakingPeriodSecs)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L199-L202)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 208
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6809aa662f34941bae905571ba210c14a2c775e1512487b2b2a24a76abe49e3"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "FraxConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#238-267) ignores return value by harvester.harvest() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#259)\n",
            "markdown": "[FraxConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L238-L267) ignores return value by [harvester.harvest()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L259)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "72deda4383016e5807082061a8ee951d77e0e211b96fa68074ca3c9780b8c874"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#87-102) ignores return value by lpToken.approve(address(convexBooster),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#95)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L87-L102) ignores return value by [lpToken.approve(address(convexBooster),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f416c9304e50fe50d0f6ca5757705337cdea3d20749d1d9d0ff429c34d72cbfd"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#87-102) ignores return value by wantToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#98)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L87-L102) ignores return value by [wantToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L98)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a02cc792f52bb65fdd012a553374c9d4e517c74419a72a594a450f4d48850ca0"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#87-102) ignores return value by lpToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#101)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L87-L102) ignores return value by [lpToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "399a140be8d5b7eb1547af96c1bf06ac1b4091c892fbd946546fbaf407d672e3"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._closePosition(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#243-262) ignores return value by baseRewardPool.withdrawAndUnwrap(closePositionParams._amount,true) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#257)\n",
            "markdown": "[ConvexPositionHandler._closePosition(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L243-L262) ignores return value by [baseRewardPool.withdrawAndUnwrap(closePositionParams._amount,true)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L257)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 262
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9551bdcdc0a8c38fa7d21d744a63ed88f3dc8544b7b22b8d2637817d8d084d4a"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#275-328) ignores return value by harvester.harvest() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#296)\n",
            "markdown": "[ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L275-L328) ignores return value by [harvester.harvest()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L296)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 328
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90127951779b9226076ff691470eeb4d44990893fe9618c543bdbe617bb255b5"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#275-328) ignores return value by baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#312-315)\n",
            "markdown": "[ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L275-L328) ignores return value by [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L312-L315)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 328
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "04f9e05caf1f64721210b92edd1a3db3e33d4387b90fb5ae52be6a0c6125b577"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by crv.approve(address(crveth),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#117)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [crv.approve(address(crveth),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e96804ff48710ba017ea00189c25904e0a01932b40c012a256a0a7a5823ffd7"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by cvx.approve(address(cvxeth),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#119)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [cvx.approve(address(cvxeth),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L119)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c3ec5f1a618be7167703455647064c5195c9480847e9e3a4f378495062d7b9f"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by _3crv.approve(address(_3crvPool),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#121)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [_3crv.approve(address(_3crvPool),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ee97882dc2dc50c0d4ea4747e922945082a77eda71f1f135f83bf2cbc77aa20c"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by weth.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#123)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [weth.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52e86b9a75f162c5addfcdd96571680d49f696efa29930d28066cb6a2bde8161"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by snx.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#125)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [snx.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L125)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "849798fee4ba646262ae4e053312033cfa7315b1d167fe9ac254b0395636f0bf"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135) ignores return value by fxs.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#127)\n",
            "markdown": "[Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135) ignores return value by [fxs.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L127)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b32080e25a56a5a3f87d438862d9ce9d4e363218d88ab718a0bc6d2690486be"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester._swapToWantOnUniV3(address,uint256,uint256,IAggregatorV3) (contracts/ConvexExecutor/Harvester.sol#260-283) ignores return value by uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut))) (contracts/ConvexExecutor/Harvester.sol#270-282)\n",
            "markdown": "[Harvester._swapToWantOnUniV3(address,uint256,uint256,IAggregatorV3)](contracts/ConvexExecutor/Harvester.sol#L260-L283) ignores return value by [uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut)))](contracts/ConvexExecutor/Harvester.sol#L270-L282)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 283
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d852203f5fa4f2626d0ed136d3c358fb00549cbdb4b0cfd95e3e320759154494"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Harvester._swapToWantOnUniV2(address[],uint256,IAggregatorV3) (contracts/ConvexExecutor/Harvester.sol#289-305) ignores return value by uniswapRouterV2.swapExactTokensForTokens(amount,expectedOut,path,address(this),block.timestamp) (contracts/ConvexExecutor/Harvester.sol#298-304)\n",
            "markdown": "[Harvester._swapToWantOnUniV2(address[],uint256,IAggregatorV3)](contracts/ConvexExecutor/Harvester.sol#L289-L305) ignores return value by [uniswapRouterV2.swapExactTokensForTokens(amount,expectedOut,path,address(this),block.timestamp)](contracts/ConvexExecutor/Harvester.sol#L298-L304)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 289,
                  "endLine": 305
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "308d15d8558d2a004375ced4bdbf7897f4571fc28eff7a194358225a4ae97582"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#92-105) ignores return value by lpToken.approve(address(convexBooster),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#100)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L92-L105) ignores return value by [lpToken.approve(address(convexBooster),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L100)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "87297060111add930c7610c418eae1ba976f36aeb74d9e831239a936f42fe811"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#92-105) ignores return value by wantToken.approve(address(susdPool),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#102)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L92-L105) ignores return value by [wantToken.approve(address(susdPool),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L102)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23b9ba6934448c590bb4e4dbf609fbb9626815fd4224f663a7d07d9d4572b65c"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._configHandler(address,address) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#92-105) ignores return value by lpToken.approve(address(susdDeposit),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#104)\n",
            "markdown": "[ConvexPositionHandler._configHandler(address,address)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L92-L105) ignores return value by [lpToken.approve(address(susdDeposit),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddfe39f4c00941fa369e290dc25d05e9323d8dcc9a51e4936f5294ec8be0a28b"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._closePosition(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#246-265) ignores return value by baseRewardPool.withdrawAndUnwrap(closePositionParams._amount,true) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#260)\n",
            "markdown": "[ConvexPositionHandler._closePosition(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L246-L265) ignores return value by [baseRewardPool.withdrawAndUnwrap(closePositionParams._amount,true)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L260)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 246,
                  "endLine": 265
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b64b9162022bb2dcc7b536f65db8d49ea8e2ce0f89fd6fe9c8c67b5af30e5bb9"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#278-331) ignores return value by harvester.harvest() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#299)\n",
            "markdown": "[ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L278-L331) ignores return value by [harvester.harvest()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L299)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5ccdfed03e2bb720dca53f4a3922570728545bf7b8a5893cd5094a7f85a51e90"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#278-331) ignores return value by baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#315-318)\n",
            "markdown": "[ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L278-L331) ignores return value by [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L315-L318)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42bf408855f6584550816ea2206e9c8da76a2f1d63da94c7f8a46fb5b70fdbfe"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) (contracts/Migration/Migratooor.sol#28-84) ignores return value by usdc.approve(address(newBatcher),amountOut) (contracts/Migration/Migratooor.sol#82)\n",
            "markdown": "[Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes)](contracts/Migration/Migratooor.sol#L28-L84) ignores return value by [usdc.approve(address(newBatcher),amountOut)](contracts/Migration/Migratooor.sol#L82)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "98f827378d1c20e7195c7a7dbc46da6f69d70c6de4f30b4b9cb4f6a44ae90c88"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes) (contracts/PerpHandler/SocketV1Controller.sol#87-105) ignores return value by IERC20(token).approve(allowanceTarget,amount) (contracts/PerpHandler/SocketV1Controller.sol#102)\n",
            "markdown": "[SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes)](contracts/PerpHandler/SocketV1Controller.sol#L87-L105) ignores return value by [IERC20(token).approve(allowanceTarget,amount)](contracts/PerpHandler/SocketV1Controller.sol#L102)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b123cea29fc186335137364a833f34e94b976f194b8572789c31c79b3757f655"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ERC20Permit.constructor(string).name (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#44) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64) (function)\n\t- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)\n",
            "markdown": "[ERC20Permit.constructor(string).name](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L44) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L62-L64) (function)\n\t- [IERC20Metadata.name()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L17) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f85c0fac855acf8d2d6992ee89e0b0ee24104b934a28808f04d68e95041b471"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.allowance(address,address).owner (contracts/Migration/interfaces/IUSDC.sol#57) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.allowance(address,address).owner](contracts/Migration/interfaces/IUSDC.sol#L57) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4975db190038464ef05897e159148741911e1e8eb02978dbeeaf85dea95e3bc8"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner (contracts/Migration/interfaces/IUSDC.sol#65) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner](contracts/Migration/interfaces/IUSDC.sol#L65) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "110069b60b22f24fe60469260231f885d92937063a53a6681a56137a914bfa0c"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner (contracts/Migration/interfaces/IUSDC.sol#110) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner](contracts/Migration/interfaces/IUSDC.sol#L110) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 110,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e606764260c91c552d0f8a3cfa14f5af2eb68fbf7188956565f9fb76ab0f4157"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner (contracts/Migration/interfaces/IUSDC.sol#126) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32).owner](contracts/Migration/interfaces/IUSDC.sol#L126) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd26714c8acc0b43b65d9a026ba3b6bdede2511c7dceefc4598cee368c5a512f"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.nonces(address).owner (contracts/Migration/interfaces/IUSDC.sol#162) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.nonces(address).owner](contracts/Migration/interfaces/IUSDC.sol#L162) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a742dfd71a5c465e800024d8d52a18d457705756466169f890976eb9f3c20715"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IUSDC.permit(address,address,uint256,uint256,uint8,bytes32,bytes32).owner (contracts/Migration/interfaces/IUSDC.sol#173) shadows:\n\t- IUSDC.owner() (contracts/Migration/interfaces/IUSDC.sol#164) (function)\n",
            "markdown": "[IUSDC.permit(address,address,uint256,uint256,uint8,bytes32,bytes32).owner](contracts/Migration/interfaces/IUSDC.sol#L173) shadows:\n\t- [IUSDC.owner()](contracts/Migration/interfaces/IUSDC.sol#L164) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f39e38724e616b368f2cea48b3dd4c81e2e07b447dcf9b51c0767b5698e4e006"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "PerpTradeExecutor.constructor(address,address,address,address,address).vault (contracts/PerpHandler/PerpTradeExecutor.sol#19) shadows:\n\t- BaseTradeExecutor.vault (contracts/BaseTradeExecutor.sol#15) (state variable)\n\t- ITradeExecutor.vault() (interfaces/ITradeExecutor.sol#10) (function)\n",
            "markdown": "[PerpTradeExecutor.constructor(address,address,address,address,address).vault](contracts/PerpHandler/PerpTradeExecutor.sol#L19) shadows:\n\t- [BaseTradeExecutor.vault](contracts/BaseTradeExecutor.sol#L15) (state variable)\n\t- [ITradeExecutor.vault()](interfaces/ITradeExecutor.sol#L10) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86e4d051a1b73238e136d675551553c0db68eddfe8ee84d7df3ca78deb560646"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "Vault.constructor(string,string,address,address,address)._name (contracts/Vault.sol#66) shadows:\n\t- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)\n",
            "markdown": "[Vault.constructor(string,string,address,address,address)._name](contracts/Vault.sol#L66) shadows:\n\t- [ERC20._name](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L42) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aa989eff1c736471c18125535662d89cd344c7844af9125e0164167360545d06"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "Vault.constructor(string,string,address,address,address)._symbol (contracts/Vault.sol#67) shadows:\n\t- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)\n",
            "markdown": "[Vault.constructor(string,string,address,address,address)._symbol](contracts/Vault.sol#L67) shadows:\n\t- [ERC20._symbol](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L43) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42d38faeb17907d3a7cd24b7d963d4ad030c55c4a7e9263ac4a2434641903975"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "WantERC20.constructor(string,string,uint8).name (contracts/mocks/WantERC20.sol#24) shadows:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64) (function)\n\t- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)\n",
            "markdown": "[WantERC20.constructor(string,string,uint8).name](contracts/mocks/WantERC20.sol#L24) shadows:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L62-L64) (function)\n\t- [IERC20Metadata.name()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L17) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/WantERC20.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd470eeb645fbb7378c81c6130ba60fd10e0f60067d321f854f241c02b5d916a"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "WantERC20.constructor(string,string,uint8).symbol (contracts/mocks/WantERC20.sol#25) shadows:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#70-72) (function)\n\t- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#22) (function)\n",
            "markdown": "[WantERC20.constructor(string,string,uint8).symbol](contracts/mocks/WantERC20.sol#L25) shadows:\n\t- [ERC20.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L70-L72) (function)\n\t- [IERC20Metadata.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L22) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/WantERC20.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "affca9beb0fca4089926f7cb9611ef924c40dbfaa1ee356d2d4645ed39b74ca8"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#84) lacks a zero-check on :\n\t\t- wantTokenL1 = _wantTokenL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#98)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L84) lacks a zero-check on :\n\t\t- [wantTokenL1 = _wantTokenL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L98)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06db27bd854e3c91e4866230d696963d908825e448864a58057f5250d29bba7a"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL2 (contracts/PerpL2/PerpPositionHandlerL2.sol#85) lacks a zero-check on :\n\t\t- wantTokenL2 = _wantTokenL2 (contracts/PerpL2/PerpPositionHandlerL2.sol#99)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL2](contracts/PerpL2/PerpPositionHandlerL2.sol#L85) lacks a zero-check on :\n\t\t- [wantTokenL2 = _wantTokenL2](contracts/PerpL2/PerpPositionHandlerL2.sol#L99)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c289fa4922a30d5aa535a9c8308b775567a543f07ac78b1a2bbd0fdc4631d14"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._positionHandlerL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#86) lacks a zero-check on :\n\t\t- positionHandlerL1 = _positionHandlerL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#100)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._positionHandlerL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L86) lacks a zero-check on :\n\t\t- [positionHandlerL1 = _positionHandlerL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L100)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2f5107a3346444c2946366e73467bb01e2bf18dd8f4d9a7a6e3afd7f51e1ce9"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._keeper (contracts/PerpL2/PerpPositionHandlerL2.sol#94) lacks a zero-check on :\n\t\t- keeper = _keeper (contracts/PerpL2/PerpPositionHandlerL2.sol#108)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._keeper](contracts/PerpL2/PerpPositionHandlerL2.sol#L94) lacks a zero-check on :\n\t\t- [keeper = _keeper](contracts/PerpL2/PerpPositionHandlerL2.sol#L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 94
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2b9dc04a6ff4da8fcc5ff6e6b0670716833c204c5ec20cec9ab4cb9050b3460"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._governance (contracts/PerpL2/PerpPositionHandlerL2.sol#95) lacks a zero-check on :\n\t\t- governance = _governance (contracts/PerpL2/PerpPositionHandlerL2.sol#109)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._governance](contracts/PerpL2/PerpPositionHandlerL2.sol#L95) lacks a zero-check on :\n\t\t- [governance = _governance](contracts/PerpL2/PerpPositionHandlerL2.sol#L109)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "902cbf501af6beae35286d978cf144f2d05d8d99fc529bdf9ffcc36f0a36af50"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#96) lacks a zero-check on :\n\t\t- socketRegistry = _socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#110)\n",
            "markdown": "[PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L96) lacks a zero-check on :\n\t\t- [socketRegistry = _socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L110)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f6d5750018aa33a3ff18c1fad465fd586042f559ee05e8496042d1ccc3cee13a"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.setSocketRegistry(address)._socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#204) lacks a zero-check on :\n\t\t- socketRegistry = _socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#206)\n",
            "markdown": "[PerpPositionHandlerL2.setSocketRegistry(address)._socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L204) lacks a zero-check on :\n\t\t- [socketRegistry = _socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L206)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3a4c54956ad594cb5e94d555a2d70e212f0e6b4f5ad0014f1ac6e019f57066f"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.setKeeper(address)._keeper (contracts/PerpL2/PerpPositionHandlerL2.sol#211) lacks a zero-check on :\n\t\t- keeper = _keeper (contracts/PerpL2/PerpPositionHandlerL2.sol#213)\n",
            "markdown": "[PerpPositionHandlerL2.setKeeper(address)._keeper](contracts/PerpL2/PerpPositionHandlerL2.sol#L211) lacks a zero-check on :\n\t\t- [keeper = _keeper](contracts/PerpL2/PerpPositionHandlerL2.sol#L213)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ae0c2cff4c14e26a37400b3dc772de06b6a13086cb0e61a9a0753a02c0951dc"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpPositionHandlerL2.setGovernance(address)._newGovernance (contracts/PerpL2/PerpPositionHandlerL2.sol#218) lacks a zero-check on :\n\t\t- pendingGovernance = _newGovernance (contracts/PerpL2/PerpPositionHandlerL2.sol#219)\n",
            "markdown": "[PerpPositionHandlerL2.setGovernance(address)._newGovernance](contracts/PerpL2/PerpPositionHandlerL2.sol#L218) lacks a zero-check on :\n\t\t- [pendingGovernance = _newGovernance](contracts/PerpL2/PerpPositionHandlerL2.sol#L219)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "40fbc27b0297ad9c77097ec80fd5f53b029085eacc6039e7fe7b89190181a10b"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Batcher.constructor(address,address,uint256)._verificationAuthority (contracts/Batcher/Batcher.sol#29) lacks a zero-check on :\n\t\t- verificationAuthority = _verificationAuthority (contracts/Batcher/Batcher.sol#33)\n",
            "markdown": "[Batcher.constructor(address,address,uint256)._verificationAuthority](contracts/Batcher/Batcher.sol#L29) lacks a zero-check on :\n\t\t- [verificationAuthority = _verificationAuthority](contracts/Batcher/Batcher.sol#L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "840970fad5abfeb8e5eb07175fc906025c35bb1d5368279453f0528a1afa5b45"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Batcher.setAuthority(address).authority (contracts/Batcher/Batcher.sol#386) lacks a zero-check on :\n\t\t- verificationAuthority = authority (contracts/Batcher/Batcher.sol#391)\n",
            "markdown": "[Batcher.setAuthority(address).authority](contracts/Batcher/Batcher.sol#L386) lacks a zero-check on :\n\t\t- [verificationAuthority = authority](contracts/Batcher/Batcher.sol#L391)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 386
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "342a935a0af8ab41f6bc569baf4fe673c39e1214afe7127f554e39374b8776b3"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "PerpTradeExecutor.setSocketRegistry(address)._socketRegistry (contracts/PerpHandler/PerpTradeExecutor.sol#66) lacks a zero-check on :\n\t\t- socketRegistry = _socketRegistry (contracts/PerpHandler/PerpTradeExecutor.sol#67)\n",
            "markdown": "[PerpTradeExecutor.setSocketRegistry(address)._socketRegistry](contracts/PerpHandler/PerpTradeExecutor.sol#L66) lacks a zero-check on :\n\t\t- [socketRegistry = _socketRegistry](contracts/PerpHandler/PerpTradeExecutor.sol#L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b89a810cbef881378a1a7a36b7aacf3eb6358c10e7a548717c78c5e1fbda74d2"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.constructor(string,string,address,address,address)._wantToken (contracts/Vault.sol#68) lacks a zero-check on :\n\t\t- wantToken = _wantToken (contracts/Vault.sol#73)\n",
            "markdown": "[Vault.constructor(string,string,address,address,address)._wantToken](contracts/Vault.sol#L68) lacks a zero-check on :\n\t\t- [wantToken = _wantToken](contracts/Vault.sol#L73)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7bf00622f08f75a215d9547d1f9d4ce569357dbcd40b8b46219cfd941e9ebf07"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.constructor(string,string,address,address,address)._keeper (contracts/Vault.sol#69) lacks a zero-check on :\n\t\t- keeper = _keeper (contracts/Vault.sol#74)\n",
            "markdown": "[Vault.constructor(string,string,address,address,address)._keeper](contracts/Vault.sol#L69) lacks a zero-check on :\n\t\t- [keeper = _keeper](contracts/Vault.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6f6693edfb3338fa9079f8f71531395f9596d4ff9bd5acffba1cd9bf319b5bd"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.constructor(string,string,address,address,address)._governance (contracts/Vault.sol#70) lacks a zero-check on :\n\t\t- governance = _governance (contracts/Vault.sol#75)\n",
            "markdown": "[Vault.constructor(string,string,address,address,address)._governance](contracts/Vault.sol#L70) lacks a zero-check on :\n\t\t- [governance = _governance](contracts/Vault.sol#L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fe89e445f3d7e55934073244996f1eb62b62cd45431cf2761c5cc54fad90405"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.setBatcher(address)._batcher (contracts/Vault.sol#377) lacks a zero-check on :\n\t\t- batcher = _batcher (contracts/Vault.sol#380)\n",
            "markdown": "[Vault.setBatcher(address)._batcher](contracts/Vault.sol#L377) lacks a zero-check on :\n\t\t- [batcher = _batcher](contracts/Vault.sol#L380)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5ddd57e5dcf9c62dcce52cfcc5ae6b93639830bd88b19221463a6e8196882a18"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.setGovernance(address)._governance (contracts/Vault.sol#399) lacks a zero-check on :\n\t\t- pendingGovernance = _governance (contracts/Vault.sol#401)\n",
            "markdown": "[Vault.setGovernance(address)._governance](contracts/Vault.sol#L399) lacks a zero-check on :\n\t\t- [pendingGovernance = _governance](contracts/Vault.sol#L401)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 399
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3aec0c91d7cf7a3ee288288169275d8fd35cca1e77a0a0b634139b1c6429f7d8"
          }
        },
        {
          "ruleId": "2-1-missing-zero-check",
          "message": {
            "text": "Vault.setKeeper(address)._keeper (contracts/Vault.sol#428) lacks a zero-check on :\n\t\t- keeper = _keeper (contracts/Vault.sol#431)\n",
            "markdown": "[Vault.setKeeper(address)._keeper](contracts/Vault.sol#L428) lacks a zero-check on :\n\t\t- [keeper = _keeper](contracts/Vault.sol#L431)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a51dc09f23422d0bc778dbd55c16722cebb9a8c278865bedcadedf317b19a8bc"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Vault.totalExecutorFunds() (contracts/Vault.sol#349-360) has external calls inside a loop: (executorFunds,blockUpdated) = ITradeExecutor(executor).totalFunds() (contracts/Vault.sol#353-355)\n",
            "markdown": "[Vault.totalExecutorFunds()](contracts/Vault.sol#L349-L360) has external calls inside a loop: [(executorFunds,blockUpdated) = ITradeExecutor(executor).totalFunds()](contracts/Vault.sol#L353-L355)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 349,
                  "endLine": 360
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c114c838842b684d57c907bada89d0cc02b30ffdd4add4f1aa02826fd0ba550"
          }
        },
        {
          "ruleId": "2-0-variable-scope",
          "message": {
            "text": "Variable 'ECDSA.tryRecover(bytes32,bytes).r (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#62)' in ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#57-86) potentially used before declaration: r = mload(uint256)(signature + 0x20) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#79)\n",
            "markdown": "Variable '[ECDSA.tryRecover(bytes32,bytes).r](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L62)' in [ECDSA.tryRecover(bytes32,bytes)](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L57-L86) potentially used before declaration: [r = mload(uint256)(signature + 0x20)](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10fadebc9594768c367651e13ad77e5290f5cff538571cfb418e4bf294f418e8"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#238-267):\n\tExternal calls:\n\t- convexVault.getReward() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#239)\n\t- harvester.harvest() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#259)\n\tState variables written after the call(s):\n\t- latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#261-263)\n\t- totalCummulativeRewards += latestHarvestedRewards (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#264)\n",
            "markdown": "Reentrancy in [FraxConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L238-L267):\n\tExternal calls:\n\t- [convexVault.getReward()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L239)\n\t- [harvester.harvest()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L259)\n\tState variables written after the call(s):\n\t- [latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L261-L263)\n\t- [totalCummulativeRewards += latestHarvestedRewards](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L264)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51127a3ebfc37c9463cc15c88e65c6b902693c12c2389b1ea859c9bc7d6a6b6e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#275-328):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#276)\n\t- harvester.harvest() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#296)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#312-315)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#318)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n\tState variables written after the call(s):\n\t- latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#322-324)\n\t- totalCummulativeRewards += latestHarvestedRewards (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#325)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L275-L328):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L276)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L296)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L312-L315)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L318)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n\tState variables written after the call(s):\n\t- [latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L322-L324)\n\t- [totalCummulativeRewards += latestHarvestedRewards](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L325)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 328
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "824baed997ef29ee95abb886277c808abf7fe1382d4e2c3c2e6aa450c4e93994"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#278-331):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#279)\n\t- harvester.harvest() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#299)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#315-318)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#321)\n\t\t- susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n\tState variables written after the call(s):\n\t- latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#325-327)\n\t- totalCummulativeRewards += latestHarvestedRewards (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#328)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L278-L331):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L279)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L299)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L315-L318)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L321)\n\t\t- [susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n\tState variables written after the call(s):\n\t- [latestHarvestedRewards = wantToken.balanceOf(address(this)) - initialUSDCBalance](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L325-L327)\n\t- [totalCummulativeRewards += latestHarvestedRewards](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L328)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a63f3cb0f2339077859e0e3942bc58906f35a1ddd5b7971162d0730f502d1145"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexFraxPoolTradeExecutor._initateDeposit(bytes) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#107-110):\n\tExternal calls:\n\t- FraxConvexPositionHandler._deposit(_data) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#108)\n\t\t- receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#352-355)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmDeposit() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#109)\n\t\t- depositStatus.inProcess = false (contracts/BaseTradeExecutor.sol#69)\n",
            "markdown": "Reentrancy in [FraxConvexFraxPoolTradeExecutor._initateDeposit(bytes)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L107-L110):\n\tExternal calls:\n\t- [FraxConvexPositionHandler._deposit(_data)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L108)\n\t\t- [receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L352-L355)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmDeposit()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L109)\n\t\t- [depositStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 110
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad06082089bef1b857c001df146aa54430a6cc4d48edd875eaab7f203d7addd7"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexFraxPoolTradeExecutor._initateDeposit(bytes) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#87-90):\n\tExternal calls:\n\t- ConvexPositionHandler._deposit(_data) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#88)\n\t\t- receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#411-414)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmDeposit() (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#89)\n\t\t- depositStatus.inProcess = false (contracts/BaseTradeExecutor.sol#69)\n",
            "markdown": "Reentrancy in [ConvexFraxPoolTradeExecutor._initateDeposit(bytes)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L87-L90):\n\tExternal calls:\n\t- [ConvexPositionHandler._deposit(_data)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L88)\n\t\t- [receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L411-L414)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmDeposit()](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L89)\n\t\t- [depositStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8fb7c65c038c0323fd68732423dca8a179c7681a8779b450af6d7ef045120392"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexSUSDPoolTradeExecutor._initateDeposit(bytes) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#84-87):\n\tExternal calls:\n\t- ConvexPositionHandler._deposit(_data) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#85)\n\t\t- susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#420-423)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmDeposit() (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#86)\n\t\t- depositStatus.inProcess = false (contracts/BaseTradeExecutor.sol#69)\n",
            "markdown": "Reentrancy in [ConvexSUSDPoolTradeExecutor._initateDeposit(bytes)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L84-L87):\n\tExternal calls:\n\t- [ConvexPositionHandler._deposit(_data)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L85)\n\t\t- [susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L420-L423)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmDeposit()](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L86)\n\t\t- [depositStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f96226ef5a3b94ead50b7542408b3cbe5229597fd4a4a71e4525b2a9f8fcdd1"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexFraxPoolTradeExecutor._initiateWithdraw(bytes) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#115-118):\n\tExternal calls:\n\t- FraxConvexPositionHandler._withdraw(_data) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#116)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#329-333)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmWithdraw() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#117)\n\t\t- withdrawalStatus.inProcess = false (contracts/BaseTradeExecutor.sol#81)\n",
            "markdown": "Reentrancy in [FraxConvexFraxPoolTradeExecutor._initiateWithdraw(bytes)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L115-L118):\n\tExternal calls:\n\t- [FraxConvexPositionHandler._withdraw(_data)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L116)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L329-L333)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmWithdraw()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L117)\n\t\t- [withdrawalStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 118
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f82abf1010168d153ba8031bc7ae2eec45a33809c597277116c0581e3a5ce911"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexFraxPoolTradeExecutor._initiateWithdraw(bytes) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#95-98):\n\tExternal calls:\n\t- ConvexPositionHandler._withdraw(_data) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#96)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n\t\t- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#187-190)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmWithdraw() (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#97)\n\t\t- withdrawalStatus.inProcess = false (contracts/BaseTradeExecutor.sol#81)\n",
            "markdown": "Reentrancy in [ConvexFraxPoolTradeExecutor._initiateWithdraw(bytes)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L95-L98):\n\tExternal calls:\n\t- [ConvexPositionHandler._withdraw(_data)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L96)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n\t\t- [require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L187-L190)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmWithdraw()](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L97)\n\t\t- [withdrawalStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9964c654b0972ac0abcacd75f17dfeaf14cea1831444d1b744791648342002e8"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexSUSDPoolTradeExecutor._initiateWithdraw(bytes) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#92-95):\n\tExternal calls:\n\t- ConvexPositionHandler._withdraw(_data) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#93)\n\t\t- susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n\t\t- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#190-193)\n\tState variables written after the call(s):\n\t- BaseTradeExecutor.confirmWithdraw() (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#94)\n\t\t- withdrawalStatus.inProcess = false (contracts/BaseTradeExecutor.sol#81)\n",
            "markdown": "Reentrancy in [ConvexSUSDPoolTradeExecutor._initiateWithdraw(bytes)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L92-L95):\n\tExternal calls:\n\t- [ConvexPositionHandler._withdraw(_data)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L93)\n\t\t- [susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n\t\t- [require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L190-L193)\n\tState variables written after the call(s):\n\t- [BaseTradeExecutor.confirmWithdraw()](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L94)\n\t\t- [withdrawalStatus.inProcess = false](contracts/BaseTradeExecutor.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03c763603ac705f23d15e9445a8bece701706902574b1f22b78cc4ceecf70ef7"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291):\n\tExternal calls:\n\t- lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this)) (contracts/Batcher/Batcher.sol#261-264)\n\tState variables written after the call(s):\n\t- pendingDeposit = pendingDeposit - amountToDeposit (contracts/Batcher/Batcher.sol#288)\n\t- userLPTokens[users[i_scope_0]] = userLPTokens[users[i_scope_0]] + userShare (contracts/Batcher/Batcher.sol#283)\n",
            "markdown": "Reentrancy in [Batcher.batchDeposit(address[])](contracts/Batcher/Batcher.sol#L234-L291):\n\tExternal calls:\n\t- [lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this))](contracts/Batcher/Batcher.sol#L261-L264)\n\tState variables written after the call(s):\n\t- [pendingDeposit = pendingDeposit - amountToDeposit](contracts/Batcher/Batcher.sol#L288)\n\t- [userLPTokens[users[i_scope_0]] = userLPTokens[users[i_scope_0]] + userShare](contracts/Batcher/Batcher.sol#L283)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 291
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "96b27b54e33c6b2487d1b00c64338bc010d50637dfa8cd5cf506db94cd03424f"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354):\n\tExternal calls:\n\t- wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this)) (contracts/Batcher/Batcher.sol#325-328)\n\tState variables written after the call(s):\n\t- pendingWithdrawal = pendingWithdrawal - amountToWithdraw (contracts/Batcher/Batcher.sol#351)\n\t- userWantTokens[users[i_scope_0]] = userWantTokens[users[i_scope_0]] + userShare (contracts/Batcher/Batcher.sol#346)\n",
            "markdown": "Reentrancy in [Batcher.batchWithdraw(address[])](contracts/Batcher/Batcher.sol#L297-L354):\n\tExternal calls:\n\t- [wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this))](contracts/Batcher/Batcher.sol#L325-L328)\n\tState variables written after the call(s):\n\t- [pendingWithdrawal = pendingWithdrawal - amountToWithdraw](contracts/Batcher/Batcher.sol#L351)\n\t- [userWantTokens[users[i_scope_0]] = userWantTokens[users[i_scope_0]] + userShare](contracts/Batcher/Batcher.sol#L346)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "177bf8a17c6a3f23249bd819326cf58c7483206a2eda525f948bbccc9aed2696"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexFraxPoolTradeExecutor.constructor(address,address) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#36-44):\n\tExternal calls:\n\t- FraxConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#40-43)\n\t\t- wantToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#114)\n\t- BaseTradeExecutor(_vault) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#37)\n\t\t- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n\t- FraxConvexPositionHandler() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#38)\n\t\t- _stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#92)\n\t\t- lpToken.approve(address(_stakingVault),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#101)\n\t\t- lpToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#103)\n\tState variables written after the call(s):\n\t- FraxConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#40-43)\n\t\t- harvester = IHarvester(_harvester) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#111)\n",
            "markdown": "Reentrancy in [FraxConvexFraxPoolTradeExecutor.constructor(address,address)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L36-L44):\n\tExternal calls:\n\t- [FraxConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L40-L43)\n\t\t- [wantToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L114)\n\t- [BaseTradeExecutor(_vault)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L37)\n\t\t- [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n\t- [FraxConvexPositionHandler()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L38)\n\t\t- [_stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L92)\n\t\t- [lpToken.approve(address(_stakingVault),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L101)\n\t\t- [lpToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L103)\n\tState variables written after the call(s):\n\t- [FraxConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L40-L43)\n\t\t- [harvester = IHarvester(_harvester)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L111)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aef6bdde2103d1a4e9117b10cfbeb2d890678e250687252da8d56377cd5aeea3"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexFraxPoolTradeExecutor.constructor(address,address) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#36-44):\n\tExternal calls:\n\t- BaseTradeExecutor(_vault) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#37)\n\t\t- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n\t- FraxConvexPositionHandler() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#38)\n\t\t- _stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#92)\n\t\t- lpToken.approve(address(_stakingVault),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#101)\n\t\t- lpToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#103)\n\tState variables written after the call(s):\n\t- FraxConvexPositionHandler() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#38)\n\t\t- convexStaking = IConvexStaking(IConvexStakingProxy(_stakingVault).stakingAddress()) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#96-98)\n\t- FraxConvexPositionHandler() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#38)\n\t\t- convexVault = IConvexStakingProxy(_stakingVault) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#95)\n",
            "markdown": "Reentrancy in [FraxConvexFraxPoolTradeExecutor.constructor(address,address)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L36-L44):\n\tExternal calls:\n\t- [BaseTradeExecutor(_vault)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L37)\n\t\t- [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n\t- [FraxConvexPositionHandler()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L38)\n\t\t- [_stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L92)\n\t\t- [lpToken.approve(address(_stakingVault),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L101)\n\t\t- [lpToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L103)\n\tState variables written after the call(s):\n\t- [FraxConvexPositionHandler()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L38)\n\t\t- [convexStaking = IConvexStaking(IConvexStakingProxy(_stakingVault).stakingAddress())](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L96-L98)\n\t- [FraxConvexPositionHandler()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L38)\n\t\t- [convexVault = IConvexStakingProxy(_stakingVault)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb4ebf1bf66473b0249703980da266dd44945dfb05ead5cc00d46a30000e4406"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in FraxConvexPositionHandler.constructor() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#91-104):\n\tExternal calls:\n\t- _stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#92)\n\tState variables written after the call(s):\n\t- convexStaking = IConvexStaking(IConvexStakingProxy(_stakingVault).stakingAddress()) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#96-98)\n\t- convexVault = IConvexStakingProxy(_stakingVault) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#95)\n",
            "markdown": "Reentrancy in [FraxConvexPositionHandler.constructor()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L91-L104):\n\tExternal calls:\n\t- [_stakingVault = fraxConvexBooster.createVault(FRAX_USDC_PID)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L92)\n\tState variables written after the call(s):\n\t- [convexStaking = IConvexStaking(IConvexStakingProxy(_stakingVault).stakingAddress())](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L96-L98)\n\t- [convexVault = IConvexStakingProxy(_stakingVault)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L95)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 104
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "412473f2a08eeae94ea39d76589b527bd4a7e522b7f72ee28127cd1f770cb896"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexFraxPoolTradeExecutor.constructor(address,address) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#31-36):\n\tExternal calls:\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#32-35)\n\t\t- lpToken.approve(address(convexBooster),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#95)\n\t\t- wantToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#98)\n\t\t- lpToken.approve(address(fraxPool),type()(uint256).max) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#101)\n\t- BaseTradeExecutor(_vault) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#31)\n\t\t- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n\tState variables written after the call(s):\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#32-35)\n\t\t- harvester = IHarvester(_harvester) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#89)\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#32-35)\n\t\t- prevSharePrice = fraxPool.get_virtual_price() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#92)\n",
            "markdown": "Reentrancy in [ConvexFraxPoolTradeExecutor.constructor(address,address)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L31-L36):\n\tExternal calls:\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L32-L35)\n\t\t- [lpToken.approve(address(convexBooster),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L95)\n\t\t- [wantToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L98)\n\t\t- [lpToken.approve(address(fraxPool),type()(uint256).max)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L101)\n\t- [BaseTradeExecutor(_vault)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L31)\n\t\t- [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n\tState variables written after the call(s):\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L32-L35)\n\t\t- [harvester = IHarvester(_harvester)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L89)\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L32-L35)\n\t\t- [prevSharePrice = fraxPool.get_virtual_price()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L92)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5511f32a179a766c19b2404c3e7fb9af494cf2b7d2ab0b94cbf078f09f1d395e"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Harvester.constructor(address) (contracts/ConvexExecutor/Harvester.sol#113-135):\n\tExternal calls:\n\t- crv.approve(address(crveth),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#117)\n\t- cvx.approve(address(cvxeth),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#119)\n\t- _3crv.approve(address(_3crvPool),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#121)\n\t- weth.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#123)\n\t- snx.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#125)\n\t- fxs.approve(address(uniswapRouter),type()(uint256).max) (contracts/ConvexExecutor/Harvester.sol#127)\n\tState variables written after the call(s):\n\t- rewards = new address[](5) (contracts/ConvexExecutor/Harvester.sol#129)\n\t- rewards[0] = address(crv) (contracts/ConvexExecutor/Harvester.sol#130)\n\t- rewards[1] = address(cvx) (contracts/ConvexExecutor/Harvester.sol#131)\n\t- rewards[2] = address(_3crv) (contracts/ConvexExecutor/Harvester.sol#132)\n\t- rewards[3] = address(snx) (contracts/ConvexExecutor/Harvester.sol#133)\n\t- rewards[4] = address(fxs) (contracts/ConvexExecutor/Harvester.sol#134)\n",
            "markdown": "Reentrancy in [Harvester.constructor(address)](contracts/ConvexExecutor/Harvester.sol#L113-L135):\n\tExternal calls:\n\t- [crv.approve(address(crveth),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L117)\n\t- [cvx.approve(address(cvxeth),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L119)\n\t- [_3crv.approve(address(_3crvPool),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L121)\n\t- [weth.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L123)\n\t- [snx.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L125)\n\t- [fxs.approve(address(uniswapRouter),type()(uint256).max)](contracts/ConvexExecutor/Harvester.sol#L127)\n\tState variables written after the call(s):\n\t- [rewards = new address[](5)](contracts/ConvexExecutor/Harvester.sol#L129)\n\t- [rewards[0] = address(crv)](contracts/ConvexExecutor/Harvester.sol#L130)\n\t- [rewards[1] = address(cvx)](contracts/ConvexExecutor/Harvester.sol#L131)\n\t- [rewards[2] = address(_3crv)](contracts/ConvexExecutor/Harvester.sol#L132)\n\t- [rewards[3] = address(snx)](contracts/ConvexExecutor/Harvester.sol#L133)\n\t- [rewards[4] = address(fxs)](contracts/ConvexExecutor/Harvester.sol#L134)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "67b59e12a5123b21b47e313ede01627a9efc38fc8ea19a8a82bbfb3e23dccc2d"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in ConvexSUSDPoolTradeExecutor.constructor(address,address) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#28-33):\n\tExternal calls:\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#29-32)\n\t\t- lpToken.approve(address(convexBooster),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#100)\n\t\t- wantToken.approve(address(susdPool),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#102)\n\t\t- lpToken.approve(address(susdDeposit),type()(uint256).max) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#104)\n\t- BaseTradeExecutor(_vault) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#28)\n\t\t- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n\tState variables written after the call(s):\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#29-32)\n\t\t- harvester = IHarvester(_harvester) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#94)\n\t- ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken()) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#29-32)\n\t\t- prevSharePrice = susdPool.get_virtual_price() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#97)\n",
            "markdown": "Reentrancy in [ConvexSUSDPoolTradeExecutor.constructor(address,address)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L28-L33):\n\tExternal calls:\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L29-L32)\n\t\t- [lpToken.approve(address(convexBooster),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L100)\n\t\t- [wantToken.approve(address(susdPool),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L102)\n\t\t- [lpToken.approve(address(susdDeposit),type()(uint256).max)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L104)\n\t- [BaseTradeExecutor(_vault)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L28)\n\t\t- [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n\tState variables written after the call(s):\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L29-L32)\n\t\t- [harvester = IHarvester(_harvester)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L94)\n\t- [ConvexPositionHandler._configHandler(_harvester,BaseTradeExecutor.vaultWantToken())](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L29-L32)\n\t\t- [prevSharePrice = susdPool.get_virtual_price()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L97)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ed3b6385281c286f9a54c66a4f00321a1f77d6ffaeaddb538cb9e939de6cac66"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in PerpTradeExecutor.constructor(address,address,address,address,address) (contracts/PerpHandler/PerpTradeExecutor.sol#18-32):\n\tExternal calls:\n\t- BaseTradeExecutor(vault) (contracts/PerpHandler/PerpTradeExecutor.sol#24)\n\t\t- IERC20(vaultWantToken()).approve(vault,MAX_INT) (contracts/BaseTradeExecutor.sol#19)\n\tState variables written after the call(s):\n\t- _initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry) (contracts/PerpHandler/PerpTradeExecutor.sol#25-31)\n\t\t- L1CrossDomainMessenger = _L1CrossDomainMessenger (contracts/PerpHandler/PerpPositionHandler.sol#123)\n\t- _initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry) (contracts/PerpHandler/PerpTradeExecutor.sol#25-31)\n\t\t- positionHandlerL2Address = _positionHandlerL2Address (contracts/PerpHandler/PerpPositionHandler.sol#122)\n\t- _initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry) (contracts/PerpHandler/PerpTradeExecutor.sol#25-31)\n\t\t- socketRegistry = _socketRegistry (contracts/PerpHandler/PerpPositionHandler.sol#124)\n\t- _initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry) (contracts/PerpHandler/PerpTradeExecutor.sol#25-31)\n\t\t- wantTokenL1 = _wantTokenL1 (contracts/PerpHandler/PerpPositionHandler.sol#120)\n\t- _initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry) (contracts/PerpHandler/PerpTradeExecutor.sol#25-31)\n\t\t- wantTokenL2 = _wantTokenL2 (contracts/PerpHandler/PerpPositionHandler.sol#121)\n",
            "markdown": "Reentrancy in [PerpTradeExecutor.constructor(address,address,address,address,address)](contracts/PerpHandler/PerpTradeExecutor.sol#L18-L32):\n\tExternal calls:\n\t- [BaseTradeExecutor(vault)](contracts/PerpHandler/PerpTradeExecutor.sol#L24)\n\t\t- [IERC20(vaultWantToken()).approve(vault,MAX_INT)](contracts/BaseTradeExecutor.sol#L19)\n\tState variables written after the call(s):\n\t- [_initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry)](contracts/PerpHandler/PerpTradeExecutor.sol#L25-L31)\n\t\t- [L1CrossDomainMessenger = _L1CrossDomainMessenger](contracts/PerpHandler/PerpPositionHandler.sol#L123)\n\t- [_initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry)](contracts/PerpHandler/PerpTradeExecutor.sol#L25-L31)\n\t\t- [positionHandlerL2Address = _positionHandlerL2Address](contracts/PerpHandler/PerpPositionHandler.sol#L122)\n\t- [_initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry)](contracts/PerpHandler/PerpTradeExecutor.sol#L25-L31)\n\t\t- [socketRegistry = _socketRegistry](contracts/PerpHandler/PerpPositionHandler.sol#L124)\n\t- [_initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry)](contracts/PerpHandler/PerpTradeExecutor.sol#L25-L31)\n\t\t- [wantTokenL1 = _wantTokenL1](contracts/PerpHandler/PerpPositionHandler.sol#L120)\n\t- [_initHandler(vaultWantToken(),_wantTokenL2,_l2HandlerAddress,_L1CrossDomainMessenger,_socketRegistry)](contracts/PerpHandler/PerpTradeExecutor.sol#L25-L31)\n\t\t- [wantTokenL2 = _wantTokenL2](contracts/PerpHandler/PerpPositionHandler.sol#L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eec10774eb620d3cb4ebff72852fac91693a8f86686e318962aea07be51519d0"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#90-108):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Vault.sol#106)\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tState variables written after the call(s):\n\t- _mint(receiver,shares) (contracts/Vault.sol#107)\n\t\t- _balances[account] += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#263)\n",
            "markdown": "Reentrancy in [Vault.deposit(uint256,address)](contracts/Vault.sol#L90-L108):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn)](contracts/Vault.sol#L106)\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tState variables written after the call(s):\n\t- [_mint(receiver,shares)](contracts/Vault.sol#L107)\n\t\t- [_balances[account] += amount](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L263)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aec00951e7a94ef70c1347b8febec52cf236084cb06197ebf618f94ccee0cafe"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121):\n\tExternal calls:\n\t- IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s) (contracts/Batcher/Batcher.sol#80-88)\n\t- IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#94-98)\n\tState variables written after the call(s):\n\t- depositLedger[recipient] = depositLedger[recipient] + (amountIn) (contracts/Batcher/Batcher.sol#117)\n\t- pendingDeposit = pendingDeposit + amountIn (contracts/Batcher/Batcher.sol#118)\n",
            "markdown": "Reentrancy in [Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams)](contracts/Batcher/Batcher.sol#L71-L121):\n\tExternal calls:\n\t- [IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s)](contracts/Batcher/Batcher.sol#L80-L88)\n\t- [IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn)](contracts/Batcher/Batcher.sol#L94-L98)\n\tState variables written after the call(s):\n\t- [depositLedger[recipient] = depositLedger[recipient] + (amountIn)](contracts/Batcher/Batcher.sol#L117)\n\t- [pendingDeposit = pendingDeposit + amountIn](contracts/Batcher/Batcher.sol#L118)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86ae9234c27a241cbef76ed750b5448af0d83611540ebd8edd2a52c379ed8a77"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):\n\tExternal calls:\n\t- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)\n\tState variables written after the call(s):\n\t- pendingWithdrawal = pendingWithdrawal + amountIn (contracts/Batcher/Batcher.sol#149)\n\t- withdrawLedger[msg.sender] = withdrawLedger[msg.sender] + (amountIn) (contracts/Batcher/Batcher.sol#147)\n",
            "markdown": "Reentrancy in [Batcher.initiateWithdrawal(uint256)](contracts/Batcher/Batcher.sol#L127-L152):\n\tExternal calls:\n\t- [IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender])](contracts/Batcher/Batcher.sol#L137-L141)\n\tState variables written after the call(s):\n\t- [pendingWithdrawal = pendingWithdrawal + amountIn](contracts/Batcher/Batcher.sol#L149)\n\t- [withdrawLedger[msg.sender] = withdrawLedger[msg.sender] + (amountIn)](contracts/Batcher/Batcher.sol#L147)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d725869517744f39f8f14479ea6a1127d59a561a52451b617698221ccd5a03c8"
          }
        },
        {
          "ruleId": "2-1-reentrancy-benign",
          "message": {
            "text": "Reentrancy in Vault.withdraw(uint256,address) (contracts/Vault.sol#113-135):\n\tExternal calls:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#117)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#117)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tState variables written after the call(s):\n\t- _burn(msg.sender,sharesIn) (contracts/Vault.sol#127)\n\t\t- _balances[account] = accountBalance - amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#288)\n\t- _burn(msg.sender,sharesIn) (contracts/Vault.sol#127)\n\t\t- _totalSupply -= amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#290)\n",
            "markdown": "Reentrancy in [Vault.withdraw(uint256,address)](contracts/Vault.sol#L113-L135):\n\tExternal calls:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L117)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L117)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tState variables written after the call(s):\n\t- [_burn(msg.sender,sharesIn)](contracts/Vault.sol#L127)\n\t\t- [_balances[account] = accountBalance - amount](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L288)\n\t- [_burn(msg.sender,sharesIn)](contracts/Vault.sol#L127)\n\t\t- [_totalSupply -= amount](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L290)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "476afc00bd83f9fc9fb08dda3bd755f2902d64753f5ca8a431f6f5691b2a8c65"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in FraxConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#238-267):\n\tExternal calls:\n\t- convexVault.getReward() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#239)\n\t- harvester.harvest() (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#259)\n\tEvent emitted after the call(s):\n\t- Claim(latestHarvestedRewards) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#266)\n",
            "markdown": "Reentrancy in [FraxConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L238-L267):\n\tExternal calls:\n\t- [convexVault.getReward()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L239)\n\t- [harvester.harvest()](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L259)\n\tEvent emitted after the call(s):\n\t- [Claim(latestHarvestedRewards)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L266)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 267
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1e188dbd1786987493742941c066176e740f3814a84abbe40c858afd83807f7"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#275-328):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#276)\n\t- harvester.harvest() (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#296)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#312-315)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#318)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n\tEvent emitted after the call(s):\n\t- Claim(latestHarvestedRewards) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#327)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L275-L328):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L276)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L296)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L312-L315)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L318)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n\tEvent emitted after the call(s):\n\t- [Claim(latestHarvestedRewards)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L327)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 275,
                  "endLine": 328
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a3b61ac254bb751af56f27ce9b83e78675a1bed319bca1d599a3290e1aa31d1"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#278-331):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.getReward(),reward claim failed) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#279)\n\t- harvester.harvest() (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#299)\n\t- baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#315-318)\n\t- _convertLpTokenIntoUSDC(lpTokenEarned) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#321)\n\t\t- susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n\tEvent emitted after the call(s):\n\t- Claim(latestHarvestedRewards) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#330)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L278-L331):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.getReward(),reward claim failed)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L279)\n\t- [harvester.harvest()](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L299)\n\t- [baseRewardPool.withdrawAndUnwrap(lpTokenEarned - contractLpTokenBalance,true)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L315-L318)\n\t- [_convertLpTokenIntoUSDC(lpTokenEarned)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L321)\n\t\t- [susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n\tEvent emitted after the call(s):\n\t- [Claim(latestHarvestedRewards)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L330)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 278,
                  "endLine": 331
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3417a569acb04c6637d7bf2b081a26ea7154752f70df023a9b190a5028fbbf8a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in FraxConvexPositionHandler._deposit(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#150-160):\n\tExternal calls:\n\t- _convertUSDCIntoLpToken(depositParams._amount) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#157)\n\t\t- receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#352-355)\n\tEvent emitted after the call(s):\n\t- Deposit(depositParams._amount) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#159)\n",
            "markdown": "Reentrancy in [FraxConvexPositionHandler._deposit(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L150-L160):\n\tExternal calls:\n\t- [_convertUSDCIntoLpToken(depositParams._amount)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L157)\n\t\t- [receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L352-L355)\n\tEvent emitted after the call(s):\n\t- [Deposit(depositParams._amount)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L159)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 160
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f7493bad829007533fbb2d41f5bdc451cac84156d94a673ef11d500b644e747"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._deposit(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#137-147):\n\tExternal calls:\n\t- _convertUSDCIntoLpToken(depositParams._amount) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#144)\n\t\t- receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#411-414)\n\tEvent emitted after the call(s):\n\t- Deposit(depositParams._amount) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#146)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._deposit(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L137-L147):\n\tExternal calls:\n\t- [_convertUSDCIntoLpToken(depositParams._amount)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L144)\n\t\t- [receivedLpTokens = fraxPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L411-L414)\n\tEvent emitted after the call(s):\n\t- [Deposit(depositParams._amount)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L146)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 147
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7915bed25e9cf30640c0295d1e58de88249bdc58cd1e1b892b2aa367d2a64171"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._deposit(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#140-150):\n\tExternal calls:\n\t- _convertUSDCIntoLpToken(depositParams._amount) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#147)\n\t\t- susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#420-423)\n\tEvent emitted after the call(s):\n\t- Deposit(depositParams._amount) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#149)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._deposit(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L140-L150):\n\tExternal calls:\n\t- [_convertUSDCIntoLpToken(depositParams._amount)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L147)\n\t\t- [susdPool.add_liquidity(liquidityAmounts,(expectedLpOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L420-L423)\n\tEvent emitted after the call(s):\n\t- [Deposit(depositParams._amount)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L149)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "275e653808527cc2755b32a68d8afb2c9b372d8ac6e5a5da0cb3a0d9fe5a3db5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in PerpPositionHandler._deposit(bytes) (contracts/PerpHandler/PerpPositionHandler.sol#134-153):\n\tExternal calls:\n\t- sendTokens(wantTokenL1,depositParams._allowanceTarget,depositParams._socketRegistry,positionHandlerL2Address,depositParams._amount,10,depositParams._socketData) (contracts/PerpHandler/PerpPositionHandler.sol#142-150)\n\t\t- IERC20(token).approve(allowanceTarget,amount) (contracts/PerpHandler/SocketV1Controller.sol#102)\n\t\t- (success) = socketRegistry.call(data) (contracts/PerpHandler/SocketV1Controller.sol#103)\n\tEvent emitted after the call(s):\n\t- Deposit(depositParams._amount) (contracts/PerpHandler/PerpPositionHandler.sol#152)\n",
            "markdown": "Reentrancy in [PerpPositionHandler._deposit(bytes)](contracts/PerpHandler/PerpPositionHandler.sol#L134-L153):\n\tExternal calls:\n\t- [sendTokens(wantTokenL1,depositParams._allowanceTarget,depositParams._socketRegistry,positionHandlerL2Address,depositParams._amount,10,depositParams._socketData)](contracts/PerpHandler/PerpPositionHandler.sol#L142-L150)\n\t\t- [IERC20(token).approve(allowanceTarget,amount)](contracts/PerpHandler/SocketV1Controller.sol#L102)\n\t\t- [(success) = socketRegistry.call(data)](contracts/PerpHandler/SocketV1Controller.sol#L103)\n\tEvent emitted after the call(s):\n\t- [Deposit(depositParams._amount)](contracts/PerpHandler/PerpPositionHandler.sol#L152)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 153
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c371c452c7f4d587d9a7be84cfa8f201661b418585f7ab545eddcfc0387f8f9"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in FraxConvexPositionHandler._withdraw(bytes) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#167-175):\n\tExternal calls:\n\t- _convertLpTokenIntoUSDC(lpTokensToConvert) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#171)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#329-333)\n\tEvent emitted after the call(s):\n\t- Withdraw(wantToken.balanceOf(address(this))) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#174)\n",
            "markdown": "Reentrancy in [FraxConvexPositionHandler._withdraw(bytes)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L167-L175):\n\tExternal calls:\n\t- [_convertLpTokenIntoUSDC(lpTokensToConvert)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L171)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L329-L333)\n\tEvent emitted after the call(s):\n\t- [Withdraw(wantToken.balanceOf(address(this)))](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L174)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 175
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c5e16c17c9b830fb9d391239d8416bc5e793b0f8b92d202d15ea042379d2686"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._withdraw(bytes) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#154-206):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#187-190)\n\t- _convertLpTokenIntoUSDC(lpTokensToConvert) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#202)\n\t\t- receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#388-392)\n\tEvent emitted after the call(s):\n\t- Withdraw(withdrawParams._amount) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#205)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._withdraw(bytes)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L154-L206):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L187-L190)\n\t- [_convertLpTokenIntoUSDC(lpTokensToConvert)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L202)\n\t\t- [receivedWantTokens = fraxPool.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L388-L392)\n\tEvent emitted after the call(s):\n\t- [Withdraw(withdrawParams._amount)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L205)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 206
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6eea9fb2cb41344ef33776b865b4961719f2f2b11af5ef56d0d6492558c1dbf2"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ConvexPositionHandler._withdraw(bytes) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#157-209):\n\tExternal calls:\n\t- require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#190-193)\n\t- _convertLpTokenIntoUSDC(lpTokensToConvert) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#205)\n\t\t- susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS)) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#392-396)\n\tEvent emitted after the call(s):\n\t- Withdraw(withdrawParams._amount) (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#208)\n",
            "markdown": "Reentrancy in [ConvexPositionHandler._withdraw(bytes)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L157-L209):\n\tExternal calls:\n\t- [require(bool,string)(baseRewardPool.withdrawAndUnwrap(lpTokensToUnstake,true),could not unstake)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L190-L193)\n\t- [_convertLpTokenIntoUSDC(lpTokensToConvert)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L205)\n\t\t- [susdDeposit.remove_liquidity_one_coin(_amount,usdcIndexInPool,(expectedWantTokensOut * (MAX_BPS - maxSlippage)) / (MAX_BPS))](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L392-L396)\n\tEvent emitted after the call(s):\n\t- [Withdraw(withdrawParams._amount)](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L208)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "45a6f0a8e5ac6750528c1abad79b85e97fcf9492504c8ba9a1bd2d78885825c3"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in PerpPositionHandler._withdraw(bytes) (contracts/PerpHandler/PerpPositionHandler.sol#158-176):\n\tExternal calls:\n\t- sendMessageToL2(positionHandlerL2Address,L2calldata,withdrawParams._gasLimit) (contracts/PerpHandler/PerpPositionHandler.sol#170-174)\n\t\t- optimismMessenger.sendMessage(_target,_message,_gasLimit) (contracts/PerpHandler/OptimismWrapper.sol#34)\n\tEvent emitted after the call(s):\n\t- Withdraw(withdrawParams._amount) (contracts/PerpHandler/PerpPositionHandler.sol#175)\n",
            "markdown": "Reentrancy in [PerpPositionHandler._withdraw(bytes)](contracts/PerpHandler/PerpPositionHandler.sol#L158-L176):\n\tExternal calls:\n\t- [sendMessageToL2(positionHandlerL2Address,L2calldata,withdrawParams._gasLimit)](contracts/PerpHandler/PerpPositionHandler.sol#L170-L174)\n\t\t- [optimismMessenger.sendMessage(_target,_message,_gasLimit)](contracts/PerpHandler/OptimismWrapper.sol#L34)\n\tEvent emitted after the call(s):\n\t- [Withdraw(withdrawParams._amount)](contracts/PerpHandler/PerpPositionHandler.sol#L175)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d580b11b10cb70313bb37acc9169abc338fcaee47ddf1fb32ccc9afb86a47d99"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Batcher.batchDeposit(address[]) (contracts/Batcher/Batcher.sol#234-291):\n\tExternal calls:\n\t- lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this)) (contracts/Batcher/Batcher.sol#261-264)\n\tEvent emitted after the call(s):\n\t- BatchDepositSuccessful(lpTokensReceived,totalUsersProcessed) (contracts/Batcher/Batcher.sol#290)\n",
            "markdown": "Reentrancy in [Batcher.batchDeposit(address[])](contracts/Batcher/Batcher.sol#L234-L291):\n\tExternal calls:\n\t- [lpTokensReportedByVault = vault.deposit(amountToDeposit,address(this))](contracts/Batcher/Batcher.sol#L261-L264)\n\tEvent emitted after the call(s):\n\t- [BatchDepositSuccessful(lpTokensReceived,totalUsersProcessed)](contracts/Batcher/Batcher.sol#L290)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 291
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7ee8725fa52ed4edbbb635278b0b026ee9ac8668f6459805321310079a4bdfa"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Batcher.batchWithdraw(address[]) (contracts/Batcher/Batcher.sol#297-354):\n\tExternal calls:\n\t- wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this)) (contracts/Batcher/Batcher.sol#325-328)\n\tEvent emitted after the call(s):\n\t- BatchWithdrawSuccessful(wantTokensReceived,totalUsersProcessed) (contracts/Batcher/Batcher.sol#353)\n",
            "markdown": "Reentrancy in [Batcher.batchWithdraw(address[])](contracts/Batcher/Batcher.sol#L297-L354):\n\tExternal calls:\n\t- [wantTokensReportedByVault = vault.withdraw(amountToWithdraw,address(this))](contracts/Batcher/Batcher.sol#L325-L328)\n\tEvent emitted after the call(s):\n\t- [BatchWithdrawSuccessful(wantTokensReceived,totalUsersProcessed)](contracts/Batcher/Batcher.sol#L353)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 354
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "769cf86bf229a9cf687795e942a39728dd47702a7f7d3982dd116aaf0c354fd4"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Vault.collectFees() (contracts/Vault.sol#259-278):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tEvent emitted after the call(s):\n\t- FeesCollected(fees) (contracts/Vault.sol#276)\n",
            "markdown": "Reentrancy in [Vault.collectFees()](contracts/Vault.sol#L259-L278):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tEvent emitted after the call(s):\n\t- [FeesCollected(fees)](contracts/Vault.sol#L276)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 278
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a82eaf51ca5358c7d322fdda654134bb515040fd09e8bc4dad9a1aee75015e4"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Batcher.completeWithdrawal(uint256,address) (contracts/Batcher/Batcher.sol#158-170):\n\tExternal calls:\n\t- IERC20(vaultInfo.tokenAddress).safeTransfer(recipient,amountOut) (contracts/Batcher/Batcher.sol#167)\n\tEvent emitted after the call(s):\n\t- WithdrawComplete(recipient,vaultInfo.vaultAddress,amountOut) (contracts/Batcher/Batcher.sol#169)\n",
            "markdown": "Reentrancy in [Batcher.completeWithdrawal(uint256,address)](contracts/Batcher/Batcher.sol#L158-L170):\n\tExternal calls:\n\t- [IERC20(vaultInfo.tokenAddress).safeTransfer(recipient,amountOut)](contracts/Batcher/Batcher.sol#L167)\n\tEvent emitted after the call(s):\n\t- [WithdrawComplete(recipient,vaultInfo.vaultAddress,amountOut)](contracts/Batcher/Batcher.sol#L169)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 170
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e5040adbd4c512a13e9a6758ca0fa898bc31af42574a9cecdce004ea62eeeff"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Vault.deposit(uint256,address) (contracts/Vault.sol#90-108):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Vault.sol#106)\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#94)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tEvent emitted after the call(s):\n\t- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#264)\n\t\t- _mint(receiver,shares) (contracts/Vault.sol#107)\n",
            "markdown": "Reentrancy in [Vault.deposit(uint256,address)](contracts/Vault.sol#L90-L108):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransferFrom(msg.sender,address(this),amountIn)](contracts/Vault.sol#L106)\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L94)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tEvent emitted after the call(s):\n\t- [Transfer(address(0),account,amount)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L264)\n\t\t- [_mint(receiver,shares)](contracts/Vault.sol#L107)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a91009eb1d40c0000c403d1c7b6a3d12b06bb781d07653889f7ef70bab5b39c"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams) (contracts/Batcher/Batcher.sol#71-121):\n\tExternal calls:\n\t- IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s) (contracts/Batcher/Batcher.sol#80-88)\n\t- IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn) (contracts/Batcher/Batcher.sol#94-98)\n\tEvent emitted after the call(s):\n\t- DepositRequest(recipient,vaultInfo.vaultAddress,amountIn) (contracts/Batcher/Batcher.sol#120)\n",
            "markdown": "Reentrancy in [Batcher.depositFunds(uint256,bytes,address,IBatcher.PermitParams)](contracts/Batcher/Batcher.sol#L71-L121):\n\tExternal calls:\n\t- [IERC20Permit(vaultInfo.tokenAddress).permit(msg.sender,address(this),permit.value,permit.deadline,permit.v,permit.r,permit.s)](contracts/Batcher/Batcher.sol#L80-L88)\n\t- [IERC20(vaultInfo.tokenAddress).safeTransferFrom(msg.sender,address(this),amountIn)](contracts/Batcher/Batcher.sol#L94-L98)\n\tEvent emitted after the call(s):\n\t- [DepositRequest(recipient,vaultInfo.vaultAddress,amountIn)](contracts/Batcher/Batcher.sol#L120)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddd45f7cdcde564223fb7f3582bcb817f2fbf0cd5c5b65217a8d2bef80dac83c"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Vault.depositIntoExecutor(address,uint256) (contracts/Vault.sol#167-176):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransfer(_executor,_amount) (contracts/Vault.sol#174)\n\tEvent emitted after the call(s):\n\t- ExecutorDeposit(_executor,_amount) (contracts/Vault.sol#175)\n",
            "markdown": "Reentrancy in [Vault.depositIntoExecutor(address,uint256)](contracts/Vault.sol#L167-L176):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransfer(_executor,_amount)](contracts/Vault.sol#L174)\n\tEvent emitted after the call(s):\n\t- [ExecutorDeposit(_executor,_amount)](contracts/Vault.sol#L175)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d750d81cba7ccab741ed77a739e118a97b0cb019e71fdd35381e19984e2e980"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Harvester.harvest() (contracts/ConvexExecutor/Harvester.sol#178-253):\n\tExternal calls:\n\t- cvxeth.exchange(1,0,cvxBalance,_getMinReceived(expectedOut),false) (contracts/ConvexExecutor/Harvester.sol#193-199)\n\t- crveth.exchange(1,0,crvBalance,_getMinReceived(expectedOut_scope_0),false) (contracts/ConvexExecutor/Harvester.sol#204-210)\n\t- _swapToWantOnUniV3(address(weth),wethBalance,WETH_SWAP_FEE,ethUsdPrice) (contracts/ConvexExecutor/Harvester.sol#217-222)\n\t\t- uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut))) (contracts/ConvexExecutor/Harvester.sol#270-282)\n\t- _3crvPool.remove_liquidity_one_coin(_3crvBalance,1,0) (contracts/ConvexExecutor/Harvester.sol#227)\n\t- _swapToWantOnUniV3(address(snx),snxBalance,SNX_SWAP_FEE,snxUsdPrice) (contracts/ConvexExecutor/Harvester.sol#231-236)\n\t\t- uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut))) (contracts/ConvexExecutor/Harvester.sol#270-282)\n\t- _swapToWantOnUniV2(path,fxsBalance,fxsUsdPrice) (contracts/ConvexExecutor/Harvester.sol#245)\n\t\t- uniswapRouterV2.swapExactTokensForTokens(amount,expectedOut,path,address(this),block.timestamp) (contracts/ConvexExecutor/Harvester.sol#298-304)\n\t- IERC20(vault.wantToken()).safeTransfer(msg.sender,wantTokensReceived) (contracts/ConvexExecutor/Harvester.sol#250)\n\tEvent emitted after the call(s):\n\t- Harvested(wantTokensReceived) (contracts/ConvexExecutor/Harvester.sol#252)\n",
            "markdown": "Reentrancy in [Harvester.harvest()](contracts/ConvexExecutor/Harvester.sol#L178-L253):\n\tExternal calls:\n\t- [cvxeth.exchange(1,0,cvxBalance,_getMinReceived(expectedOut),false)](contracts/ConvexExecutor/Harvester.sol#L193-L199)\n\t- [crveth.exchange(1,0,crvBalance,_getMinReceived(expectedOut_scope_0),false)](contracts/ConvexExecutor/Harvester.sol#L204-L210)\n\t- [_swapToWantOnUniV3(address(weth),wethBalance,WETH_SWAP_FEE,ethUsdPrice)](contracts/ConvexExecutor/Harvester.sol#L217-L222)\n\t\t- [uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut)))](contracts/ConvexExecutor/Harvester.sol#L270-L282)\n\t- [_3crvPool.remove_liquidity_one_coin(_3crvBalance,1,0)](contracts/ConvexExecutor/Harvester.sol#L227)\n\t- [_swapToWantOnUniV3(address(snx),snxBalance,SNX_SWAP_FEE,snxUsdPrice)](contracts/ConvexExecutor/Harvester.sol#L231-L236)\n\t\t- [uniswapRouter.exactInput(IUniswapV3Router.ExactInputParams(abi.encodePacked(tokenIn,uint24(fee),address(vault.wantToken())),address(this),block.timestamp,amount,_getMinReceived(expectedOut)))](contracts/ConvexExecutor/Harvester.sol#L270-L282)\n\t- [_swapToWantOnUniV2(path,fxsBalance,fxsUsdPrice)](contracts/ConvexExecutor/Harvester.sol#L245)\n\t\t- [uniswapRouterV2.swapExactTokensForTokens(amount,expectedOut,path,address(this),block.timestamp)](contracts/ConvexExecutor/Harvester.sol#L298-L304)\n\t- [IERC20(vault.wantToken()).safeTransfer(msg.sender,wantTokensReceived)](contracts/ConvexExecutor/Harvester.sol#L250)\n\tEvent emitted after the call(s):\n\t- [Harvested(wantTokensReceived)](contracts/ConvexExecutor/Harvester.sol#L252)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 253
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "18b5b1d3236395a0973d71c1657ea8778fb2589333e3d915943aa4bfd34c9144"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Batcher.initiateWithdrawal(uint256) (contracts/Batcher/Batcher.sol#127-152):\n\tExternal calls:\n\t- IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender]) (contracts/Batcher/Batcher.sol#137-141)\n\tEvent emitted after the call(s):\n\t- WithdrawRequest(msg.sender,vaultInfo.vaultAddress,amountIn) (contracts/Batcher/Batcher.sol#151)\n",
            "markdown": "Reentrancy in [Batcher.initiateWithdrawal(uint256)](contracts/Batcher/Batcher.sol#L127-L152):\n\tExternal calls:\n\t- [IERC20(vaultInfo.vaultAddress).safeTransferFrom(msg.sender,address(this),amountIn - userLPTokens[msg.sender])](contracts/Batcher/Batcher.sol#L137-L141)\n\tEvent emitted after the call(s):\n\t- [WithdrawRequest(msg.sender,vaultInfo.vaultAddress,amountIn)](contracts/Batcher/Batcher.sol#L151)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "654c8a8c060c7a55c897d930ef9d21a8da170e321144ea4223613de79ea3e9c0"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Vault.withdraw(uint256,address) (contracts/Vault.sol#113-135):\n\tExternal calls:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#117)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#93)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\t\t- IERC20(wantToken).safeTransfer(governance,fees) (contracts/Vault.sol#275)\n\tExternal calls sending eth:\n\t- ensureFeesAreCollected() (contracts/Vault.sol#117)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n\tEvent emitted after the call(s):\n\t- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#292)\n\t\t- _burn(msg.sender,sharesIn) (contracts/Vault.sol#127)\n",
            "markdown": "Reentrancy in [Vault.withdraw(uint256,address)](contracts/Vault.sol#L113-L135):\n\tExternal calls:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L117)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L93)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\t\t- [IERC20(wantToken).safeTransfer(governance,fees)](contracts/Vault.sol#L275)\n\tExternal calls sending eth:\n\t- [ensureFeesAreCollected()](contracts/Vault.sol#L117)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n\tEvent emitted after the call(s):\n\t- [Transfer(account,address(0),amount)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L292)\n\t\t- [_burn(msg.sender,sharesIn)](contracts/Vault.sol#L127)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b2bd60e01775f101ad9ee86ea6b2ce44b4aea4a491a99bfd0819ca4f3177736"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in Vault.withdrawFromExecutor(address,uint256) (contracts/Vault.sol#181-190):\n\tExternal calls:\n\t- IERC20(wantToken).safeTransferFrom(_executor,address(this),_amount) (contracts/Vault.sol#188)\n\tEvent emitted after the call(s):\n\t- ExecutorWithdrawal(_executor,_amount) (contracts/Vault.sol#189)\n",
            "markdown": "Reentrancy in [Vault.withdrawFromExecutor(address,uint256)](contracts/Vault.sol#L181-L190):\n\tExternal calls:\n\t- [IERC20(wantToken).safeTransferFrom(_executor,address(this),_amount)](contracts/Vault.sol#L188)\n\tEvent emitted after the call(s):\n\t- [ExecutorWithdrawal(_executor,_amount)](contracts/Vault.sol#L189)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "220a1b60b2d563fa364b02b727c85896e83c454e81e209f717ba26ad2b349192"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#49-68) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#58)\n",
            "markdown": "[ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32)](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L49-L68) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline)](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d5447a4211665cccb578b741e6f80459798e24ebc8afbe79fd37e3d4a29aaab"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "Vault.collectFees() (contracts/Vault.sol#259-278) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- (managementFee > 0) && (lastReportedTime < block.timestamp) (contracts/Vault.sol#268)\n\t- fees > 0 (contracts/Vault.sol#274)\n",
            "markdown": "[Vault.collectFees()](contracts/Vault.sol#L259-L278) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [(managementFee > 0) && (lastReportedTime < block.timestamp)](contracts/Vault.sol#L268)\n\t- [fees > 0](contracts/Vault.sol#L274)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 259,
                  "endLine": 278
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8d66ba74890c69a41197fd0f15c1fdd1298426b8c96e17dccb4f8d00d223beb"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) uses assembly\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#26-30)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#35-37)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#52-54)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#56-59)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#66-68)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#71-73)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#77-79)\n",
            "markdown": "[FullMath.mulDiv(uint256,uint256,uint256)](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L14-L106) uses assembly\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L26-L30)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L35-L37)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L52-L54)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L56-L59)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L66-L68)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L71-L73)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L77-L79)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e49a4b21f527cf9438757ea4e36bf37f600d2bb86346c5fb0cd966310785552d"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "TickMath.getTickAtSqrtRatio(uint160) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#61-204) uses assembly\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#69-73)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#74-78)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#79-83)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#84-88)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#89-93)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#94-98)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#99-103)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#104-107)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#114-119)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#120-125)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#126-131)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#132-137)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#138-143)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#144-149)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#150-155)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#156-161)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#162-167)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#168-173)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#174-179)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#180-185)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#186-191)\n\t- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#192-196)\n",
            "markdown": "[TickMath.getTickAtSqrtRatio(uint160)](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L61-L204) uses assembly\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L69-L73)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L74-L78)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L79-L83)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L84-L88)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L89-L93)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L94-L98)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L99-L103)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L104-L107)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L114-L119)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L120-L125)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L126-L131)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L132-L137)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L138-L143)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L144-L149)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L150-L155)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L156-L161)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L162-L167)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L168-L173)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L174-L179)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L180-L185)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L186-L191)\n\t- [INLINE ASM](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L192-L196)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbdfff54d89f2fb1947526993ae8b99cc5307b342f8ec9395e2f842f1a43e0a9"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)\n",
            "markdown": "[Address.verifyCallResult(bool,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L201-L221) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L213-L216)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 221
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "35871747c525efe5aeed3ee6e6ac7d19de1404d80cba7ebe954161c30eced4d8"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#57-86) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#67-71)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#78-81)\n",
            "markdown": "[ECDSA.tryRecover(bytes32,bytes)](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L57-L86) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L67-L71)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L78-L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5bf401391a7793d738dd1fd7b6a6db3d4525d9e4e2dcb06655423667db0fde11"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "SocketV1Controller.slice(bytes,uint256,uint256) (contracts/PerpHandler/SocketV1Controller.sol#113-185) uses assembly\n\t- INLINE ASM (contracts/PerpHandler/SocketV1Controller.sol#123-182)\n",
            "markdown": "[SocketV1Controller.slice(bytes,uint256,uint256)](contracts/PerpHandler/SocketV1Controller.sol#L113-L185) uses assembly\n\t- [INLINE ASM](contracts/PerpHandler/SocketV1Controller.sol#L123-L182)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 185
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4d89fd30a351974e947d88d3fbb1fd8deae24124ebe57e5038c65460290d2cc6"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "console._sendLogPayload(bytes) (node_modules/hardhat/console.sol#7-14) uses assembly\n\t- INLINE ASM (node_modules/hardhat/console.sol#10-13)\n",
            "markdown": "[console._sendLogPayload(bytes)](node_modules/hardhat/console.sol#L7-L14) uses assembly\n\t- [INLINE ASM](node_modules/hardhat/console.sol#L10-L13)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4fce53bf556206137adc405854ca078387d01aa0dda0d58dd8aa9c3798d849bd"
          }
        },
        {
          "ruleId": "3-0-boolean-equal",
          "message": {
            "text": "PerpPositionHandlerL2.openPosition(bool,uint256,uint24) (contracts/PerpL2/PerpPositionHandlerL2.sol#154-170) compares to a boolean constant:\n\t-require(bool,string)(perpPosition.isActive == false,ACTIVE_POSITION) (contracts/PerpL2/PerpPositionHandlerL2.sol#159)\n",
            "markdown": "[PerpPositionHandlerL2.openPosition(bool,uint256,uint24)](contracts/PerpL2/PerpPositionHandlerL2.sol#L154-L170) compares to a boolean constant:\n\t-[require(bool,string)(perpPosition.isActive == false,ACTIVE_POSITION)](contracts/PerpL2/PerpPositionHandlerL2.sol#L159)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 170
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3b717505a87910f57e786d2c08059bf6e97a43841dae3f9b4a949c1d91b8300"
          }
        },
        {
          "ruleId": "3-0-boolean-equal",
          "message": {
            "text": "Vault.isEmergencyMode() (contracts/Vault.sol#482-484) compares to a boolean constant:\n\t-require(bool,string)(emergencyMode == true,EMERGENCY_MODE) (contracts/Vault.sol#483)\n",
            "markdown": "[Vault.isEmergencyMode()](contracts/Vault.sol#L482-L484) compares to a boolean constant:\n\t-[require(bool,string)(emergencyMode == true,EMERGENCY_MODE)](contracts/Vault.sol#L483)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 482,
                  "endLine": 484
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92c7e93fe6b1f0fc61f284a88e6f1fe628fa3c8a41837ca94b7747352a4c6851"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity is used:\n\t- Version used: ['0.7.6', '>=0.4.0', '>=0.4.0<0.8.0', '>=0.5.0', '>=0.5.0<0.8.0', '>=0.6.0<0.8.0', '>=0.7.6<0.9.0', '^0.7.6']\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3)\n\t- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol#3)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IAccountBalance.sol#2)\n\t- v2 (node_modules/@perp/curie-contract/contracts/interface/IAccountBalance.sol#3)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IClearingHouse.sol#2)\n\t- v2 (node_modules/@perp/curie-contract/contracts/interface/IClearingHouse.sol#3)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IClearingHouseConfig.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IExchange.sol#2)\n\t- v2 (node_modules/@perp/curie-contract/contracts/interface/IExchange.sol#3)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IIndexPrice.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IVault.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/interface/IVirtualToken.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/AccountMarket.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/Funding.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/OpenOrder.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#2)\n\t- v2 (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#3)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/PerpSafeCast.sol#2)\n\t- 0.7.6 (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#2)\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)\n\t- >=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2)\n\t- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2)\n\t- >=0.5.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#2)\n\t- ^0.7.6 (contracts/PerpL2/OptimismL2Wrapper.sol#2)\n\t- ^0.7.6 (contracts/PerpL2/PerpPositionHandlerL2.sol#2)\n\t- ^0.7.6 (contracts/PerpL2/PerpV2Controller.sol#2)\n\t- v2 (contracts/PerpL2/PerpV2Controller.sol#3)\n\t- ^0.7.6 (contracts/PerpL2/SocketV1Controller.sol#2)\n\t- ABIEncoderV2 (contracts/PerpL2/SocketV1Controller.sol#3)\n\t- ^0.7.6 (contracts/PerpL2/interfaces/CrossDomainMessenger.interface.sol#2)\n\t- ABIEncoderV2 (contracts/PerpL2/interfaces/CrossDomainMessenger.interface.sol#3)\n\t- ^0.7.6 (contracts/PerpL2/interfaces/IERC20.sol#4)\n\t- >=0.7.6<0.9.0 (contracts/PerpL2/interfaces/IPositionHandler.sol#2)\n",
            "markdown": "Different versions of Solidity is used:\n\t- Version used: ['0.7.6', '>=0.4.0', '>=0.4.0<0.8.0', '>=0.5.0', '>=0.5.0<0.8.0', '>=0.6.0<0.8.0', '>=0.7.6<0.9.0', '^0.7.6']\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#L3)\n\t- [>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol#L3)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IAccountBalance.sol#L2)\n\t- [v2](node_modules/@perp/curie-contract/contracts/interface/IAccountBalance.sol#L3)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IClearingHouse.sol#L2)\n\t- [v2](node_modules/@perp/curie-contract/contracts/interface/IClearingHouse.sol#L3)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IClearingHouseConfig.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IExchange.sol#L2)\n\t- [v2](node_modules/@perp/curie-contract/contracts/interface/IExchange.sol#L3)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IIndexPrice.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IVault.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/interface/IVirtualToken.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/AccountMarket.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/Funding.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/OpenOrder.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L2)\n\t- [v2](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L3)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/PerpSafeCast.sol#L2)\n\t- [0.7.6](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L2)\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2)\n\t- [>=0.4.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L2)\n\t- [>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L2)\n\t- [>=0.5.0](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L2)\n\t- [^0.7.6](contracts/PerpL2/OptimismL2Wrapper.sol#L2)\n\t- [^0.7.6](contracts/PerpL2/PerpPositionHandlerL2.sol#L2)\n\t- [^0.7.6](contracts/PerpL2/PerpV2Controller.sol#L2)\n\t- [v2](contracts/PerpL2/PerpV2Controller.sol#L3)\n\t- [^0.7.6](contracts/PerpL2/SocketV1Controller.sol#L2)\n\t- [ABIEncoderV2](contracts/PerpL2/SocketV1Controller.sol#L3)\n\t- [^0.7.6](contracts/PerpL2/interfaces/CrossDomainMessenger.interface.sol#L2)\n\t- [ABIEncoderV2](contracts/PerpL2/interfaces/CrossDomainMessenger.interface.sol#L3)\n\t- [^0.7.6](contracts/PerpL2/interfaces/IERC20.sol#L4)\n\t- [>=0.7.6<0.9.0](contracts/PerpL2/interfaces/IPositionHandler.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "69720e4cee94cb124e81c90a8f4f1d4062ac488200ceebd02ff01f23f654f3a4"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity is used:\n\t- Version used: ['>=0.4.0', '>=0.4.22<0.9.0', '>=0.7.0<0.9.0', '>=0.7.6<0.9.0', '^0.8.0', '^0.8.1', '^0.8.4']\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#4)\n\t- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2)\n\t- ^0.8.4 (contracts/BaseTradeExecutor.sol#2)\n\t- ^0.8.4 (contracts/Batcher/Batcher.sol#2)\n\t- ^0.8.0 (contracts/Batcher/EIP712.sol#2)\n\t- ^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#2)\n\t- v2 (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#3)\n\t- ^0.8.0 (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#2)\n\t- v2 (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#3)\n\t- ^0.8.0 (contracts/ConvexExecutor/Harvester.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#2)\n\t- v2 (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#3)\n\t- ^0.8.0 (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexBooster.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexRewards.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#1)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IFraxConvexBooster.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IHarvester.sol#2)\n\t- ^0.8.4 (contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#2)\n\t- ^0.8.0 (contracts/ConvexExecutor/interfaces/IUniswapV3Router.sol#2)\n\t- ^0.8.0 (contracts/Migration/Migratooor.sol#2)\n\t- ^0.8.0 (contracts/Migration/interfaces/IBatcherOld.sol#3)\n\t- ^0.8.0 (contracts/Migration/interfaces/IHauler.sol#3)\n\t- >=0.7.0<0.9.0 (contracts/Migration/interfaces/IOldConvexTE.sol#3)\n\t- >=0.7.0<0.9.0 (contracts/Migration/interfaces/IOldPerpTEL2.sol#3)\n\t- ^0.8.0 (contracts/Migration/interfaces/IUSDC.sol#3)\n\t- ^0.8.0 (contracts/Migration/interfaces/IVaultOld.sol#3)\n\t- ^0.8.0 (contracts/PerpHandler/OptimismWrapper.sol#2)\n\t- ^0.8.0 (contracts/PerpHandler/PerpPositionHandler.sol#2)\n\t- ^0.8.0 (contracts/PerpHandler/PerpTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/PerpHandler/SocketV1Controller.sol#2)\n\t- ^0.8.0 (contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#2)\n\t- ABIEncoderV2 (contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#3)\n\t- >=0.7.6<0.9.0 (contracts/PerpL2/interfaces/IPositionHandler.sol#2)\n\t- ^0.8.0 (contracts/Vault.sol#2)\n\t- ^0.8.0 (contracts/mocks/MockAsyncTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/mocks/MockTradeExecutor.sol#2)\n\t- ^0.8.0 (contracts/mocks/WantERC20.sol#16)\n\t- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)\n\t- ^0.8.0 (interfaces/BasePositionHandler.sol#2)\n\t- ^0.8.0 (interfaces/IAggregatorV3.sol#2)\n\t- v2 (interfaces/IAggregatorV3.sol#3)\n\t- ^0.8.4 (interfaces/ITradeExecutor.sol#2)\n\t- ^0.8.0 (interfaces/IVault.sol#2)\n\t- ^0.8.0 (library/AddArrayLib.sol#2)\n\t- ^0.8.0 (library/Math.sol#4)\n",
            "markdown": "Different versions of Solidity is used:\n\t- Version used: ['>=0.4.0', '>=0.4.22<0.9.0', '>=0.7.0<0.9.0', '>=0.7.6<0.9.0', '^0.8.0', '^0.8.1', '^0.8.4']\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L4)\n\t- [>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2)\n\t- [^0.8.4](contracts/BaseTradeExecutor.sol#L2)\n\t- [^0.8.4](contracts/Batcher/Batcher.sol#L2)\n\t- [^0.8.0](contracts/Batcher/EIP712.sol#L2)\n\t- [^0.8.0](contracts/Batcher/interfaces/IBatcher.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L2)\n\t- [v2](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L3)\n\t- [^0.8.0](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L2)\n\t- [v2](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L3)\n\t- [^0.8.0](contracts/ConvexExecutor/Harvester.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L2)\n\t- [v2](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L3)\n\t- [^0.8.0](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IConvexBooster.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IConvexRewards.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L1)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IFraxConvexBooster.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IHarvester.sol#L2)\n\t- [^0.8.4](contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#L2)\n\t- [^0.8.0](contracts/ConvexExecutor/interfaces/IUniswapV3Router.sol#L2)\n\t- [^0.8.0](contracts/Migration/Migratooor.sol#L2)\n\t- [^0.8.0](contracts/Migration/interfaces/IBatcherOld.sol#L3)\n\t- [^0.8.0](contracts/Migration/interfaces/IHauler.sol#L3)\n\t- [>=0.7.0<0.9.0](contracts/Migration/interfaces/IOldConvexTE.sol#L3)\n\t- [>=0.7.0<0.9.0](contracts/Migration/interfaces/IOldPerpTEL2.sol#L3)\n\t- [^0.8.0](contracts/Migration/interfaces/IUSDC.sol#L3)\n\t- [^0.8.0](contracts/Migration/interfaces/IVaultOld.sol#L3)\n\t- [^0.8.0](contracts/PerpHandler/OptimismWrapper.sol#L2)\n\t- [^0.8.0](contracts/PerpHandler/PerpPositionHandler.sol#L2)\n\t- [^0.8.0](contracts/PerpHandler/PerpTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/PerpHandler/SocketV1Controller.sol#L2)\n\t- [^0.8.0](contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#L2)\n\t- [ABIEncoderV2](contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#L3)\n\t- [>=0.7.6<0.9.0](contracts/PerpL2/interfaces/IPositionHandler.sol#L2)\n\t- [^0.8.0](contracts/Vault.sol#L2)\n\t- [^0.8.0](contracts/mocks/MockAsyncTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/mocks/MockTradeExecutor.sol#L2)\n\t- [^0.8.0](contracts/mocks/WantERC20.sol#L16)\n\t- [>=0.4.22<0.9.0](node_modules/hardhat/console.sol#L2)\n\t- [^0.8.0](interfaces/BasePositionHandler.sol#L2)\n\t- [^0.8.0](interfaces/IAggregatorV3.sol#L2)\n\t- [v2](interfaces/IAggregatorV3.sol#L3)\n\t- [^0.8.4](interfaces/ITradeExecutor.sol#L2)\n\t- [^0.8.0](interfaces/IVault.sol#L2)\n\t- [^0.8.0](library/AddArrayLib.sol#L2)\n\t- [^0.8.0](library/Math.sol#L4)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "272912d3487ff4689ce4f12e7ff3b587a0f52811aa27f3d6e58b87f8ce656040"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "AddrArrayLib.getAllAddresses(AddrArrayLib.Addresses) (library/AddArrayLib.sol#83-89) is never used and should be removed\n",
            "markdown": "[AddrArrayLib.getAllAddresses(AddrArrayLib.Addresses)](library/AddArrayLib.sol#L83-L89) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/AddArrayLib.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "458965a304c09253ea8638ba84cd7bdf344570b8fa5bf38db286a1a15276b9a0"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BasePositionHandler._claimRewards(bytes) (interfaces/BasePositionHandler.sol#39) is never used and should be removed\n",
            "markdown": "[BasePositionHandler._claimRewards(bytes)](interfaces/BasePositionHandler.sol#L39) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0973d63b15e9d6126b324e6d23e966079950a3ba819ab70e97e8fb7f875446cd"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BasePositionHandler._closePosition(bytes) (interfaces/BasePositionHandler.sol#33) is never used and should be removed\n",
            "markdown": "[BasePositionHandler._closePosition(bytes)](interfaces/BasePositionHandler.sol#L33) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c5ef401f89da272577d47c0e929b8625c5a89ef8a9fa2ec59a133842b50db07"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BasePositionHandler._deposit(bytes) (interfaces/BasePositionHandler.sol#35) is never used and should be removed\n",
            "markdown": "[BasePositionHandler._deposit(bytes)](interfaces/BasePositionHandler.sol#L35) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef385555433ea5411e2e377e48e3920f4bbf1dc8c011c0568e70ad85b5efcc0a"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BasePositionHandler._openPosition(bytes) (interfaces/BasePositionHandler.sol#31) is never used and should be removed\n",
            "markdown": "[BasePositionHandler._openPosition(bytes)](interfaces/BasePositionHandler.sol#L31) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6420c273e664ac0e0d961186edc17763eab717090ec064e77104dc8c3f8f234"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BasePositionHandler._withdraw(bytes) (interfaces/BasePositionHandler.sol#37) is never used and should be removed\n",
            "markdown": "[BasePositionHandler._withdraw(bytes)](interfaces/BasePositionHandler.sol#L37) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a13d4887d2940a2c1f67863b59dd488114c488eac1453600580715e6dd264a4"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BaseTradeExecutor._confirmDeposit() (contracts/BaseTradeExecutor.sol#89) is never used and should be removed\n",
            "markdown": "[BaseTradeExecutor._confirmDeposit()](contracts/BaseTradeExecutor.sol#L89) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef8636d3c570272129e8d8c18760fbfb422ac7803114df3d457f8455542b8555"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BaseTradeExecutor._confirmWithdraw() (contracts/BaseTradeExecutor.sol#93) is never used and should be removed\n",
            "markdown": "[BaseTradeExecutor._confirmWithdraw()](contracts/BaseTradeExecutor.sol#L93) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97bbe92fe66bf79d4edbca3e15a9dc465c0def8bca34bbca45e1a28e2bf4a8c7"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BaseTradeExecutor._initateDeposit(bytes) (contracts/BaseTradeExecutor.sol#87) is never used and should be removed\n",
            "markdown": "[BaseTradeExecutor._initateDeposit(bytes)](contracts/BaseTradeExecutor.sol#L87) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "146f558a4fc69430c9eb1a267c2e06cb505e7fb4ec941a56e9908b8563f18905"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "BaseTradeExecutor._initiateWithdraw(bytes) (contracts/BaseTradeExecutor.sol#91) is never used and should be removed\n",
            "markdown": "[BaseTradeExecutor._initiateWithdraw(bytes)](contracts/BaseTradeExecutor.sol#L91) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "447d881ae9ced4d8e5ed4a0149f4ba8d9055c439b93b9083b1a4bbb261225524"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "FraxConvexPositionHandler._USDCValueInLpToken(uint256) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#395-403) is never used and should be removed\n",
            "markdown": "[FraxConvexPositionHandler._USDCValueInLpToken(uint256)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L395-L403) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 395,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f280595114b01c4fe499685091efaefa2e2c985ae8a9a582f39b0c6215670b77"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "Math.max(uint256,uint256) (library/Math.sol#13-15) is never used and should be removed\n",
            "markdown": "[Math.max(uint256,uint256)](library/Math.sol#L13-L15) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/Math.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a3177ea9490e6f46964b433de103f9dcaa115ecb608b38006eb2eca3751a08e"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "OptimismWrapper.messageSender() (contracts/PerpHandler/OptimismWrapper.sol#15-20) is never used and should be removed\n",
            "markdown": "[OptimismWrapper.messageSender()](contracts/PerpHandler/OptimismWrapper.sol#L15-L20) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "246cc2796550a57741bf7c8b906e3f27757e0d77d14e73da5d9ea61b8c92dd18"
          }
        },
        {
          "ruleId": "3-1-dead-code",
          "message": {
            "text": "PerpPositionHandler._claimRewards(bytes) (contracts/PerpHandler/PerpPositionHandler.sol#224-226) is never used and should be removed\n",
            "markdown": "[PerpPositionHandler._claimRewards(bytes)](contracts/PerpHandler/PerpPositionHandler.sol#L224-L226) is never used and should be removed\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 224,
                  "endLine": 226
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8816f342c6232268e5e75a3ef63c96793ce4b1e92f70fafafa6d25517571d56c"
          }
        },
        {
          "ruleId": "3-0-function-init-state",
          "message": {
            "text": "OptimismL2Wrapper.optimismMessenger (contracts/PerpL2/OptimismL2Wrapper.sol#12-13) is set pre-construction with a non-constant function or state variable:\n\t- ICrossDomainMessenger(L2CrossDomainMessenger)\n",
            "markdown": "[OptimismL2Wrapper.optimismMessenger](contracts/PerpL2/OptimismL2Wrapper.sol#L12-L13) is set pre-construction with a non-constant function or state variable:\n\t- ICrossDomainMessenger(L2CrossDomainMessenger)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/OptimismL2Wrapper.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 13
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e07b810b4afa79992ab3f858caeb761894e5609798aa4573323d7f5cc542bbff"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurvePool.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b22d358bbf93356d08d502d6a28cae10ca68cfda58bf99d350b3928eb77ed05a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (contracts/ConvexExecutor/interfaces/IUniswapV3Factory.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](contracts/ConvexExecutor/interfaces/IUniswapV3Factory.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV3Factory.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7c240945325535aa7b089f88fd71f5ce634c94070bfab749a627c796360a73d3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "026680d8e0de69407e19bb19060bf9c0bd659cb7a63f0c28fc00d2c9973c83f9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f64de14266d3aa756594c371c42e2818f27903f1504bef9c19ebff4dddceef88"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.6.0<0.8.0](node_modules/@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31746ad1e72d15152642cd4763444cea856666898f9745b313b0d520d9aa4fac"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.4.0](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9889926a079f0f392adf3be1739b03aa99c6b8882f64ec6ff917ee4d1ba5400"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "22490295a56630c306ab8ef1fe9580cecce4c07f7be4455cc215920befbc9e5a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0<0.8.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.5.0<0.8.0](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f2e1dea0793314d6992edc014bd27cde9f2dc7ea9a43263cca722714c2fc5d5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a7595777c5936b74f434706f398f4b138513289679cf0b9fdf6d082a21d4687"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.6<0.9.0 (contracts/PerpL2/interfaces/IPositionHandler.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.7.6<0.9.0](contracts/PerpL2/interfaces/IPositionHandler.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/interfaces/IPositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4ac67931f4d84c1d1e1eb8c00a8cc11c304d563174517290793aced49ac1dbb1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c7efd54307eabb7ac3c63c6c2fb4704970b1d57998b2d3eeb1d0575e29be78f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9d8a804f21d9bda1c90bbe4177baae5a4bfe61bc990c3ffec1a5cb063264dce7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "851a3cc70cf5a0e84cea60ba82f675bc668a61dfc08f0b82199206a5fbafb3b4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ac7c62454421eba41ad4bc7f77cc11d95ff2e283def53e5f32dd991137af888"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "53b091a2d54318260dcd275f6a8849ebed779d7a7d13d1b2ce91930c6225f19b"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e9d43b95f7dace4a9f685e655540c00bca0d928920120f4c2becf8264ae6461"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "13dabe172ccfefdebf673e8746caddd1d47e6fb6b38a1d8376db205df0468d9d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5906f1667ddb1546c744db1c5ec0714512ac2139194ac59714f6577a5008fe49"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21c670e40e414a2f849413afbbdb25adb81dae6585c4f38fc83730c17377e60f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Counters.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Counters.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "833c66ce7f52d0f775c7a2eefef742d581ed1692ac758436e22f77ceeb7c72be"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "39bb6de244e9d295e9aa6c566b0b6e8f01ba481f4efc9e16952394697f339857"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "06845140c4de83a67b7ea1fa3eefa5eaca6813a74e80720101c31e3c3af14ffc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "91ec726259a2ca1d633bb57252a1e65b2e789a4ab0908fe49bf034623240d5a6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Batcher/EIP712.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Batcher/EIP712.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/EIP712.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e588dee5d5f1ef5a82d3138cdf20eb70d63805355f6b9fbe1b78d7ff0509e2ac"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Batcher/interfaces/IBatcher.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Batcher/interfaces/IBatcher.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/interfaces/IBatcher.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7ec0260e0b8b5fe682330dd878188215b4e9b3ef8842bb74ad28efcf6780554"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "144c24e69a884cbf7aaddcce1e30e993dfcdc03908ca080aacc4eeb4164b18d3"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "602e17ae27fe0ce401b49606a898b8b41a6812fe6c543e1f46c4b2c34609f8db"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "beecfa288631241dffa3d1545fea22586e7e5f4af6c5512dcc9133c1019a03da"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2cdf038c6f43ff992bec6f0d06c624a2f87ed711148194dafcee6e7e4984a3bb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/Harvester.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/Harvester.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c595f7e59b6992f3be6b612ed542ded0f221120f18f38151c15240821b0626d4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b0e48102fda3edd01051ab930080e688782ee65ce9a4dc24d17bed5ca2c77f6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "371a7df54b7642c07badc401944ac72a102053eb06c179daf36e25ec43404db8"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexBooster.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IConvexBooster.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexBooster.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "54588a4308bf8a434b7def18a072bf717309220bfda97dfef16f97229a119787"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexRewards.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IConvexRewards.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexRewards.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b5fcf0514c384dded25d86d7fbebb2b2080f5a87b492ea01e5406e930dc9a3df"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "919766fe344bca44f2109a1a02346e6fbe7e7f2a473b4decf226feb0164e78dc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff15935c7678fc62cad537152dfe356012fd16604591311a3c251febc91b4c57"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73573db9f680fc16090668583b778bdfc8566b9b206fc08bbb371cd2842710be"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d934f13228d319534c6604492b3e0f35d36dde7a62f7f91530de52b3f8af2c6e"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3375b0dde94910f7e1876f13b508b1ef8a555fd529e38d42832eed18e745778"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e82511ff071b4d7127e73892947df2b46de3984ffc0fa6db5cd06a83b9c32e0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#1) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L1) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2d3827945742189c1035bd9bb30a7bef265d17d7303868c6da4d03c62072ba47"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IFraxConvexBooster.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IFraxConvexBooster.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IFraxConvexBooster.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca0708a96201c10b7f1dac5d484bd4fb23c409411c28cbe11fa2f330efe9ef4a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IHarvester.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IHarvester.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IHarvester.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b31f45153483d4b78529b1fd91999919c4d0a68084b1c7cc13aae342f4c574fc"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/ConvexExecutor/interfaces/IUniswapV3Router.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/ConvexExecutor/interfaces/IUniswapV3Router.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV3Router.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1780d77c17424123812059b0b8cd6047f8a5420d21b28dba67dc76d6ad5afd8d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Migration/Migratooor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Migration/Migratooor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd36f62d907e5eab4088e3b0f67e00cba01dc7f1c80ac43a1c1802274672868f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Migration/interfaces/IBatcherOld.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Migration/interfaces/IBatcherOld.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IBatcherOld.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a0038b6aa8016dcf4e51c078e80833c2bd8fe5e9e23ee4f6a06c8270a2d67ceb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Migration/interfaces/IHauler.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Migration/interfaces/IHauler.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IHauler.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "869a269394f7d0c5b2c3200266c17846dbcbaccc94c46440a60aa55b80524fc6"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.0<0.9.0 (contracts/Migration/interfaces/IOldConvexTE.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.7.0<0.9.0](contracts/Migration/interfaces/IOldConvexTE.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldConvexTE.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "62654e8bc75b1895a9999c0a4e453d71cff9039321e0565a573387902abcc326"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.7.0<0.9.0 (contracts/Migration/interfaces/IOldPerpTEL2.sol#3) is too complex\n",
            "markdown": "Pragma version[>=0.7.0<0.9.0](contracts/Migration/interfaces/IOldPerpTEL2.sol#L3) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldPerpTEL2.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b33d7a14a05a4e3abb389eb29037a31c9f803baa31596020a10067d54d87730a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Migration/interfaces/IUSDC.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Migration/interfaces/IUSDC.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2cd5b7fac2e22ac02f544e80e549837fb61cb7196a2403158349eed885d2da7d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Migration/interfaces/IVaultOld.sol#3) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Migration/interfaces/IVaultOld.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IVaultOld.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "803a6fca124a765840bc00569580773f82f77ce6f582069c6756acc8da8a3357"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/PerpHandler/OptimismWrapper.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/PerpHandler/OptimismWrapper.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99462a4e549e1c29a09561b36a21aa596192e0a3e2700c4fe68790d43a4d21a0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/PerpHandler/PerpPositionHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/PerpHandler/PerpPositionHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "acaa3609e202fb5e6f511ec44b75d2bc08f2f9817e06e29c967ff7db96d6a1e4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/PerpHandler/PerpTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/PerpHandler/PerpTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66ccfc40b0dcedcce42dc0b842aaba55fd73f885297cd17a70af71b1c7c3cd37"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/PerpHandler/SocketV1Controller.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/PerpHandler/SocketV1Controller.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8b18c980655c127fd1971fd59e7537c14204f78aa0069dad2c07612e318f1ad"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/interfaces/CrossDomainMessenger.interface.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a41b220a6b98819ab3a6a1e1137eb80eb77edff00d0c3151d4d4a1bd9d103d15"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/Vault.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/Vault.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31cba35671b6664fb9322be101e5f3ec6ac46ee19a6b3623ffd9b5ff16f48e7d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/mocks/MockAsyncTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/mocks/MockAsyncTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "03e5d2039fbd221b5c143d987328581d27f3933a518011eb39d43dd26ba40095"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/mocks/MockTradeExecutor.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/mocks/MockTradeExecutor.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockTradeExecutor.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d917098061887e3408e044ae508d4602a91c9343e3a8506040ccd3f460d358cb"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (contracts/mocks/WantERC20.sol#16) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](contracts/mocks/WantERC20.sol#L16) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/WantERC20.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47703ea23786ae9867051d077e26d7819552120e56defe20824de5fa045e0b20"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.22<0.9.0](node_modules/hardhat/console.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f30cc00866ad4644a058066a785a40fc85920295b639d57c66467131996ae1a5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (interfaces/BasePositionHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](interfaces/BasePositionHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/BasePositionHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21d4b06ec34afe2fa45bf59ea61f686f07eda3ed106d57af187e7ca011754ad5"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (interfaces/IAggregatorV3.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](interfaces/IAggregatorV3.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/IAggregatorV3.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6d6bc6d60b648b1b70d3466822807c944bbca5f72f044ca8e57fdc1049ca835"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (interfaces/IVault.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](interfaces/IVault.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "interfaces/IVault.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "494a633125d4b6f05250cf22611b9cc69ccb4cb1b0af71586536e1d78ea8f598"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (library/AddArrayLib.sol#2) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](library/AddArrayLib.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/AddArrayLib.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2131f0842a354bc6eba571a5939b5ebff6683571adb76956530d90ef686857a2"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (library/Math.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](library/Math.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/Math.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b801156acd01cc0d8e322fd81cef1b84e41715b5478941aa1553ffbcab34be25"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes) (contracts/PerpL2/SocketV1Controller.sol#70-88):\n\t- (success) = socketRegistry.call(data) (contracts/PerpL2/SocketV1Controller.sol#86)\n",
            "markdown": "Low level call in [SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes)](contracts/PerpL2/SocketV1Controller.sol#L70-L88):\n\t- [(success) = socketRegistry.call(data)](contracts/PerpL2/SocketV1Controller.sol#L86)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e9f917ca4ba4275a55acb028d16da254418d94774e26cabe9cd00df22a1d3b07"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L60-L65):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L63)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a45709b07c12b3e52a59e9b801f6f63b73382e5cec54b85cd8172ce2bc9d44b3"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L128-L139):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L137)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 139
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b673e3527018708f76871ed62a1879b9035819e49d368aba92f27343cf591ab2"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L157-L166):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L164)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c706e8e01049568550afd32aaf56e3f04f269e818d404e36dde611996851ece7"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L184-L193):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L191)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c944733a5fa81935f97104b39ea4f867f663e8d05b23c0ea00802aa0c991e46c"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes) (contracts/PerpHandler/SocketV1Controller.sol#87-105):\n\t- (success) = socketRegistry.call(data) (contracts/PerpHandler/SocketV1Controller.sol#103)\n",
            "markdown": "Low level call in [SocketV1Controller.sendTokens(address,address,address,address,uint256,uint256,bytes)](contracts/PerpHandler/SocketV1Controller.sol#L87-L105):\n\t- [(success) = socketRegistry.call(data)](contracts/PerpHandler/SocketV1Controller.sol#L103)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7855f508a9608fea361ae000a6258154f52e8ebeb81b5375481f548727af3d7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.exchange(int128,int128,uint256,uint256,address)._min_dy (contracts/ConvexExecutor/interfaces/ICurvePool.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.exchange(int128,int128,uint256,uint256,address)._min_dy](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ffad7ccea26e04172dbfea123309855b10d5ecd625b0ce0a81d01284ef1548f4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#13-17) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L13-L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "18b967e50bdac787642a64437c8ac4c11a7026d3f9d545e210d9ae6558427192"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3531c0401dfa4d1fa11cd395facdbd0fcc39f90629fa5e9b60e1352d26a18191"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0ada9c8d2520c47b07e992d8e97373df730ee028d5c93704a26ab0ac54771d0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.add_liquidity(uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19-21) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.add_liquidity(uint256[4],uint256)](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L19-L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "68610716d701bfb39d810e609fa7a3f4c4075359c860b6c8c36dc49d0321c5b4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurvePool.sol#19) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.add_liquidity(uint256[4],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3b8fbef7c91224d6b1945ded5fc6e35be35a2ce7c53cb60759dd36f01a2b877"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#23-27) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.get_dy(int128,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L23-L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cb12658f252ab437a421ea7bd8caa1b1fcf9dc157714bbb463227250809ab47"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.calc_token_amount(uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurvePool.sol#29-32) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.calc_token_amount(uint256[4],bool)](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L29-L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ce240964719f3dddfc321a1533a57181303c8a36f1582cfc2ddc7f1a3e7b4347"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurvePool.calc_token_amount(uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurvePool.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [ICurvePool.calc_token_amount(uint256[4],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bd764f6bc0b497db52ed750f9caf4d59d608c193873333f30a41a2e27ee95498"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurvePool.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurvePool.sol#34) is not in mixedCase\n",
            "markdown": "Function [ICurvePool.get_virtual_price()](contracts/ConvexExecutor/interfaces/ICurvePool.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurvePool.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2218cfb1ac3f56fed84ea472669532d02a547a85b62e6da78979c0764f6e5f4c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IVault.deposit(address,uint256).amountX10_D (node_modules/@perp/curie-contract/contracts/interface/IVault.sol#12) is not in mixedCase\n",
            "markdown": "Parameter [IVault.deposit(address,uint256).amountX10_D](node_modules/@perp/curie-contract/contracts/interface/IVault.sol#L12) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/interface/IVault.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "00636c78e82bc2705e59d2412c6911e452fd9206982b8734d940808686651cd0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IVault.withdraw(address,uint256).amountX10_D (node_modules/@perp/curie-contract/contracts/interface/IVault.sol#17) is not in mixedCase\n",
            "markdown": "Parameter [IVault.withdraw(address,uint256).amountX10_D](node_modules/@perp/curie-contract/contracts/interface/IVault.sol#L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/interface/IVault.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97df13041da26500b340720bca5c3beb9f7b1ffcc100bfb44ade55f224b9fc6e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function PerpMath.formatX10_18ToX96(uint256) (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#20-22) is not in mixedCase\n",
            "markdown": "Function [PerpMath.formatX10_18ToX96(uint256)](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L20-L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "758ebad8fbbfdf13bf81e45941cc2fe5d778da0d38230375bfaed31bb627a4ca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpMath.formatX10_18ToX96(uint256).valueX10_18 (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#20) is not in mixedCase\n",
            "markdown": "Parameter [PerpMath.formatX10_18ToX96(uint256).valueX10_18](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9e54edb8a66a881af3cd0c8c452b84d2aad1cd8ba23b792e352254178e46c6b8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function PerpMath.formatX96ToX10_18(uint256) (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#24-26) is not in mixedCase\n",
            "markdown": "Function [PerpMath.formatX96ToX10_18(uint256)](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L24-L26) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4c21090f41761179df1fb3a940577822fd5eea16ebcadbd2c194b1d495575ef"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function PerpMath.divBy10_18(int256) (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#58-61) is not in mixedCase\n",
            "markdown": "Function [PerpMath.divBy10_18(int256)](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L58-L61) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e1f167022f6a8df1ab87d8a3c37b87a9ee8c3920e8fb6896f568c3537aad8269"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function PerpMath.divBy10_18(uint256) (node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#63-66) is not in mixedCase\n",
            "markdown": "Function [PerpMath.divBy10_18(uint256)](node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol#L63-L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpMath.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "327f87d5a641acfc4bd7a43a0d02fe44cb500a0f6eb48cf96ce096ff41ddb5b7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable OptimismL2Wrapper.L2CrossDomainMessenger (contracts/PerpL2/OptimismL2Wrapper.sol#9-10) is not in mixedCase\n",
            "markdown": "Variable [OptimismL2Wrapper.L2CrossDomainMessenger](contracts/PerpL2/OptimismL2Wrapper.sol#L9-L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/OptimismL2Wrapper.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d6654726700821755e60384d972be8eaf42ae31a84c33054b6296b153a0fe3b3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.withdraw(uint256,address,address,bytes)._socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#126) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.withdraw(uint256,address,address,bytes)._socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L126) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "182d8f01ca9a86d01d03575b7b700765acb1cf7e53e1806590fca406d82b3d90"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.sweep(address)._token (contracts/PerpL2/PerpPositionHandlerL2.sol#188) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.sweep(address)._token](contracts/PerpL2/PerpPositionHandlerL2.sol#L188) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "23f832382371446e7a39061b8943e86283d31ddade438cd582408ae5f13e9a6d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.setReferralCode(bytes32)._referralCode (contracts/PerpL2/PerpPositionHandlerL2.sol#197) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.setReferralCode(bytes32)._referralCode](contracts/PerpL2/PerpPositionHandlerL2.sol#L197) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 197
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c943607a4425544ec4507903a4f70e9722d9984d1d1e167ae16dd34a596d334"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.setSocketRegistry(address)._socketRegistry (contracts/PerpL2/PerpPositionHandlerL2.sol#204) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.setSocketRegistry(address)._socketRegistry](contracts/PerpL2/PerpPositionHandlerL2.sol#L204) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "88f4229d31fce0f26800c9cb84f544186cce0328abdd444298763874ca19a1d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.setKeeper(address)._keeper (contracts/PerpL2/PerpPositionHandlerL2.sol#211) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.setKeeper(address)._keeper](contracts/PerpL2/PerpPositionHandlerL2.sol#L211) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e33216d2a41b98348fb414ac2bd38d459e74c1e4c7ee73aa16bf0ef722cf4ebe"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpPositionHandlerL2.setGovernance(address)._newGovernance (contracts/PerpL2/PerpPositionHandlerL2.sol#218) is not in mixedCase\n",
            "markdown": "Parameter [PerpPositionHandlerL2.setGovernance(address)._newGovernance](contracts/PerpL2/PerpPositionHandlerL2.sol#L218) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "26df7b4b08a785566df217145673f41ada2a9b17891f84cc449cd8c1ee81798a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpV2Controller.approveQuoteToken(IERC20,uint256)._value (contracts/PerpL2/PerpV2Controller.sol#161) is not in mixedCase\n",
            "markdown": "Parameter [PerpV2Controller.approveQuoteToken(IERC20,uint256)._value](contracts/PerpL2/PerpV2Controller.sol#L161) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd07e0803e1fc18deb2cde14aafb8f23d8bef4d42937e344f3be5c3aff090aad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.decodeSocketRegistryCalldata(bytes)._data (contracts/PerpL2/SocketV1Controller.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.decodeSocketRegistryCalldata(bytes)._data](contracts/PerpL2/SocketV1Controller.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d2ca58a2109046817edeae2f6a99846a96ba08815ca7b897d9c4f4d58d4f1333"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._data (contracts/PerpL2/SocketV1Controller.sol#43) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._data](contracts/PerpL2/SocketV1Controller.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d55015c7e82ed893b3e7ea728ff330e612fbcd33f3c9f23a4e9131020c025c8e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._chainId (contracts/PerpL2/SocketV1Controller.sol#44) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._chainId](contracts/PerpL2/SocketV1Controller.sol#L44) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dec5e6f8d3fa3fb9c68d229d403b31b934f58e782add4291bee40046ecc5fea9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._inputToken (contracts/PerpL2/SocketV1Controller.sol#45) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._inputToken](contracts/PerpL2/SocketV1Controller.sol#L45) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "396cec7818115b66bbf4ae95aba7a6d91f897009d7e14ea4c7520872feee64ab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._receiverAddress (contracts/PerpL2/SocketV1Controller.sol#46) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.verifySocketCalldata(bytes,uint256,address,address)._receiverAddress](contracts/PerpL2/SocketV1Controller.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58542c8f1056910b3476a4312d22a66504a7cae76862abf0d7090828a1c9be30"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#81-83) is not in mixedCase\n",
            "markdown": "Function [ERC20Permit.DOMAIN_SEPARATOR()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L81-L83) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae3f36aabe9ce571b2d0bac868aa8ddd745117bd041ef8300b9798601ba580ca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is not in mixedCase\n",
            "markdown": "Variable [ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "990853bbc0fd69516fdff053b807fb18ef8bb77731b845eb103d0c55cb82e94f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase\n",
            "markdown": "Function [IERC20Permit.DOMAIN_SEPARATOR()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a77c79a6cf40e2f151723e49ba63d30100a56d0f72688e58cdf4a550a6ff843"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#31) is not in mixedCase\n",
            "markdown": "Variable [EIP712._CACHED_DOMAIN_SEPARATOR](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f27ba4adb32b59400d073508894d8fb5ef55f3fccd5dab06bbf2cf9e1039544c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#32) is not in mixedCase\n",
            "markdown": "Variable [EIP712._CACHED_CHAIN_ID](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a97e63161ef623acbdd63f7c538558da3533514f45901fc0f6063906a6894e7a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._CACHED_THIS (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#33) is not in mixedCase\n",
            "markdown": "Variable [EIP712._CACHED_THIS](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L33) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b510e0c839539a1d34ab204af0ce868c8f93613e56cf050b6107c0d1bef0727"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#35) is not in mixedCase\n",
            "markdown": "Variable [EIP712._HASHED_NAME](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L35) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d95962ad9105e420535beef6f8adb2aef63294fd7b915e33fcc542c62ef06551"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#36) is not in mixedCase\n",
            "markdown": "Variable [EIP712._HASHED_VERSION](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa2d3018dd91feb3af39c2059f0ca8ab593b4673bb691dcf3117bd6db96f57b9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#37) is not in mixedCase\n",
            "markdown": "Variable [EIP712._TYPE_HASH](node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6be82984523d5470fd96feaf305daa098dfccddbff02f47c7369a681372e36e6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter BaseTradeExecutor.sweep(address)._token (contracts/BaseTradeExecutor.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [BaseTradeExecutor.sweep(address)._token](contracts/BaseTradeExecutor.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dfaaa5c39c0d9a2e1c8ce7db2e49a113005b0a8fde4dce94c5f5883f9284a6fb"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter BaseTradeExecutor.initiateDeposit(bytes)._data (contracts/BaseTradeExecutor.sol#61) is not in mixedCase\n",
            "markdown": "Parameter [BaseTradeExecutor.initiateDeposit(bytes)._data](contracts/BaseTradeExecutor.sol#L61) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9eeb2e40c851bac59cf2a31dfb2092b93383226249f9a7107d4ddbe467961222"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter BaseTradeExecutor.initiateWithdraw(bytes)._data (contracts/BaseTradeExecutor.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [BaseTradeExecutor.initiateWithdraw(bytes)._data](contracts/BaseTradeExecutor.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ef26dc334f5470d67bf984ebc31f81057177ec8f187b0f02a616092f36c909a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Batcher.sweep(address)._token (contracts/Batcher/Batcher.sol#413) is not in mixedCase\n",
            "markdown": "Parameter [Batcher.sweep(address)._token](contracts/Batcher/Batcher.sol#L413) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 413
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "680c1f775a52618a95e3ab6357ea59af10bb25cc4b0cf0035e24019547e66554"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.setSlippage(uint256)._slippage (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#62) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.setSlippage(uint256)._slippage](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L62) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef89e10c981c873f944945ab4b4a373c86ac7d7088293632a22a4b3cb15a1a59"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#71) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L71) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e450d7b640fbb25289e2555724278a98420bbbd4a1d6972e79b5dd004bf81a78"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.setStakingPeriod(uint256)._stakingPeriodSecs (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#82) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.setStakingPeriod(uint256)._stakingPeriodSecs](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L82) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "da8c31bc093fa950862ec307c8d7cb06a214694381143e96e4ee9735fc4d77b1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.setHandler(address)._harvester (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#93) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.setHandler(address)._harvester](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L93) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d894e39630ee1b7692fa3ef88e77a4943b9562d151e4cbe326a4ea9a3ed02062"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.openPosition(bytes)._data (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#135) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.openPosition(bytes)._data](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L135) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ff61d907e269a0ac2ec9dab91ec1ef397c8bc072838dfb3aa67a8bd533788b5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.closePosition(bytes)._data (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#142) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.closePosition(bytes)._data](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L142) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c0b2b26681782fc5ae3a3ffe8f8ddcebd8e8d2e9421223ce20883e16c0a31c3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexFraxPoolTradeExecutor.claimRewards(bytes)._data (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#156) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexFraxPoolTradeExecutor.claimRewards(bytes)._data](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L156) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "36854b9c92cf2f646eda08488532a0097187b96802d7c5461fc95bc83f670db6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function FraxConvexPositionHandler._USDCValueInLpToken(uint256) (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#395-403) is not in mixedCase\n",
            "markdown": "Function [FraxConvexPositionHandler._USDCValueInLpToken(uint256)](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L395-L403) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 395,
                  "endLine": 403
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1710895760c3ff12c0b3ebea364f909348afce5bdc758aebc930357f20a87a83"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter FraxConvexPositionHandler._USDCValueInLpToken(uint256)._value (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#395) is not in mixedCase\n",
            "markdown": "Parameter [FraxConvexPositionHandler._USDCValueInLpToken(uint256)._value](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L395) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 395,
                  "endLine": 395
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d0c5db0d05901a9965e54ae09ba981d21cfc160ca7abb4213e3c431e759d63d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable FraxConvexPositionHandler.MAX_BPS (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#44) is not in mixedCase\n",
            "markdown": "Variable [FraxConvexPositionHandler.MAX_BPS](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L44) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca304f1447da992b2df5877fc67d82e9dfda224abaa06879fe2afe8d32d6530d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant FraxConvexPositionHandler.fraxPool (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#77-78) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [FraxConvexPositionHandler.fraxPool](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L77-L78) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b76134cdae29a125335c6d515195afb71dfc335c30fd9f5853d69fa5780f0c41"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant FraxConvexPositionHandler.fraxConvexBooster (contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#80-81) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [FraxConvexPositionHandler.fraxConvexBooster](contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol#L80-L81) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b254d02b0e4ac570094b9449ad1b66b3d1ee9859a5f21148df79c71fc4325d13"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.setSlippage(uint256)._slippage (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.setSlippage(uint256)._slippage](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d91243d3fb0ea697e674795212ec7731302fdddac254ab21705cb164bc84dfaf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#63) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L63) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27216a72f1b8fa0db5abc6d085b08771b9cb0223c4625ae31b780de42af0a940"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.setHandler(address)._harvester (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#73) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.setHandler(address)._harvester](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L73) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b84637ef9c1dcb0a1ffb79aa23af2c27680667f01cfc9d6a09f0e9fa402af198"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.openPosition(bytes)._data (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#115) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.openPosition(bytes)._data](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L115) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "479f70ee46827dea402c7e388cdff392417ec780b549a3b213732ca0eaccb9d0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.closePosition(bytes)._data (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#122) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.closePosition(bytes)._data](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L122) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "73573d3f62a8b176cc53759fe01588ba183dea812245bfbbc772c05d2eba136c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexFraxPoolTradeExecutor.claimRewards(bytes)._data (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#136) is not in mixedCase\n",
            "markdown": "Parameter [ConvexFraxPoolTradeExecutor.claimRewards(bytes)._data](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L136) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "138b6ec3cd635960ae321dce538fd89ec9b262b758426d32371c87a7e6559801"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ConvexPositionHandler._USDCValueInLpToken(uint256) (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#454-462) is not in mixedCase\n",
            "markdown": "Function [ConvexPositionHandler._USDCValueInLpToken(uint256)](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L454-L462) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 454,
                  "endLine": 462
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "946a1993c49ecb45567654b8a89801732202190e8b08c541ce4116f04e6e9f6c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexPositionHandler._USDCValueInLpToken(uint256)._value (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#454) is not in mixedCase\n",
            "markdown": "Parameter [ConvexPositionHandler._USDCValueInLpToken(uint256)._value](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L454) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 454,
                  "endLine": 454
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d10d59e6475578c18d3f7efc9e27060450f70cffcd2753c36ca94678bbcbdf00"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ConvexPositionHandler.MAX_BPS (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#43) is not in mixedCase\n",
            "markdown": "Variable [ConvexPositionHandler.MAX_BPS](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52f357fb3a18391b2c489d3fb1144da272ec2d43f9e2d5055831235ccb60cbde"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ConvexPositionHandler.baseRewardPool (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#72-73) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ConvexPositionHandler.baseRewardPool](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L72-L73) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f3af726718aca2cb19755b091639e0f2d122825ad03a6c3eac22cd83e1071ab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ConvexPositionHandler.fraxPool (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#75-76) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ConvexPositionHandler.fraxPool](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L75-L76) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8c8936d16af778c6b803de0c096f83d12055c34d13113d11c678b308679c5791"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ConvexPositionHandler.convexBooster (contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#78-79) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ConvexPositionHandler.convexBooster](contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol#L78-L79) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5304b91c6537271d22e6d91d1ffc7656350f1363d9a5425e3e60c431ffb6f1e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Harvester.setSlippage(uint256)._slippage (contracts/ConvexExecutor/Harvester.sol#152) is not in mixedCase\n",
            "markdown": "Parameter [Harvester.setSlippage(uint256)._slippage](contracts/ConvexExecutor/Harvester.sol#L152) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "077209801c095d9030275c782a80b132a7e641f239ee8c0de0305c033071792d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Harvester.sweep(address)._token (contracts/ConvexExecutor/Harvester.sol#164) is not in mixedCase\n",
            "markdown": "Parameter [Harvester.sweep(address)._token](contracts/ConvexExecutor/Harvester.sol#L164) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2bafdbed869ecee96d35bb7dd44f72026dc267d91af46d080ce248e6bc7b02de"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.crv (contracts/ConvexExecutor/Harvester.sol#50-51) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.crv](contracts/ConvexExecutor/Harvester.sol#L50-L51) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fdd6856a12162e125de647e616eb0269cfc7c664e971c99dc9bd10a644a024d3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.cvx (contracts/ConvexExecutor/Harvester.sol#53-54) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.cvx](contracts/ConvexExecutor/Harvester.sol#L53-L54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f30900cf5ca39ca331f012960ec023f5ac32417b3c06923da495c209bca9a1c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.snx (contracts/ConvexExecutor/Harvester.sol#56-57) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.snx](contracts/ConvexExecutor/Harvester.sol#L56-L57) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1930c90158b06b745d1b5ec10eb4bf5c620ec437c337e387e0364037bc526a97"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.fxs (contracts/ConvexExecutor/Harvester.sol#59-60) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.fxs](contracts/ConvexExecutor/Harvester.sol#L59-L60) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "674f1d62feb127aab372fadea3ef14171e8a45a6cd066b0fd008de71ee74029b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester._3crv (contracts/ConvexExecutor/Harvester.sol#62-63) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester._3crv](contracts/ConvexExecutor/Harvester.sol#L62-L63) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f003ddc7d104cfc5b795c4b3750e2cf1955462b8567ac401de4ed885f1c04480"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.weth (contracts/ConvexExecutor/Harvester.sol#65-66) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.weth](contracts/ConvexExecutor/Harvester.sol#L65-L66) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44544a5b7a34e19b494e7e85618143c8583849bb15f249e5fbf003243a4d3fad"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.crveth (contracts/ConvexExecutor/Harvester.sol#69-70) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.crveth](contracts/ConvexExecutor/Harvester.sol#L69-L70) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "893f16646d00a102ae694ca1e0ef5b468bc61ae165da177f6684beba4828cb5f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.cvxeth (contracts/ConvexExecutor/Harvester.sol#72-73) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.cvxeth](contracts/ConvexExecutor/Harvester.sol#L72-L73) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 73
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f5d4afd5d7bb34180d90a1047c3d99bfffb02acd2c985ae4a678c0da8f3570c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester._3crvPool (contracts/ConvexExecutor/Harvester.sol#75-76) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester._3crvPool](contracts/ConvexExecutor/Harvester.sol#L75-L76) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60039475fb0b3f573351eaa684f8f37754b8568a19ff271f653f313c2ee7e19a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.uniswapRouter (contracts/ConvexExecutor/Harvester.sol#78-79) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.uniswapRouter](contracts/ConvexExecutor/Harvester.sol#L78-L79) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a503297ea86ccb6b3b83d9d3ac3b7e7040b8d8e332c192666b9098ac0da5bbfc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.uniswapRouterV2 (contracts/ConvexExecutor/Harvester.sol#81-82) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.uniswapRouterV2](contracts/ConvexExecutor/Harvester.sol#L81-L82) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7aa575b7540960b7d58d774477358d0ad0673b81046c95bf221af23ac72e56b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.crvEthPrice (contracts/ConvexExecutor/Harvester.sol#85-86) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.crvEthPrice](contracts/ConvexExecutor/Harvester.sol#L85-L86) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "df91f656b0150f16b2e3a009e22a5929d1a4ad68783049a391f5037f7a8006a5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.cvxEthPrice (contracts/ConvexExecutor/Harvester.sol#88-89) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.cvxEthPrice](contracts/ConvexExecutor/Harvester.sol#L88-L89) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "690afb12a7f86c274efbe30d39b37fc5e23ab384ccc33c03b596af88053910d5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.snxUsdPrice (contracts/ConvexExecutor/Harvester.sol#91-92) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.snxUsdPrice](contracts/ConvexExecutor/Harvester.sol#L91-L92) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 92
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27dd6028686f6bfafaad667733ec355dd56ca6f57bea7bbb0a72961ede4effae"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.fxsUsdPrice (contracts/ConvexExecutor/Harvester.sol#94-95) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.fxsUsdPrice](contracts/ConvexExecutor/Harvester.sol#L94-L95) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1d28846e82b071c5674b963d3ed73b10088b12a6f5db930cbb9f8001180a68ae"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant Harvester.ethUsdPrice (contracts/ConvexExecutor/Harvester.sol#97-98) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [Harvester.ethUsdPrice](contracts/ConvexExecutor/Harvester.sol#L97-L98) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 98
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6e49bca711fcd864e60055cb361c92ae4bbfbbb4826c1ec68e5848e20771832f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ConvexPositionHandler.susdPool (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#77-78) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ConvexPositionHandler.susdPool](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L77-L78) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9f358f8e6da864ef158d018dbe495b8f2143a8b08fd2537cf610dd0ff91269bc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Constant ConvexPositionHandler.susdDeposit (contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#80-81) is not in UPPER_CASE_WITH_UNDERSCORES\n",
            "markdown": "Constant [ConvexPositionHandler.susdDeposit](contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol#L80-L81) is not in UPPER_CASE_WITH_UNDERSCORES\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexPositionHandler.sol"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4f431fd6cc0a91907d811b720ea03fd9b23445a9da57e339bcfd4d6d90cb1c44"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.setSlippage(uint256)._slippage (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#51) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.setSlippage(uint256)._slippage](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L51) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "53f8a43a29f9d3fa78c9bf19568aee0604c868336ca3e82a008b429be5ea1024"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#60) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.setUseVirtualPriceForPosValue(bool)._useVirtualPriceForPosValue](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L60) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85f809df65b6a60e8d0180d2804a34cc83ca66622871c445173ed2dd49a78839"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.setHandler(address)._harvester (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#70) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.setHandler(address)._harvester](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ee58e044192d9e9b580efb9f087f417ddc09750d851b6cb1d3ffb8a6a1c05e3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.openPosition(bytes)._data (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#112) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.openPosition(bytes)._data](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "31d2b0ff6a3472af4ace2a170a771cf245f2fe9ca434f28a30d4df452cd40377"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.closePosition(bytes)._data (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#119) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.closePosition(bytes)._data](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L119) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cfbb108a7d2a163f6c7e115ebc23490f95727baa3c6cb002b45879b9856a9d8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ConvexSUSDPoolTradeExecutor.claimRewards(bytes)._data (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#129) is not in mixedCase\n",
            "markdown": "Parameter [ConvexSUSDPoolTradeExecutor.claimRewards(bytes)._data](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L129) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1d43694e5563cf6ab486d2b21e4718b1c71c63b633ac4139c80897c63a6f930a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.calcCurrLockMultiplier(address,uint256).stake_idx (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#24) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.calcCurrLockMultiplier(address,uint256).stake_idx](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6b294ebddf02d23bda468625256d86ad202d110d3a143f3c420b4f386646e54"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.changeTokenManager(address,address).reward_token_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.changeTokenManager(address,address).reward_token_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58976f009f706013d5a03ca8f8e0956470a0b3968f440d56cbd50ad7464cd94e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.changeTokenManager(address,address).new_manager_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#31) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.changeTokenManager(address,address).new_manager_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fd441a31dc7dc9a5e2bb5ba12ef460aab78e4af00ec8426de846a15273edd3d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.getReward(address).destination_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#51) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.getReward(address).destination_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L51) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a84111d0e70a6d480a559dd000675de5b6b6827381e3d95a6363ae4b001842d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.getReward2(address,bool).destination_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#55) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.getReward2(address,bool).destination_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "44c55e6991da03665cda938c3ac9b304b4e0cf52ababcba1e16f1a7369380590"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.getReward2(address,bool).claim_extra_too (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#55) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.getReward2(address,bool).claim_extra_too](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e7ccc60a405e7a248dc7e720195bbcbbfa326922e53313e070cbda40b304229"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.getRewardExtraLogic(address).destination_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#59) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.getRewardExtraLogic(address).destination_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa07071a05ef78dd0a43d3d49228caa039730ff48b511fd3c7de2ac6b83549f8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.isTokenManagerFor(address,address).caller_addr (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#66) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.isTokenManagerFor(address,address).caller_addr](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6506e146c584d4cf05c2ae1fd1d6d932df3d6b0fb14f4c45b15d407c2e4ff5e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.isTokenManagerFor(address,address).reward_token_addr (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#66) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.isTokenManagerFor(address,address).reward_token_addr](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "33804227947d5813941089dbee2d5eeff4e1978ca6472b71f4d02cc62fdabc3e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.lockAdditional(bytes32,uint256).kek_id (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.lockAdditional(bytes32,uint256).kek_id](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "280e24f74ed6512824878883d6f2e17b50bb764011e3ae671cac99ba01fa3ff0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.lockAdditional(bytes32,uint256).addl_liq (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#75) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.lockAdditional(bytes32,uint256).addl_liq](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L75) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "46ace23275370931094b947084de57483879bba04cc6d5a1e2fd1771474cf4a8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.lockLonger(bytes32,uint256).kek_id (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.lockLonger(bytes32,uint256).kek_id](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "05aea82e436acaa2ea2d0999c849666d21c300458bb9fc131135bdcf8e5c9cc1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.lockLonger(bytes32,uint256).new_ending_ts (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.lockLonger(bytes32,uint256).new_ending_ts](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07bb0cfbc1bd6f595345560d7caa288c2cbf64cea015c5503f411a655731ec0f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.lock_max_multiplier() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#81) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.lock_max_multiplier()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L81) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ef75445a7717d1357c0dd03f1b19bdba2065f8c5b607831381841046ba868ce6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.lock_time_for_max_multiplier() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#83) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.lock_time_for_max_multiplier()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L83) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a6277ed63f69a086b662e98f9fb0e7fd505dece8d954ad21255c9badf5a332c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.lock_time_min() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#85) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.lock_time_min()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L85) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4e1ffa71d80dfec05932299ed3b8633028804ed63c95c7a1e4131dbc6efc4e87"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.minVeFXSForMaxBoostProxy(address).proxy_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#117) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.minVeFXSForMaxBoostProxy(address).proxy_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9b56f217f48e21ef846ce12691fbe291af71700fdc025ba503062eed815d21a4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.proxyStakedFrax(address).proxy_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#130) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.proxyStakedFrax(address).proxy_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L130) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 130,
                  "endLine": 130
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9510daff821cbbe390c6f84b4a56457e06d051c7c8e8b4555a15d26ba635d91b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.proxyToggleStaker(address).staker_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#135) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.proxyToggleStaker(address).staker_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L135) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c0c7ea8cbbb5d1a6a1c0c45d70a1a15b41686be3f3a5e68e8aea71b8f7f909b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.proxy_lp_balances(address) (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#137) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.proxy_lp_balances(address)](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L137) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 137,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "52b6d65820fd4dd5f4cf5b29b2c999d78843385a1896b048248521c34e4b0de9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.rewardRates(uint256).token_idx (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#143) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.rewardRates(uint256).token_idx](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L143) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e32ab7011675368d4a57dacbbb73a0fd62799fc5b74a295befd738205af8cd2e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.setMiscVariables(uint256[6])._misc_vars (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#157) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.setMiscVariables(uint256[6])._misc_vars](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L157) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63c5d4f49d4d5b18ddec49bd81413b3034955aa0e75c569ba4e58aaddc3d4323"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.setRewardVars(address,uint256,address,address).reward_token_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#166) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.setRewardVars(address,uint256,address,address).reward_token_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L166) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "15989aa7ec0df38df92bc97ea136d711a85f8f0c9ef42ddd9d9decbdbe467ba1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.setRewardVars(address,uint256,address,address)._new_rate (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#167) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.setRewardVars(address,uint256,address,address)._new_rate](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L167) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8350aa3e13dbde791b2b9d73d0dad488e54c0cc664a74c11513a62677fd061ab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.setRewardVars(address,uint256,address,address)._gauge_controller_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#168) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.setRewardVars(address,uint256,address,address)._gauge_controller_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L168) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99f56ab888d5e96fe9fa0d16801a9a1cc3aa124f21e7cb9c4448093e8be3fb9c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.setRewardVars(address,uint256,address,address)._rewards_distributor_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#169) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.setRewardVars(address,uint256,address,address)._rewards_distributor_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L169) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7aee8baa71b5a3ee2a420e98961d32283d17c04a7d51d9e02e9ebdc0713e1c7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.stakerSetVeFXSProxy(address).proxy_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#176) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.stakerSetVeFXSProxy(address).proxy_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L176) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5dbdbbd18b21aa15dd612f0e28ccdd3256248f34feee97c6cfd0a77c4447315"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.staker_designated_proxies(address) (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#178) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.staker_designated_proxies(address)](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L178) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 178,
                  "endLine": 178
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fc12618aa653c323a349e796c7b6210c7085c3b89aa802d808fee5b769f150a7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.sync_gauge_weights(bool) (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#186) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.sync_gauge_weights(bool)](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L186) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a95fa316f000f28fdf25771d325bfcf2db670c840949881a06794e1ab0203803"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.sync_gauge_weights(bool).force_update (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#186) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.sync_gauge_weights(bool).force_update](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L186) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a427ecf8bd04902d6bf96bf346c99480280ceafce380fee7744f27211a25a97b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.toggleValidVeFXSProxy(address)._proxy_addr (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#188) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.toggleValidVeFXSProxy(address)._proxy_addr](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L188) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 188
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e31c781701b65b542f5a9405a253b3db9296a51aac0e1d96f232d796cbd0f5ce"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.updateRewardAndBalance(address,bool).sync_too (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#196) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.updateRewardAndBalance(address,bool).sync_too](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L196) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 196,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "027278c95dc8d7073da3e51137e2496051180565a0d6838f9ac656ab9553e3d2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.vefxs_boost_scale_factor() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#205) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.vefxs_boost_scale_factor()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L205) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 205,
                  "endLine": 205
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3ed774737e74e088692f5f28be0b79c8e6ec278fd94b2704f6bec4dc60557d6f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.vefxs_max_multiplier() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#207) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.vefxs_max_multiplier()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L207) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 207,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba24726b3fc5290de2dfb2427983fdff1fa856654cf1b9fa3001cabeda20fee5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStaking.vefxs_per_frax_for_max_boost() (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#209) is not in mixedCase\n",
            "markdown": "Function [IConvexStaking.vefxs_per_frax_for_max_boost()](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L209) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 209,
                  "endLine": 209
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "212c321b5e6db8dd93608d8f0d09d45f98c55969b6c3d2786309ef3e9c70ad7d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.withdrawLocked(bytes32,address).kek_id (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#211) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.withdrawLocked(bytes32,address).kek_id](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L211) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8457eaf4ef3c89681b550554b5d908b4bb38776fb5e186d225643e46db54c95"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStaking.withdrawLocked(bytes32,address).destination_address (contracts/ConvexExecutor/interfaces/IConvexStaking.sol#211) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStaking.withdrawLocked(bytes32,address).destination_address](contracts/ConvexExecutor/interfaces/IConvexStaking.sol#L211) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStaking.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 211
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ba72282a13bc6ee7599c6322fe21a3870f786207e284e4e2d504e6dd07e7a492"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IConvexStakingProxy.FEE_DENOMINATOR() (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#5) is not in mixedCase\n",
            "markdown": "Function [IConvexStakingProxy.FEE_DENOMINATOR()](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L5) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 5
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "634dc94dea7a3a9bf2944ac465a6f7c5352a2f9d3f08d30f6563a22050f39e83"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditional(bytes32,uint256)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#46) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditional(bytes32,uint256)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f96c96c1494c40bdf094e84520b8e36c1c5525a804e1c3c8214b26b5d2a293cc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditional(bytes32,uint256)._addl_liq (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#46) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditional(bytes32,uint256)._addl_liq](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L46) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ae3bf79005fcd82c21a06014388bb1c5af6aba2b7b637856e04aff20198f052"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditionalConvexToken(bytes32,uint256)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditionalConvexToken(bytes32,uint256)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "175576346fd441ab78e39179dcfeb646fc9b94619a1303ee2068dd864a7d0f2d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditionalConvexToken(bytes32,uint256)._addl_liq (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#48) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditionalConvexToken(bytes32,uint256)._addl_liq](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f3e58154c1968227411675ac00bc0a23b883f848adbb6d6ba87d346a5af23687"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditionalCurveLp(bytes32,uint256)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#51) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditionalCurveLp(bytes32,uint256)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L51) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "43aba3c70e25cd99884038ca8ec7b16b199b6565b61344f9e658372056757fe6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockAdditionalCurveLp(bytes32,uint256)._addl_liq (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#51) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockAdditionalCurveLp(bytes32,uint256)._addl_liq](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L51) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "053ac08e50587091c2e54b262c53099167e005b0d79c93037c7e85df28192350"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockLonger(bytes32,uint256)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#53) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockLonger(bytes32,uint256)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ddbd5fa9b61c8cb75448f679f28f0acf2448a27a71d54e84b87c4f9238ceb5b3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.lockLonger(bytes32,uint256).new_ending_ts (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#53) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.lockLonger(bytes32,uint256).new_ending_ts](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "27c9bdf893f6b6b4382f72b3ade627c3adac5953f22ec91171f3e890953f2f71"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.withdrawLocked(bytes32)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#87) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.withdrawLocked(bytes32)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c238b8618dc2f8dde12957fe73d3832ebc9882313fbd5a6c3829dc0520de491b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter IConvexStakingProxy.withdrawLockedAndUnwrap(bytes32)._kek_id (contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#89) is not in mixedCase\n",
            "markdown": "Parameter [IConvexStakingProxy.withdrawLockedAndUnwrap(bytes32)._kek_id](contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol#L89) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IConvexStakingProxy.sol"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b8e4d094f96362d02b71f52a1a06b32fa2ae53e23509d7c1095490323787ee63"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.exchange(int128,int128,uint256,uint256,address)._min_dy (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.exchange(int128,int128,uint256,uint256,address)._min_dy](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7276b8bd0c65585fe4a3cc3293b3c14bb3ca9af346ebae7619803f83faba2974"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#13-17) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L13-L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a33d8812e116c56315e5028cf52a92c389b9440da1248ed5ad1ec155ee666cc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bdad00c29ee1ffd0b070db515f44289a3740374b558e0edee3659524277e7bae"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7ce03902ebc04d783a7ebd4278b2e33b03aa4cddaabc9e6cec70fe8fbfa033ac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.add_liquidity(uint256[2],uint256) (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#19-21) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.add_liquidity(uint256[2],uint256)](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L19-L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "89cf3d24ffaeb45bc071441ef7effad7a11c10554b4a5f2d038fb26f7c7f0f67"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#19) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.add_liquidity(uint256[2],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7f7195a8b5a813d2ba89c40d98a8590ef83472bde71ac3350bef055058f42129"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#23-27) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.get_dy(int128,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L23-L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7e13ed383fb4821b68035136c73a377601992c0c861873ad2b1881dbae2e64e3"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.calc_withdraw_one_coin(uint256,int128) (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#29-32) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.calc_withdraw_one_coin(uint256,int128)](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L29-L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "efd34906952e1b7cbd445386d8af3d984f4beaf34bbf5b4504d1e17c3ca7cbc7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.calc_withdraw_one_coin(uint256,int128)._token_amount](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d2889e0864fbaffedb2188e20de033167883bccdc1d7d783bd4ad2f13de562f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.calc_token_amount(uint256[2],bool) (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#34-37) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.calc_token_amount(uint256[2],bool)](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L34-L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c24f063179cb4a8cef93744029ec86b0c36fc9acd061efda29778e013555d865"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurve2Pool.calc_token_amount(uint256[2],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [ICurve2Pool.calc_token_amount(uint256[2],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2a742a3af99f54571937f3b2e440e126f899c3621776579f569ca18ebf6d389b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurve2Pool.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#39) is not in mixedCase\n",
            "markdown": "Function [ICurve2Pool.get_virtual_price()](contracts/ConvexExecutor/interfaces/ICurve2Pool.sol#L39) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurve2Pool.sol"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e0306156a0fb4f1f255520c1031032c282ed60c5853b0f44605ddd3b44e93509"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#5-9) is not in mixedCase\n",
            "markdown": "Function [ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L5-L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a3c99232cc679701175fab77201d69221d4a541c9de8aa73bda53ddd0794c78"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#6) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L6) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ebeea670be8ff1f238ee69ca234058c853052d83910737b3a2f92449d007c14c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#8) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDeposit.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L8) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "05380d7b3c879a38d7132330e101923ea59141cc6322097bd42c769f01760707"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDeposit.calc_withdraw_one_coin(uint256,int128) (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#11-14) is not in mixedCase\n",
            "markdown": "Function [ICurveDeposit.calc_withdraw_one_coin(uint256,int128)](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L11-L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d7c7d8b76a3c6c1721fd26ba3aabaea1fec883db22eed01a3b7cdd2da3265db"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDeposit.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#11) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDeposit.calc_withdraw_one_coin(uint256,int128)._token_amount](contracts/ConvexExecutor/interfaces/ICurveDeposit.sol#L11) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDeposit.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "39ec2546e99430b948c015a7c84d4605e4b3c357d3ea4062d2ced4729f5b3109"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#5-9) is not in mixedCase\n",
            "markdown": "Function [ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128)](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L5-L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ae68975996dec6fe59b01cebedc8a072b25f17281c045f834c070ebc0dac032"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128)._token_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#7) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.calc_withdraw_one_coin(address,uint256,int128)._token_amount](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e36b1e0b12b7a4efeb14de02c816a2a84bad1a5b365d2df3a38a79ecdb90c28b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDepositZapper.calc_token_amount(address,uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#11-15) is not in mixedCase\n",
            "markdown": "Function [ICurveDepositZapper.calc_token_amount(address,uint256[4],bool)](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L11-L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bde223b57ca566444efa604c786439778d3416e0499ed00ad73c2a5197675c0c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.calc_token_amount(address,uint256[4],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "92f52564c4e681f9bfe7da7672f8b780997ea78fa47fdbaffdc9a4cad7af8a7c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#17-22) is not in mixedCase\n",
            "markdown": "Function [ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L17-L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6cb7b9c86d3f6bb311926bbf3006444a371f492d0c78a16688524396d8907f10"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._burn_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#19) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._burn_amount](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9cc3302893dab33719e9f85d48e66f036c1aab23d227035baeee28e321b5fa7d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#21) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_amount](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L21) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2636713984131d26b0c322f28c22ce81956beacef96662a6460a492a3d67bed6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveDepositZapper.add_liquidity(address,uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#24-28) is not in mixedCase\n",
            "markdown": "Function [ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L24-L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "900980318e0ea2d77d3b0475ca6f465f6905eb0c14d688a7003f60336f577324"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._deposit_amounts (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#26) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._deposit_amounts](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L26) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa9a1efd39252b4863639bf7b431e99bd95a6f55af4c6e9028dbb5c006210f82"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [ICurveDepositZapper.add_liquidity(address,uint256[4],uint256)._min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveDepositZapper.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97f22a85584e947d9045b8620574756108f08ebe43a848ffe5f3e5028aaefbb1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveSwap.exchange(int128,int128,uint256,uint256,address)._min_dy (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurveSwap.exchange(int128,int128,uint256,uint256,address)._min_dy](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "30365c9e49f7a457564385c067713c285ca9d7e5c87ee7d45e72fe64cef88669"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#13-17) is not in mixedCase\n",
            "markdown": "Function [ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L13-L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc3020016296456e33d97981119cd5abe9084eb05676a524c331b4aedfef65e9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3e74d723a94038de7e5fdfc3a9d551e26b8206cd96a9c8f7b78c38d5057858e1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurveSwap.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4ecd56d2a6ff76e5e31ff0ff051d3f1c3998abcb639403c569f56b6af556242"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveSwap.add_liquidity(uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#19-20) is not in mixedCase\n",
            "markdown": "Function [ICurveSwap.add_liquidity(uint256[4],uint256)](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L19-L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e163badd52ce7910c41fbc0dc327a1e71797266dfafb74e213216b7964d87f90"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveSwap.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#19) is not in mixedCase\n",
            "markdown": "Parameter [ICurveSwap.add_liquidity(uint256[4],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L19) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e386300863568c6acf792617055aaa5e600e01706042fdc3bc8bbc553e1d6a6f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveSwap.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#22-26) is not in mixedCase\n",
            "markdown": "Function [ICurveSwap.get_dy(int128,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L22-L26) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 26
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fefa530cf429ee7cad0c22e4dc104fa4f2f56a98f9a59c853c79fda760e42f71"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveSwap.calc_token_amount(uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#28-31) is not in mixedCase\n",
            "markdown": "Function [ICurveSwap.calc_token_amount(uint256[4],bool)](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L28-L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "614431b117069b15c7efb919d40fd56cbdad9e949580d17d5ea137aeb1959fc5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveSwap.calc_token_amount(uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#28) is not in mixedCase\n",
            "markdown": "Parameter [ICurveSwap.calc_token_amount(uint256[4],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fcaf433bb1ce8ec1c22543f983ca54504755c59d373a6a6bd555e044e621797f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveSwap.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurveSwap.sol#33) is not in mixedCase\n",
            "markdown": "Function [ICurveSwap.get_virtual_price()](contracts/ConvexExecutor/interfaces/ICurveSwap.sol#L33) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveSwap.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e32fd9c1904e7e5bc08a0f10846884c92ecf11d956d4e0724fb12b54e8a4a50"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.get_virtual_price() (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#4) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.get_virtual_price()](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L4) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a97274f152f9900b32007becf45ae5ca0774521fd099d9cbae93c9819ed4db46"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[2],uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#6-10) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[2],uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L6-L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e516342317a5750a61b4d13ebe1ff103572b7f6f1a55cc2f6a17c57ec389b5d4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[2],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3eca39cb496e22fdd2ba1255fae9d13641f5869faf0b5618d501870064b41cde"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[2],uint256,bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#12-17) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[2],uint256,bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L12-L17) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c89144cc46c588a98fec4087065a7150691ef941f3c2c10cfce746fe757ca54d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[2],uint256,bool).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#15) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[2],uint256,bool).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L15) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74ad37dcba877541d55138210f7b5e54d17e51103fe26d42b418b83cbad5576b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[2],uint256,bool)._use_underlying (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[2],uint256,bool)._use_underlying](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cc2b1753a56e568ba083ababa5c8fd20021209b59eccbf54e318de0bbaa882b5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[3],uint256,bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#19-24) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[3],uint256,bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L19-L24) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3fe4759c511e6709f90b485f89dd2df33b7deb0a4833a7dacf4420a31e09ede7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[3],uint256,bool).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#22) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[3],uint256,bool).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L22) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34d8db4ae5c8b71c7ddff0901a3bc7448be62f71909c90c2fcafa034734858e4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[3],uint256,bool)._use_underlying (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[3],uint256,bool)._use_underlying](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "179f98907d66a4fb96cbe71526a4af659a9382ecd19ba2b719d0d7aad5addbf8"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(address,uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#26-31) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(address,uint256[4],uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L26-L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49d43b459ea962d974d2690de036ba3b8b4a6142a7b4fd91b94b86fd97c53b6d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(address,uint256[4],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#30) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(address,uint256[4],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fa7640f225e52b5905a0427420cbb9d5cf8760a9f491711e8f34bcc0dfcf42c5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[4],uint256,bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#33-38) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[4],uint256,bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L33-L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a6e624ad5c2eb166b2668a9168f8d7d9dc07c241d1a5da554fad452e81afa95"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[4],uint256,bool).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#36) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[4],uint256,bool).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "87817e1361de0a1260b57708fcf48fd74239f8fe60868c8bd3fdec1ea7a6efe7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[4],uint256,bool)._use_underlying (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#37) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[4],uint256,bool)._use_underlying](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L37) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d33b6c159dd5863ba8561ddc2ced3ce2aa49bdf59076ffd49d63a7fef9eb7e92"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[3],uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#40-44) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[3],uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L40-L44) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1bee98aa1aa4c383dff3a023e8e882ba5e1c295dc881a1265bf0115527366982"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#43) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[3],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e08b961112a461d312da13e93a2966164122486b12b2ef5171350876b78aadcc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.add_liquidity(uint256[4],uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#46-50) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.add_liquidity(uint256[4],uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L46-L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7c0c499e9bd05f6a4880d932463d33ead264fa1436be80b7f2c7b13ae7816d9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#49) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.add_liquidity(uint256[4],uint256).min_mint_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L49) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e5efa425c1343174d1c97985747dfad8fb0e7c2dbe8699f11d1031eeec4bd973"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.remove_liquidity_imbalance(uint256[2],uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#52-55) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.remove_liquidity_imbalance(uint256[2],uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L52-L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "79ec23c73dd9a0453d205d3c8dd2352b2002c4a4622da4cb5aefb43e645a757a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.remove_liquidity_imbalance(uint256[2],uint256).max_burn_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#54) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.remove_liquidity_imbalance(uint256[2],uint256).max_burn_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L54) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ed885fadc72af8c14a1e682250999978a56fd75e5397fb36b2e7a71630dd92f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.remove_liquidity(uint256,uint256[2]) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#57-58) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.remove_liquidity(uint256,uint256[2])](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L57-L58) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c57f6eceb413246ebb5ee5638191907b459bdfa3220bbe098664f9ff50e4800"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#60-64) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L60-L64) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "08f268d7c5b0cc3ad6760f9da3047c90a657ed8da86d0dfd889baa8d7084290f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#61) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L61) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b9adf4fdf42057f3ad5201287f4d94892f19a55db5c80ae41dd39d8058c12b9f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#63) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L63) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e53b3d5556c9f6534cfdb81fe8566e9a19eb3f04f81e0640b67469f8f614919f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.exchange(int128,int128,uint256,uint256)._from_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#69) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.exchange(int128,int128,uint256,uint256)._from_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L69) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "90269a65ac56d65c1a7f800bfa21576854e2d5648977643b6cf34d0a5215dc85"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.exchange(int128,int128,uint256,uint256)._min_to_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#70) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.exchange(int128,int128,uint256,uint256)._min_to_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L70) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0af3fefde29215d6634580b6501804c05e96d7acd1b3b49009cb355a7738da80"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool)._from_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool)._from_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b06773d21f56d25a573b7602753b254c1353488a26376adab1774f9250f5adc1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool)._min_to_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool)._min_to_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0f414c83491f61cce316505cac0aee823e4b7b77f8042e18dbafd5dfd9a4cfc9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool).use_eth (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#78) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.exchange(uint256,uint256,uint256,uint256,bool).use_eth](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80f4295166131947fdf3615bcf09d1db33a2decc46fdbbd2da283f07622463c6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.get_dy(int128,int128,uint256) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#83-87) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.get_dy(int128,int128,uint256)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L83-L87) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab58760a29f0d224adc75d7cb637ff34829e22021800294f08afd02895f6216e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.get_dy(int128,int128,uint256)._from_amount (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#86) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.get_dy(int128,int128,uint256)._from_amount](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L86) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60e69f02b9b489f8c0393e24ec2ea33a5543454ca5ce5c2283f44bc2134176f6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.calc_token_amount(uint256[2],bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#90-93) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.calc_token_amount(uint256[2],bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L90-L93) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 93
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "66836c3e5be5104c359220dd017655699dd35610a57f3b600179a46a2acdadf4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.calc_token_amount(uint256[2],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#90) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.calc_token_amount(uint256[2],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L90) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4893baf032d71bb0c5ddfd7c6d8046459141d418dcd67007772df3acc0c3e475"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.calc_token_amount(address,uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#96-100) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.calc_token_amount(address,uint256[4],bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L96-L100) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 100
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f30f83cf50a4778226ce1a4599ec5c0a69eee8ded4112881cc1d88ab085cffa7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.calc_token_amount(address,uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#99) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.calc_token_amount(address,uint256[4],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L99) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "aea55b2d99c989cc0cbbd589d8e61320a6ebbcd06a932a2c680ed7fd08f6518e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.calc_token_amount(uint256[4],bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#103-106) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.calc_token_amount(uint256[4],bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L103-L106) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 106
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4cf0e833991127d5c0b25828a276b68b559af61f5121880e4628925229896ac9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.calc_token_amount(uint256[4],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#103) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.calc_token_amount(uint256[4],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L103) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f63ca6974ba86f37f62a861e5231dbdefadbe94566ce4ac0fff5f6e3b4969a5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.calc_token_amount(uint256[3],bool) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#109-112) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.calc_token_amount(uint256[3],bool)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L109-L112) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 112
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1dc3aec1e589d38a9f04d8e82235e99a4c2a7d80d9975237d402f27d4cc05697"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveV2Pool.calc_token_amount(uint256[3],bool)._is_deposit (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#109) is not in mixedCase\n",
            "markdown": "Parameter [ICurveV2Pool.calc_token_amount(uint256[3],bool)._is_deposit](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L109) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8edfb0c49bb74440f40d4463da3d9a85a844ca9c5b2d582f0d2df6b2f1e0de6c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveV2Pool.calc_withdraw_one_coin(uint256,int128) (contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#114-117) is not in mixedCase\n",
            "markdown": "Function [ICurveV2Pool.calc_withdraw_one_coin(uint256,int128)](contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol#L114-L117) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/ICurveV2Pool.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "34d9434af1bd3fb71929e5d65a4e0befb2f294ca196c171c87eca5e89dea4bbc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IHarvester._3crv() (contracts/ConvexExecutor/interfaces/IHarvester.sol#11) is not in mixedCase\n",
            "markdown": "Function [IHarvester._3crv()](contracts/ConvexExecutor/interfaces/IHarvester.sol#L11) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IHarvester.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49e6357b02d13eb2f1edf22ba0c361dc5ac22c22feda86b70c4024f467fec4b0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUniswapV2Router.WETH() (contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#7) is not in mixedCase\n",
            "markdown": "Function [IUniswapV2Router.WETH()](contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ecd52e59179cafc1217838101d7de8cb276389ad0ee02368f26fb3e17b023e81"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IOldConvexTE.MAX_BPS() (contracts/Migration/interfaces/IOldConvexTE.sol#10) is not in mixedCase\n",
            "markdown": "Function [IOldConvexTE.MAX_BPS()](contracts/Migration/interfaces/IOldConvexTE.sol#L10) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldConvexTE.sol"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "838f8d808baf44f62641683d8d14037f2a87bd703ff828e5c83bd4445faed461"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IOldConvexTE.NORMALIZATION_FACTOR() (contracts/Migration/interfaces/IOldConvexTE.sol#12) is not in mixedCase\n",
            "markdown": "Function [IOldConvexTE.NORMALIZATION_FACTOR()](contracts/Migration/interfaces/IOldConvexTE.sol#L12) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldConvexTE.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c90550f7a32e1fc5e8cfb0ec117d67a73dd41da3c5fbb3ff5fc0744ce4151c5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IOldPerpTEL2.L2CrossDomainMessenger() (contracts/Migration/interfaces/IOldPerpTEL2.sol#6) is not in mixedCase\n",
            "markdown": "Function [IOldPerpTEL2.L2CrossDomainMessenger()](contracts/Migration/interfaces/IOldPerpTEL2.sol#L6) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldPerpTEL2.sol"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dfaf839ca8be7bd8f0feb02f5a1ee0df0cd3147a4523964d6dc586eb8f1edbe1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IOldPerpTEL2.MAX_BPS() (contracts/Migration/interfaces/IOldPerpTEL2.sol#8) is not in mixedCase\n",
            "markdown": "Function [IOldPerpTEL2.MAX_BPS()](contracts/Migration/interfaces/IOldPerpTEL2.sol#L8) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IOldPerpTEL2.sol"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "880cb7373f014c7994cd2f53fbc8203acad934c58f93c38056db5416c8dbf411"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.APPROVE_WITH_AUTHORIZATION_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#31-34) is not in mixedCase\n",
            "markdown": "Function [IUSDC.APPROVE_WITH_AUTHORIZATION_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L31-L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c4525e0853ffaa2b0f4bdfc7d619086f4d44d8a85a07c3441035c00f2639ee0f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.CANCEL_AUTHORIZATION_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#36) is not in mixedCase\n",
            "markdown": "Function [IUSDC.CANCEL_AUTHORIZATION_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ec8206cdaab0cf7f169845532f634faa5a2bdea3b2b16b5ee57c55a763bb45e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#38-41) is not in mixedCase\n",
            "markdown": "Function [IUSDC.DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L38-L41) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3fb5d23ce58eeb7e0f24d1fd040c5c254fed1c0eae2a0d99cbcebcf9b4bf2c7b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.DOMAIN_SEPARATOR() (contracts/Migration/interfaces/IUSDC.sol#43) is not in mixedCase\n",
            "markdown": "Function [IUSDC.DOMAIN_SEPARATOR()](contracts/Migration/interfaces/IUSDC.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "24d16e77d6ba76a62fa568416b1333d7d706f026eacf458e340cb3612fed2683"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#45-48) is not in mixedCase\n",
            "markdown": "Function [IUSDC.INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L45-L48) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80bfa74ad1bcf90059634fb0af1c6a84cf2ee372c9e09765d59e9574fb7ebb48"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.PERMIT_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#50) is not in mixedCase\n",
            "markdown": "Function [IUSDC.PERMIT_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L50) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b6478618a00285dcad06624d9d5586cb805acf53ec84c952c74dc27379427084"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IUSDC.TRANSFER_WITH_AUTHORIZATION_TYPEHASH() (contracts/Migration/interfaces/IUSDC.sol#52-55) is not in mixedCase\n",
            "markdown": "Function [IUSDC.TRANSFER_WITH_AUTHORIZATION_TYPEHASH()](contracts/Migration/interfaces/IUSDC.sol#L52-L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/interfaces/IUSDC.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7f424fb685f4af445f696aeba6787f72f6b2294a2948e7d07e0ee4b440e1792"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter OptimismWrapper.sendMessageToL2(address,bytes,uint32)._target (contracts/PerpHandler/OptimismWrapper.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [OptimismWrapper.sendMessageToL2(address,bytes,uint32)._target](contracts/PerpHandler/OptimismWrapper.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd4ba3714e22f7c9c15a84b25d7605ae89b02c2156f8b68ac9973739a79f923e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter OptimismWrapper.sendMessageToL2(address,bytes,uint32)._message (contracts/PerpHandler/OptimismWrapper.sol#28) is not in mixedCase\n",
            "markdown": "Parameter [OptimismWrapper.sendMessageToL2(address,bytes,uint32)._message](contracts/PerpHandler/OptimismWrapper.sol#L28) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a739556076590c27922aec411b4755e84bc687f936a197cf0f9297a713ae3751"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter OptimismWrapper.sendMessageToL2(address,bytes,uint32)._gasLimit (contracts/PerpHandler/OptimismWrapper.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [OptimismWrapper.sendMessageToL2(address,bytes,uint32)._gasLimit](contracts/PerpHandler/OptimismWrapper.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f8227ee3732fda9560cdeb644051cd50955bf8145edef2efee241158ad31aa19"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable OptimismWrapper.L1CrossDomainMessenger (contracts/PerpHandler/OptimismWrapper.sol#11) is not in mixedCase\n",
            "markdown": "Variable [OptimismWrapper.L1CrossDomainMessenger](contracts/PerpHandler/OptimismWrapper.sol#L11) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/OptimismWrapper.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "41de985f220dbd3ee9ac906e94d88c819033b3d678765137b2adaaa4c62b7f71"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setPosValue(uint256)._posValue (contracts/PerpHandler/PerpTradeExecutor.sol#60) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setPosValue(uint256)._posValue](contracts/PerpHandler/PerpTradeExecutor.sol#L60) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84e862851c53293102630a9c31c7365834c7a90d7705bba66ad9e03afea920ab"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setSocketRegistry(address)._socketRegistry (contracts/PerpHandler/PerpTradeExecutor.sol#66) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setSocketRegistry(address)._socketRegistry](contracts/PerpHandler/PerpTradeExecutor.sol#L66) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d1d857301e41268ecb53956ef50be807c1cec6eb96ae3fd550310204ca56ce6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setHandler(address,address,address,address)._wantTokenL2 (contracts/PerpHandler/PerpTradeExecutor.sol#76) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setHandler(address,address,address,address)._wantTokenL2](contracts/PerpHandler/PerpTradeExecutor.sol#L76) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab37152b0575ed13c9bd79afd29d471db8036d7d007aa918a8eb554888261c3c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setHandler(address,address,address,address)._l2HandlerAddress (contracts/PerpHandler/PerpTradeExecutor.sol#77) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setHandler(address,address,address,address)._l2HandlerAddress](contracts/PerpHandler/PerpTradeExecutor.sol#L77) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20fb904bb1bb559b251a6dd424185dd1d76fed4b38a55dd179d1fe0d7bdd1e23"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setHandler(address,address,address,address)._L1CrossDomainMessenger (contracts/PerpHandler/PerpTradeExecutor.sol#78) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setHandler(address,address,address,address)._L1CrossDomainMessenger](contracts/PerpHandler/PerpTradeExecutor.sol#L78) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f1c7f53670f00e1345aec7f9f1e44507f1a3df13393992dfe172ed4a715208e7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.setHandler(address,address,address,address)._socketRegistry (contracts/PerpHandler/PerpTradeExecutor.sol#79) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.setHandler(address,address,address,address)._socketRegistry](contracts/PerpHandler/PerpTradeExecutor.sol#L79) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 79
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ac5fbcc5b310f7144bb6da56e1495ec4a1a56e028593ea24f5d67ef7a015f095"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.openPosition(bytes)._data (contracts/PerpHandler/PerpTradeExecutor.sol#120) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.openPosition(bytes)._data](contracts/PerpHandler/PerpTradeExecutor.sol#L120) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 120
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "28105bb2e1e7dbcd1261163bb8d4d54777f4989bc05ed3a7a1808993484be10a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter PerpTradeExecutor.closePosition(bytes)._data (contracts/PerpHandler/PerpTradeExecutor.sol#126) is not in mixedCase\n",
            "markdown": "Parameter [PerpTradeExecutor.closePosition(bytes)._data](contracts/PerpHandler/PerpTradeExecutor.sol#L126) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c159a3e112d47dea16428208f7bdeb90a10f72735187404ab004f3a8c4ae3209"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.slice(bytes,uint256,uint256)._bytes (contracts/PerpHandler/SocketV1Controller.sol#114) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.slice(bytes,uint256,uint256)._bytes](contracts/PerpHandler/SocketV1Controller.sol#L114) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0366d397a114e26040fe251a3f76e3d4fdbfb35acbe9d1d66138345edcf8a8fc"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.slice(bytes,uint256,uint256)._start (contracts/PerpHandler/SocketV1Controller.sol#115) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.slice(bytes,uint256,uint256)._start](contracts/PerpHandler/SocketV1Controller.sol#L115) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c3e846926951a5c23ad3b1b77902bb9bc3a825e7e46e57f430153e296b781718"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter SocketV1Controller.slice(bytes,uint256,uint256)._length (contracts/PerpHandler/SocketV1Controller.sol#116) is not in mixedCase\n",
            "markdown": "Parameter [SocketV1Controller.slice(bytes,uint256,uint256)._length](contracts/PerpHandler/SocketV1Controller.sol#L116) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/SocketV1Controller.sol"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 116
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "51aa704ce9e64963aa9e4fca6e71ca3fcd51f46c9f7a33d09ae5a6a9fe062c5f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.depositIntoExecutor(address,uint256)._executor (contracts/Vault.sol#167) is not in mixedCase\n",
            "markdown": "Parameter [Vault.depositIntoExecutor(address,uint256)._executor](contracts/Vault.sol#L167) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "afff793888d5dc4a444c82acbdcae14e6fe96bf970b749ce87c0e0ff4c74c7d7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.depositIntoExecutor(address,uint256)._amount (contracts/Vault.sol#167) is not in mixedCase\n",
            "markdown": "Parameter [Vault.depositIntoExecutor(address,uint256)._amount](contracts/Vault.sol#L167) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2e19b17d11990ee235415e2738969685ebc31c1ab9003e1093aa276b2b8dd73c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.withdrawFromExecutor(address,uint256)._executor (contracts/Vault.sol#181) is not in mixedCase\n",
            "markdown": "Parameter [Vault.withdrawFromExecutor(address,uint256)._executor](contracts/Vault.sol#L181) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "afda89521fabec1bc1db0a44ef52dd528942b10422b9e87286299fe93cfd42ea"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.withdrawFromExecutor(address,uint256)._amount (contracts/Vault.sol#181) is not in mixedCase\n",
            "markdown": "Parameter [Vault.withdrawFromExecutor(address,uint256)._amount](contracts/Vault.sol#L181) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9fc1a42f3949a824bc129e15a4d62e82362d803a08ae65c84938a648a3de673a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setPerformanceFee(uint256)._fee (contracts/Vault.sol#215) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setPerformanceFee(uint256)._fee](contracts/Vault.sol#L215) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 215
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42df02d6dd0cf11912ffbbf3f7f33de629fa52c4bb9d14e9347b49cb69f4a44e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setExitFee(uint256)._fee (contracts/Vault.sol#229) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setExitFee(uint256)._fee](contracts/Vault.sol#L229) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c779e25c1337dd959036c90d7e2bf47a069c1618c1cc407ab0a6ab41ce54ce1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setManagementFee(uint256)._fee (contracts/Vault.sol#243) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setManagementFee(uint256)._fee](contracts/Vault.sol#L243) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c45efcef8f17c6663a8494b36391b3ebaa7bcfa3c5759bbf4c028fa8f37921e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.addExecutor(address)._tradeExecutor (contracts/Vault.sol#302) is not in mixedCase\n",
            "markdown": "Parameter [Vault.addExecutor(address)._tradeExecutor](contracts/Vault.sol#L302) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 302
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f4a9ba093b99ca08cb762caf51f177552e2aa28778a2efa8c797bb8149cc5176"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.removeExecutor(address)._tradeExecutor (contracts/Vault.sol#320) is not in mixedCase\n",
            "markdown": "Parameter [Vault.removeExecutor(address)._tradeExecutor](contracts/Vault.sol#L320) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 320
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "818d6f61cb975b7fdbe07b17791150a402625dd28e3c51b6b35d3193c7f552e5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.executorByIndex(uint256)._index (contracts/Vault.sol#343) is not in mixedCase\n",
            "markdown": "Parameter [Vault.executorByIndex(uint256)._index](contracts/Vault.sol#L343) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 343,
                  "endLine": 343
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae74aa0ee93db52cd504ca6f58e2fce1ad9c8a6934c6ec99896e054b5ae2e4a6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setBatcher(address)._batcher (contracts/Vault.sol#377) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setBatcher(address)._batcher](contracts/Vault.sol#L377) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0a034a4c0dea84b2b5c6bc6f71f8599567072d81db6a779a1d541ace4808a832"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setBatcherOnlyDeposit(bool)._batcherOnlyDeposit (contracts/Vault.sol#390) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setBatcherOnlyDeposit(bool)._batcherOnlyDeposit](contracts/Vault.sol#L390) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 390
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5c13e0ef3fc077b9e2b28299e31ffbbb03febc1d89348763d3b24b67a876275"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setGovernance(address)._governance (contracts/Vault.sol#399) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setGovernance(address)._governance](contracts/Vault.sol#L399) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 399
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d54af175d473a1a1035aa1665fde380dc66290dd9338892a74d676e070ab58ec"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setKeeper(address)._keeper (contracts/Vault.sol#428) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setKeeper(address)._keeper](contracts/Vault.sol#L428) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 428
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "84b1180653a50d371004e684001a25def516bb469c0dc11f93fa4751b04780e1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.setEmergencyMode(bool)._emergencyMode (contracts/Vault.sol#441) is not in mixedCase\n",
            "markdown": "Parameter [Vault.setEmergencyMode(bool)._emergencyMode](contracts/Vault.sol#L441) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 441,
                  "endLine": 441
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c0075bd2e1cdabdf24c8ec6fb2e611285039b0fee83af87f238b50caddfe787"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.sweep(address)._token (contracts/Vault.sol#453) is not in mixedCase\n",
            "markdown": "Parameter [Vault.sweep(address)._token](contracts/Vault.sol#L453) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 453
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fbcffc4e34c4cabcf76551d3d9079d90782125f42a94a71275504f0773b28037"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.isValidAddress(address)._addr (contracts/Vault.sol#487) is not in mixedCase\n",
            "markdown": "Parameter [Vault.isValidAddress(address)._addr](contracts/Vault.sol#L487) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 487,
                  "endLine": 487
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55cdfd7ffce489dc8d48ebb5272f2bc34a8df7b52c4ed5e40fbcaca24c0c2e0e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.isActiveExecutor(address)._tradeExecutor (contracts/Vault.sol#492) is not in mixedCase\n",
            "markdown": "Parameter [Vault.isActiveExecutor(address)._tradeExecutor](contracts/Vault.sol#L492) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 492
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d68f33df5bc8a5640c1c977ae9a672e17c4d52a74cf922b532bf9ba9eb161088"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter Vault.areFundsUpdated(uint256)._blockUpdated (contracts/Vault.sol#497) is not in mixedCase\n",
            "markdown": "Parameter [Vault.areFundsUpdated(uint256)._blockUpdated](contracts/Vault.sol#L497) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 497,
                  "endLine": 497
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2b85b9796dfdf9a2c61da973e19a8b493ae29b948df538efc231ad39db464889"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter MockAsyncTradeExecutor.setPosValue(uint256)._posValue (contracts/mocks/MockAsyncTradeExecutor.sol#84) is not in mixedCase\n",
            "markdown": "Parameter [MockAsyncTradeExecutor.setPosValue(uint256)._posValue](contracts/mocks/MockAsyncTradeExecutor.sol#L84) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "69d04e428ebce659ec9201738f8f4024eda0317cc0b54a863cd216d678b9760a"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract console (node_modules/hardhat/console.sol#4-1532) is not in CapWords\n",
            "markdown": "Contract [console](node_modules/hardhat/console.sol#L4-L1532) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 1532
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58c9dacc35a1219332b8b6ce561daac5384e938b9878894ede5d6cbaa444d455"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta (contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#17) is too similar to IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta (contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#18)\n",
            "markdown": "Variable [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta](contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#L17) is too similar to [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta](contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol#L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c338be7db1e86da1ab151f097c07f6672d03c583349c15658cdb05b782a31d1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#95) is too similar to Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).upperTwPremiumDivBySqrtPriceGrowthOutsideX96 (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#96)\n",
            "markdown": "Variable [Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).lowerTwPremiumDivBySqrtPriceGrowthOutsideX96](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L95) is too similar to [Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).upperTwPremiumDivBySqrtPriceGrowthOutsideX96](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/Tick.sol"
                },
                "region": {
                  "startLine": 95,
                  "endLine": 95
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c693b1293d5dfaf15b6f10da093e23bdcb2d79fb7d218f7cea2d6da4adbeac4"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).twPremiumDivBySqrtPriceGrowthAboveX96 (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#102-105) is too similar to Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).twPremiumDivBySqrtPriceGrowthBelowX96 (node_modules/@perp/curie-contract/contracts/lib/Tick.sol#98-101)\n",
            "markdown": "Variable [Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).twPremiumDivBySqrtPriceGrowthAboveX96](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L102-L105) is too similar to [Tick.getAllFundingGrowth(mapping(int24 => Tick.GrowthInfo),int24,int24,int24,int256,int256).twPremiumDivBySqrtPriceGrowthBelowX96](node_modules/@perp/curie-contract/contracts/lib/Tick.sol#L98-L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/Tick.sol"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 105
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f2aa211718bae86bfaf177419cb3295dab7d87a4e7b1994ab6f9250aae76b404"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b7f552c04945395476fba2628c27735565024171ac2706c0634a957bf3f6cd52"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "be9a61e10ffc1392e5039124ba98f237331443516fbeaf779bbbe940266a93ed"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e8570d9e6dfee5d67c34714a6eb715df11b8f258032665377962ee3529739b55"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "71dafefd88f77015e44e6d90a6b280f159f06c2152d69cd6cd1668aa09fc7b81"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d61eaf807e4f770b0458630e38854217008ddf87bbca9a425a0a910db84a7a7"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b7292d49e72d001642786074c749bbc273800c75276d8642c73269cc3e09396a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a05b619dd8c9ecf9f89f4c36b364bc4ba53e83354777fd7830244d713787b634"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb97bcb2838e9ed7dd4c5496990e9293835560a4776a7ed1f78aa13fce95f526"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd157830df655d59f8204db3dc1cdeee10bff6738548227ec9b6b20ac318f3e4"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "137ced9e3059846b18fabe7decc7a27a5caeb952242722b367d192468b12ecdb"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f99a70f790cca67efa701a05891da22f84906580d2cc61cc87f0e4ae9aa47ae"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "215a24022295562a2128e2d161ad0da64fe9d4d4cfb47d8ae47715a5165f66ff"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a23b788ac94498006a03a3487b1954a052554e29219fa2ed685b2f1f3616a7d"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bf583b02fa7302e292f182c29fce7a3f80bf7e0d438dc36fb11e4d4c98948c67"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "49aba3477c01c940232da89ea97d448716a34a49bb2528ed5abf9e9a5b0cb46d"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c148bbd45758b94ee582d1ed4917e0b2fdf3655d9a5470a7fbc8e44ebb44a15"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5ae7aca2f79a66bb5f4424e1b6a33c149436506cc846c4ccf2ae05036fe6235"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#24) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L24) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f118ceab57ecad211ce36a084ea6a59322ce76ea442ce87ccaaa87afa7bf2046"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "971207d22f055dd250ab9ab82d38977555ce6856bc45e81dfe7e59f2b2ae05d0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "47d397419a03df1c1f5dfd250ce5a4c91d434a73f4b24452ac58eec191fdfeb1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8fac5043d60acb1e7a41c6abcac979192222f9ee55223203729e7eef2e469945"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cbd7bc6a0b471ec1275b474c930fce8dd6ed75791665ff31ebb37eebee0c0132"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eff0fbdd17e9048ec01e5b7a0f7676ce63d57db87702c4aede80f117104b5a5e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b770dc3d407f709cd0d1d659d4fc4d60a7286507c31b927805c320ac4894e868"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b1aba6a79c98ad7127cde5f3293d65e7d53349363b8bd5ddfbdcceb61f08a21a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "970fb86c87f6eadec97fac4a690ac707a8ed80463c2fffcad40279ebd4acfaa1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca100adb11ccefdc552284bbb6556c6069a3474646817831a4786b2e9a32ca08"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#104)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L104)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f56ba15aa743b6600c46d046b722e03ed3774e99976ac69b8466c90e34c80d83"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#123)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5408e9824b41155aa5e4dbfde79366fec45f89051e5e32bf9a150bb1ab87da0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#40) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L40) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "376e99c8bce336bae9d5b873e6cce76e41bf7255f503c7885d365569e1987f00"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#103) is too similar to LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#25)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L103) is too similar to [LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L25)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bbe0a23fbc68a415d250f2e3020d900cc9651b9b6ed69a5b7f8062a08e8fdcd0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#83) is too similar to LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#59)\n",
            "markdown": "Variable [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L83) is too similar to [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0ad900dc3ce8f5da72dfe64aae75d13191890a8c72b4c4acd0eecbb3f110f15b"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2480c771c9a22ab5906ba522f52d8ee91797bd8829a7c57676c64d0c0c402bbc"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#122) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L122) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6c18d00e24fe701b88ad4b445b0c0c6466e6b9742ad972bed529d77fa2940af"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#41)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L41)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "164317e60fc320cf989b0159e8dc6e0d1cbbd9d1d8cf990c7ad926ef95715b7e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#58) is too similar to LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96 (node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#84)\n",
            "markdown": "Variable [LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256).sqrtRatioAX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L58) is too similar to [LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128).sqrtRatioBX96](node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol#L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a5603802c595735275d6f40f8ea9548e26ae6f4578fda9c28ddaf177d208d692"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#84) is too similar to PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL2 (contracts/PerpL2/PerpPositionHandlerL2.sol#85)\n",
            "markdown": "Variable [PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L84) is too similar to [PerpPositionHandlerL2.constructor(address,address,address,address,address,address,address,address,address,address,address,address,address)._wantTokenL2](contracts/PerpL2/PerpPositionHandlerL2.sol#L85)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d9f6a928b1149949c0987dc37d39b7e0c7b96951736eb289bc997f99cd8d433f"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandlerL2.wantTokenL1 (contracts/PerpL2/PerpPositionHandlerL2.sol#28) is too similar to PerpPositionHandlerL2.wantTokenL2 (contracts/PerpL2/PerpPositionHandlerL2.sol#31)\n",
            "markdown": "Variable [PerpPositionHandlerL2.wantTokenL1](contracts/PerpL2/PerpPositionHandlerL2.sol#L28) is too similar to [PerpPositionHandlerL2.wantTokenL2](contracts/PerpL2/PerpPositionHandlerL2.sol#L31)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "72f4599a9ab7b47533ab9e6c4d5b234361ec15c5c3a43d285063572e52248101"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable Harvester.crvEthPrice (contracts/ConvexExecutor/Harvester.sol#85-86) is too similar to Harvester.cvxEthPrice (contracts/ConvexExecutor/Harvester.sol#88-89)\n",
            "markdown": "Variable [Harvester.crvEthPrice](contracts/ConvexExecutor/Harvester.sol#L85-L86) is too similar to [Harvester.cvxEthPrice](contracts/ConvexExecutor/Harvester.sol#L88-L89)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Harvester.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 86
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d4262f1899c629837662a12ed1b512fc8b594860bad7d47a3fd60aa7e1779789"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV2Router.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#12) is too similar to IUniswapV2Router.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#13)\n",
            "markdown": "Variable [IUniswapV2Router.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired](contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#L12) is too similar to [IUniswapV2Router.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired](contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol#L13)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/interfaces/IUniswapV2Router.sol"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ebfb97f25d979455759836fd8e6dfb5873e5f0066fe15708bfbea958a6c97d6c"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1 (contracts/PerpHandler/PerpPositionHandler.sol#114) is too similar to PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL2 (contracts/PerpHandler/PerpPositionHandler.sol#115)\n",
            "markdown": "Variable [PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1](contracts/PerpHandler/PerpPositionHandler.sol#L114) is too similar to [PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL2](contracts/PerpHandler/PerpPositionHandler.sol#L115)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c7e3954047113d7137b1e00f8046abe9b82ca8157c505f84619425892890e91"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandler.wantTokenL1 (contracts/PerpHandler/PerpPositionHandler.sol#78) is too similar to PerpPositionHandler.wantTokenL2 (contracts/PerpHandler/PerpPositionHandler.sol#81)\n",
            "markdown": "Variable [PerpPositionHandler.wantTokenL1](contracts/PerpHandler/PerpPositionHandler.sol#L78) is too similar to [PerpPositionHandler.wantTokenL2](contracts/PerpHandler/PerpPositionHandler.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd4f1b851544b390e4428c0413d9daa9c879468df03c6d2d4257f1cc3686abb7"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1 (contracts/PerpHandler/PerpPositionHandler.sol#114) is too similar to PerpTradeExecutor.setHandler(address,address,address,address)._wantTokenL2 (contracts/PerpHandler/PerpTradeExecutor.sol#76)\n",
            "markdown": "Variable [PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1](contracts/PerpHandler/PerpPositionHandler.sol#L114) is too similar to [PerpTradeExecutor.setHandler(address,address,address,address)._wantTokenL2](contracts/PerpHandler/PerpTradeExecutor.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a32ba27256783a6ba62b1301dde0f4d94080c8a65da9e9545a3e0c57c7fd988a"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1 (contracts/PerpHandler/PerpPositionHandler.sol#114) is too similar to PerpTradeExecutor.constructor(address,address,address,address,address)._wantTokenL2 (contracts/PerpHandler/PerpTradeExecutor.sol#20)\n",
            "markdown": "Variable [PerpPositionHandler._initHandler(address,address,address,address,address)._wantTokenL1](contracts/PerpHandler/PerpPositionHandler.sol#L114) is too similar to [PerpTradeExecutor.constructor(address,address,address,address,address)._wantTokenL2](contracts/PerpHandler/PerpTradeExecutor.sol#L20)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpPositionHandler.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "97ef431d27d64c04bf55811e0f641ad5e86a10d6baba8d464f32cc7b390955b6"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "PerpFixedPoint96.slitherConstructorConstantVariables() (node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#4-6) uses literals with too many digits:\n\t- _IQ96 = 0x1000000000000000000000000 (node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#5)\n",
            "markdown": "[PerpFixedPoint96.slitherConstructorConstantVariables()](node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#L4-L6) uses literals with too many digits:\n\t- [_IQ96 = 0x1000000000000000000000000](node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol#L5)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@perp/curie-contract/contracts/lib/PerpFixedPoint96.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "002bee8aec7445bbcad60f551543454af8e3f7435699854253300882f7e5a318"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "FixedPoint96.slitherConstructorConstantVariables() (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#7-10) uses literals with too many digits:\n\t- Q96 = 0x1000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#9)\n",
            "markdown": "[FixedPoint96.slitherConstructorConstantVariables()](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L7-L10) uses literals with too many digits:\n\t- [Q96 = 0x1000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol#L9)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/FixedPoint96.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b3fe0e4e23639d45b310c6a0d4a951ec6c8f7ed3e196526d4abc004d297b104b"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) uses literals with too many digits:\n\t- ratio = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#27)\n",
            "markdown": "[TickMath.getSqrtRatioAtTick(int24)](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L23-L54) uses literals with too many digits:\n\t- [ratio = 0x100000000000000000000000000000000](node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#L27)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a23304e1cfff0f932f12c2608fe05e6d29287d1e02c6b72bbad5589903947d05"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "PerpPositionHandlerL2.slitherConstructorVariables() (contracts/PerpL2/PerpPositionHandlerL2.sol#15-250) uses literals with too many digits:\n\t- L2CrossDomainMessenger = 0x4200000000000000000000000000000000000007 (contracts/PerpL2/OptimismL2Wrapper.sol#9-10)\n",
            "markdown": "[PerpPositionHandlerL2.slitherConstructorVariables()](contracts/PerpL2/PerpPositionHandlerL2.sol#L15-L250) uses literals with too many digits:\n\t- [L2CrossDomainMessenger = 0x4200000000000000000000000000000000000007](contracts/PerpL2/OptimismL2Wrapper.sol#L9-L10)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 250
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d723ab55c358ae46f522f8787ffa5e14f8b3e47f4f6965ed0fcedeb4be5eb1ee"
          }
        },
        {
          "ruleId": "3-1-too-many-digits",
          "message": {
            "text": "console.slitherConstructorConstantVariables() (node_modules/hardhat/console.sol#4-1532) uses literals with too many digits:\n\t- CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67) (node_modules/hardhat/console.sol#5)\n",
            "markdown": "[console.slitherConstructorConstantVariables()](node_modules/hardhat/console.sol#L4-L1532) uses literals with too many digits:\n\t- [CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67)](node_modules/hardhat/console.sol#L5)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 1532
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "20ddc9b48c119b71a9ee4c3006a797896bc464971a031e8fe57b2cf864d1e86c"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is never used in Vault (contracts/Vault.sol#17-503)\n",
            "markdown": "[ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L37) is never used in [Vault](contracts/Vault.sol#L17-L503)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f5125f9ad6c2d7c50973af53f0394397d4395e6702de703f782bd501eed6d9b5"
          }
        },
        {
          "ruleId": "3-0-unused-state",
          "message": {
            "text": "ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) is never used in WantERC20 (contracts/mocks/WantERC20.sol#20-38)\n",
            "markdown": "[ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L37) is never used in [WantERC20](contracts/mocks/WantERC20.sol#L20-L38)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "554e74088917bf3cd7e85c7195d66a3a7e99fc42f8e49ff7ec3f1bf931c75a97"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "OptimismL2Wrapper.L2CrossDomainMessenger (contracts/PerpL2/OptimismL2Wrapper.sol#9-10) should be constant\n",
            "markdown": "[OptimismL2Wrapper.L2CrossDomainMessenger](contracts/PerpL2/OptimismL2Wrapper.sol#L9-L10) should be constant\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/OptimismL2Wrapper.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d35acf5ca1d1107011505f9ab493071fd2b69fd415d6276988aef47bda8dd19f"
          }
        },
        {
          "ruleId": "4-0-constable-states",
          "message": {
            "text": "ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#37) should be constant\n",
            "markdown": "[ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L37) should be constant\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f54f28176c611fb4064def95a8b438fe5f8d0af9dc0f02585f8995adf04cfc62"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "withdraw(uint256,address,address,bytes) should be declared external:\n\t- PerpPositionHandlerL2.withdraw(uint256,address,address,bytes) (contracts/PerpL2/PerpPositionHandlerL2.sol#123-143)\n",
            "markdown": "withdraw(uint256,address,address,bytes) should be declared external:\n\t- [PerpPositionHandlerL2.withdraw(uint256,address,address,bytes)](contracts/PerpL2/PerpPositionHandlerL2.sol#L123-L143)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 143
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5074e2452ab6a816c79d48cc980606a6458a15f81b58c3f12ac3854f8e5d57d3"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bool,uint256,uint24) should be declared external:\n\t- PerpPositionHandlerL2.openPosition(bool,uint256,uint24) (contracts/PerpL2/PerpPositionHandlerL2.sol#154-170)\n",
            "markdown": "openPosition(bool,uint256,uint24) should be declared external:\n\t- [PerpPositionHandlerL2.openPosition(bool,uint256,uint24)](contracts/PerpL2/PerpPositionHandlerL2.sol#L154-L170)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 170
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fd6da4e69f8c383a86c7d3cb8ff9f9268a4c65f2f68efd21fe455c120d88bf80"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(uint24) should be declared external:\n\t- PerpPositionHandlerL2.closePosition(uint24) (contracts/PerpL2/PerpPositionHandlerL2.sol#175-180)\n",
            "markdown": "closePosition(uint24) should be declared external:\n\t- [PerpPositionHandlerL2.closePosition(uint24)](contracts/PerpL2/PerpPositionHandlerL2.sol#L175-L180)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 175,
                  "endLine": 180
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1c60b27ba94fafa8efacc6de5f1e9857f5ba81052db5edacb993ab6a6f7f0490"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "sweep(address) should be declared external:\n\t- PerpPositionHandlerL2.sweep(address) (contracts/PerpL2/PerpPositionHandlerL2.sol#188-193)\n",
            "markdown": "sweep(address) should be declared external:\n\t- [PerpPositionHandlerL2.sweep(address)](contracts/PerpL2/PerpPositionHandlerL2.sol#L188-L193)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 188,
                  "endLine": 193
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "95ea0bc8e80d6022a2fd16e0f5d65a049781a77b4585251604074d5dc9bdb168"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setReferralCode(bytes32) should be declared external:\n\t- PerpPositionHandlerL2.setReferralCode(bytes32) (contracts/PerpL2/PerpPositionHandlerL2.sol#197-200)\n",
            "markdown": "setReferralCode(bytes32) should be declared external:\n\t- [PerpPositionHandlerL2.setReferralCode(bytes32)](contracts/PerpL2/PerpPositionHandlerL2.sol#L197-L200)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 197,
                  "endLine": 200
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a2fddb3cc97a4c281935fa0b2b4831b0aa11865e3bb5ee934e79d86dd0f2e755"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setSocketRegistry(address) should be declared external:\n\t- PerpPositionHandlerL2.setSocketRegistry(address) (contracts/PerpL2/PerpPositionHandlerL2.sol#204-207)\n",
            "markdown": "setSocketRegistry(address) should be declared external:\n\t- [PerpPositionHandlerL2.setSocketRegistry(address)](contracts/PerpL2/PerpPositionHandlerL2.sol#L204-L207)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 207
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "496700d60ddd8021a6d84438cbc2ad4481e6e23b82777530e354302dfbfb86bf"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setKeeper(address) should be declared external:\n\t- PerpPositionHandlerL2.setKeeper(address) (contracts/PerpL2/PerpPositionHandlerL2.sol#211-214)\n",
            "markdown": "setKeeper(address) should be declared external:\n\t- [PerpPositionHandlerL2.setKeeper(address)](contracts/PerpL2/PerpPositionHandlerL2.sol#L211-L214)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 211,
                  "endLine": 214
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "99ac352aea69dbba206086383913864781b858fb57b6e208e2ceb8dc980b9180"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setGovernance(address) should be declared external:\n\t- PerpPositionHandlerL2.setGovernance(address) (contracts/PerpL2/PerpPositionHandlerL2.sol#218-220)\n",
            "markdown": "setGovernance(address) should be declared external:\n\t- [PerpPositionHandlerL2.setGovernance(address)](contracts/PerpL2/PerpPositionHandlerL2.sol#L218-L220)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a6596b97afa521e7aace17828afa43ef843f3fff45db609cb689db172d7d250f"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "acceptGovernance() should be declared external:\n\t- PerpPositionHandlerL2.acceptGovernance() (contracts/PerpL2/PerpPositionHandlerL2.sol#223-227)\n",
            "markdown": "acceptGovernance() should be declared external:\n\t- [PerpPositionHandlerL2.acceptGovernance()](contracts/PerpL2/PerpPositionHandlerL2.sol#L223-L227)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpPositionHandlerL2.sol"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 227
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9bf8e3ab67a0a45c17ca124c74aa1e97aa16cbdc8d6022950e9a8bab23ee298e"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "positionInWantToken() should be declared external:\n\t- PerpV2Controller.positionInWantToken() (contracts/PerpL2/PerpV2Controller.sol#219-229)\n",
            "markdown": "positionInWantToken() should be declared external:\n\t- [PerpV2Controller.positionInWantToken()](contracts/PerpL2/PerpV2Controller.sol#L219-L229)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpL2/PerpV2Controller.sol"
                },
                "region": {
                  "startLine": 219,
                  "endLine": 229
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6860b57c18ddd8c41aa68ab084e917f9f05b66b5b8c5a147fde97792d88f967"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "name() should be declared external:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64)\n",
            "markdown": "name() should be declared external:\n\t- [ERC20.name()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L62-L64)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9dfc73be5a25e563bdfa930030a68030ca2fc233e007152b4d60eec5fb57a7b4"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "symbol() should be declared external:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#70-72)\n",
            "markdown": "symbol() should be declared external:\n\t- [ERC20.symbol()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L70-L72)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "641056a7d4219063aa0f9a27e68b3b28c94bb0c2ab6bdb37054fc8964e3dc097"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "decimals() should be declared external:\n\t- ERC20.decimals() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#87-89)\n\t- Vault.decimals() (contracts/Vault.sol#80-82)\n\t- WantERC20.decimals() (contracts/mocks/WantERC20.sol#31-33)\n",
            "markdown": "decimals() should be declared external:\n\t- [ERC20.decimals()](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L87-L89)\n\t- [Vault.decimals()](contracts/Vault.sol#L80-L82)\n\t- [WantERC20.decimals()](contracts/mocks/WantERC20.sol#L31-L33)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 89
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0cc3c54ad96a3833e97ba9747194a4a74ca7140278da54bf5a7e196c2b89fd7d"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "balanceOf(address) should be declared external:\n\t- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#101-103)\n",
            "markdown": "balanceOf(address) should be declared external:\n\t- [ERC20.balanceOf(address)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L101-L103)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 103
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65bc6b7b7be3d1d046f54ea3e07fb7bd7f10415b973d001e8eb15cb65a14d89f"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "transfer(address,uint256) should be declared external:\n\t- ERC20.transfer(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#113-117)\n",
            "markdown": "transfer(address,uint256) should be declared external:\n\t- [ERC20.transfer(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L113-L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "65c0bed2eaf5bdd4972acc62dd5f416a55f5df9f23946d5be1d9c4a748348131"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "approve(address,uint256) should be declared external:\n\t- ERC20.approve(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#136-140)\n",
            "markdown": "approve(address,uint256) should be declared external:\n\t- [ERC20.approve(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L136-L140)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 140
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cdf05bf59e91a730b1646e7bb8bfd9dcbe6cb9969e7df7eb38b8c5b4ddf67601"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "transferFrom(address,address,uint256) should be declared external:\n\t- ERC20.transferFrom(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#158-167)\n",
            "markdown": "transferFrom(address,address,uint256) should be declared external:\n\t- [ERC20.transferFrom(address,address,uint256)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L158-L167)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 167
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "131b8f7fe1775baa4c2a5d5adbb3c438055e94b926d9cd180b008b06a3e3b805"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "increaseAllowance(address,uint256) should be declared external:\n\t- ERC20.increaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#181-185)\n",
            "markdown": "increaseAllowance(address,uint256) should be declared external:\n\t- [ERC20.increaseAllowance(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L181-L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 185
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6d16763f9f6cdde055f7f029af514840adcac2395d044827858bf83ca5258703"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "decreaseAllowance(address,uint256) should be declared external:\n\t- ERC20.decreaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#201-210)\n",
            "markdown": "decreaseAllowance(address,uint256) should be declared external:\n\t- [ERC20.decreaseAllowance(address,uint256)](node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#L201-L210)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol"
                },
                "region": {
                  "startLine": 201,
                  "endLine": 210
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d933a241c76a857bc695d3d7d7dab6c5852798ef5197ef28717554984ebf34f"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32) should be declared external:\n\t- ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#49-68)\n",
            "markdown": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32) should be declared external:\n\t- [ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32)](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L49-L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3f0d48d2601b99b48a4da08f90b250eb23a14afd9d9a258746a2b4c7569020fe"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "nonces(address) should be declared external:\n\t- ERC20Permit.nonces(address) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#73-75)\n",
            "markdown": "nonces(address) should be declared external:\n\t- [ERC20Permit.nonces(address)](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L73-L75)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "978299c014b5a5ab9cbbc27ef8e7b1fdbab8066353ef90e8fd2bcf546a76f7e1"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "sweep(address) should be declared external:\n\t- BaseTradeExecutor.sweep(address) (contracts/BaseTradeExecutor.sol#54-59)\n",
            "markdown": "sweep(address) should be declared external:\n\t- [BaseTradeExecutor.sweep(address)](contracts/BaseTradeExecutor.sol#L54-L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0a3c7db780701e697060cdf23529b63b5c80e945936ccc5a2a6e2b20240db9ea"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "initiateDeposit(bytes) should be declared external:\n\t- BaseTradeExecutor.initiateDeposit(bytes) (contracts/BaseTradeExecutor.sol#61-65)\n",
            "markdown": "initiateDeposit(bytes) should be declared external:\n\t- [BaseTradeExecutor.initiateDeposit(bytes)](contracts/BaseTradeExecutor.sol#L61-L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae3ab1b7ccb323e79681e410fb163eb52ee5bf36cbc9c36d5aeed304a50024e9"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "initiateWithdraw(bytes) should be declared external:\n\t- BaseTradeExecutor.initiateWithdraw(bytes) (contracts/BaseTradeExecutor.sol#73-77)\n",
            "markdown": "initiateWithdraw(bytes) should be declared external:\n\t- [BaseTradeExecutor.initiateWithdraw(bytes)](contracts/BaseTradeExecutor.sol#L73-L77)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/BaseTradeExecutor.sol"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 77
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76c78ff96e0f1752131cbd7beab550e02043a8d12d64fac1acb1ed102ef2f2f1"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimTokens(uint256,address) should be declared external:\n\t- Batcher.claimTokens(uint256,address) (contracts/Batcher/Batcher.sol#210-218)\n",
            "markdown": "claimTokens(uint256,address) should be declared external:\n\t- [Batcher.claimTokens(uint256,address)](contracts/Batcher/Batcher.sol#L210-L218)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 210,
                  "endLine": 218
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9868080173fd847128d40a91f8050e2d7f187e54746eec97072227e2aa47ee3d"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setAuthority(address) should be declared external:\n\t- Batcher.setAuthority(address) (contracts/Batcher/Batcher.sol#386-392)\n",
            "markdown": "setAuthority(address) should be declared external:\n\t- [Batcher.setAuthority(address)](contracts/Batcher/Batcher.sol#L386-L392)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 386,
                  "endLine": 392
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86e260d63524c249544dbbbe00af2441b2b577f7fb1b56d18c72044c6cab92f8"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setDepositSignatureCheck(bool) should be declared external:\n\t- Batcher.setDepositSignatureCheck(bool) (contracts/Batcher/Batcher.sol#406-409)\n",
            "markdown": "setDepositSignatureCheck(bool) should be declared external:\n\t- [Batcher.setDepositSignatureCheck(bool)](contracts/Batcher/Batcher.sol#L406-L409)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 406,
                  "endLine": 409
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "01ce0bc24b4315984d6975e23e94dfe06a096aa27b0e91a317b4b68a53ff5729"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "sweep(address) should be declared external:\n\t- Batcher.sweep(address) (contracts/Batcher/Batcher.sol#413-419)\n",
            "markdown": "sweep(address) should be declared external:\n\t- [Batcher.sweep(address)](contracts/Batcher/Batcher.sol#L413-L419)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Batcher/Batcher.sol"
                },
                "region": {
                  "startLine": 413,
                  "endLine": 419
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4a247d1aea44d0c2440bc08f770d927042367ef31b20b5fe22b9132199b1a47e"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "totalFunds() should be declared external:\n\t- ConvexFraxPoolTradeExecutor.totalFunds() (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#44-46)\n\t- ConvexSUSDPoolTradeExecutor.totalFunds() (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#41-43)\n\t- FraxConvexFraxPoolTradeExecutor.totalFunds() (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#52-54)\n\t- MockAsyncTradeExecutor.totalFunds() (contracts/mocks/MockAsyncTradeExecutor.sol#27-33)\n\t- MockTradeExecutor.totalFunds() (contracts/mocks/MockTradeExecutor.sol#17-22)\n\t- PerpTradeExecutor.totalFunds() (contracts/PerpHandler/PerpTradeExecutor.sol#41-52)\n",
            "markdown": "totalFunds() should be declared external:\n\t- [ConvexFraxPoolTradeExecutor.totalFunds()](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L44-L46)\n\t- [ConvexSUSDPoolTradeExecutor.totalFunds()](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L41-L43)\n\t- [FraxConvexFraxPoolTradeExecutor.totalFunds()](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L52-L54)\n\t- [MockAsyncTradeExecutor.totalFunds()](contracts/mocks/MockAsyncTradeExecutor.sol#L27-L33)\n\t- [MockTradeExecutor.totalFunds()](contracts/mocks/MockTradeExecutor.sol#L17-L22)\n\t- [PerpTradeExecutor.totalFunds()](contracts/PerpHandler/PerpTradeExecutor.sol#L41-L52)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0835427bfc9bb68793c8c341199ece3a738cdba2c21b1fb7f11b3f9829a88850"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- FraxConvexFraxPoolTradeExecutor.openPosition(bytes) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#135-137)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [FraxConvexFraxPoolTradeExecutor.openPosition(bytes)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L135-L137)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 135,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "db17fb43be7ab5f9c2cec25844ca11765955a3356b0b35bbc77e24cd7bedcb2d"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- FraxConvexFraxPoolTradeExecutor.closePosition(bytes) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#142-148)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [FraxConvexFraxPoolTradeExecutor.closePosition(bytes)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L142-L148)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 142,
                  "endLine": 148
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "657d06b2c29ea73440ea3f3cd9d578f8e9893ceef55b89f85eacef5533235603"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimRewards(bytes) should be declared external:\n\t- FraxConvexFraxPoolTradeExecutor.claimRewards(bytes) (contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#156-158)\n",
            "markdown": "claimRewards(bytes) should be declared external:\n\t- [FraxConvexFraxPoolTradeExecutor.claimRewards(bytes)](contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol#L156-L158)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/FC/FraxConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 158
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f9cd2eb7dcb97d0f34dd84e43cc599446f4d238ae69c7613fb7cbf3e3a45214f"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- ConvexFraxPoolTradeExecutor.openPosition(bytes) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#115-117)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [ConvexFraxPoolTradeExecutor.openPosition(bytes)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L115-L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 117
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "911d1cacfebdffcbbf2c740dfa6a0b4995cf8496976937d452814161d60877cb"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- ConvexFraxPoolTradeExecutor.closePosition(bytes) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#122-128)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [ConvexFraxPoolTradeExecutor.closePosition(bytes)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L122-L128)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5928b7b18e2b1a5217b880ca5899c9bf24904df1a31dded032772bc6ae9a83b2"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimRewards(bytes) should be declared external:\n\t- ConvexFraxPoolTradeExecutor.claimRewards(bytes) (contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#136-138)\n",
            "markdown": "claimRewards(bytes) should be declared external:\n\t- [ConvexFraxPoolTradeExecutor.claimRewards(bytes)](contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol#L136-L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Frax/ConvexFraxPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 138
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2da2f604b17dac7de3c1fba257953b9a67cc1b963c548a35224da22d820e2a2"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- ConvexSUSDPoolTradeExecutor.openPosition(bytes) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#112-114)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [ConvexSUSDPoolTradeExecutor.openPosition(bytes)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L112-L114)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 114
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "60985cb6495b7037a1cc4a2104e311ccf8deff13a86e53f411c3e62796abfda4"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- ConvexSUSDPoolTradeExecutor.closePosition(bytes) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#119-121)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [ConvexSUSDPoolTradeExecutor.closePosition(bytes)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L119-L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "016a78514756411ef9064d4781a867d93b2ed06237cb0ab93b42e589238c72ca"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimRewards(bytes) should be declared external:\n\t- ConvexSUSDPoolTradeExecutor.claimRewards(bytes) (contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#129-131)\n",
            "markdown": "claimRewards(bytes) should be declared external:\n\t- [ConvexSUSDPoolTradeExecutor.claimRewards(bytes)](contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol#L129-L131)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/ConvexExecutor/Susd/ConvexSUSDPoolTradeExecutor.sol"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 131
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1ca543f8cadcb060c90b557cd71618f76512e525756c9d9e63f2428966fd04ba"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) should be declared external:\n\t- Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) (contracts/Migration/Migratooor.sol#28-84)\n",
            "markdown": "migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes) should be declared external:\n\t- [Migratooor.migrateToV2(uint256,uint256,uint256,uint8,bytes32,bytes32,bytes)](contracts/Migration/Migratooor.sol#L28-L84)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Migration/Migratooor.sol"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 84
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "888fa0a37a3acab96992d401303dd64378e32ba73070c557ed7660c2a44aaf22"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setPosValue(uint256) should be declared external:\n\t- PerpTradeExecutor.setPosValue(uint256) (contracts/PerpHandler/PerpTradeExecutor.sol#60-62)\n",
            "markdown": "setPosValue(uint256) should be declared external:\n\t- [PerpTradeExecutor.setPosValue(uint256)](contracts/PerpHandler/PerpTradeExecutor.sol#L60-L62)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c6e8a7affcb467021379ba58f9bf0517079c37b51cd455fd1cc7d3888772f5a5"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setSocketRegistry(address) should be declared external:\n\t- PerpTradeExecutor.setSocketRegistry(address) (contracts/PerpHandler/PerpTradeExecutor.sol#66-68)\n",
            "markdown": "setSocketRegistry(address) should be declared external:\n\t- [PerpTradeExecutor.setSocketRegistry(address)](contracts/PerpHandler/PerpTradeExecutor.sol#L66-L68)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 68
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8a6f662fa11fb482632d5c021af737ec13f260b40757a24a640850a10f1499be"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setHandler(address,address,address,address) should be declared external:\n\t- PerpTradeExecutor.setHandler(address,address,address,address) (contracts/PerpHandler/PerpTradeExecutor.sol#75-88)\n",
            "markdown": "setHandler(address,address,address,address) should be declared external:\n\t- [PerpTradeExecutor.setHandler(address,address,address,address)](contracts/PerpHandler/PerpTradeExecutor.sol#L75-L88)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 88
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0eccacaf6ae4c4ffb9ee4c1a5cadbfb8520afa9eb09852a60095e69dbcb73964"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- PerpTradeExecutor.openPosition(bytes) (contracts/PerpHandler/PerpTradeExecutor.sol#120-122)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [PerpTradeExecutor.openPosition(bytes)](contracts/PerpHandler/PerpTradeExecutor.sol#L120-L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 120,
                  "endLine": 122
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "679dd328f1729c280d5cb2397a1a26ff5648f390cff758932c8e5653cf5b167a"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- PerpTradeExecutor.closePosition(bytes) (contracts/PerpHandler/PerpTradeExecutor.sol#126-128)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [PerpTradeExecutor.closePosition(bytes)](contracts/PerpHandler/PerpTradeExecutor.sol#L126-L128)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/PerpHandler/PerpTradeExecutor.sol"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 128
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "14cf7057bdf2c1a39d4b5b8c3a5cfbb8eb8dafa28e5e096416df38c4629b9e6a"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "deposit(uint256,address) should be declared external:\n\t- Vault.deposit(uint256,address) (contracts/Vault.sol#90-108)\n",
            "markdown": "deposit(uint256,address) should be declared external:\n\t- [Vault.deposit(uint256,address)](contracts/Vault.sol#L90-L108)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 108
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a1267b2eef51c61ab09170d09eea5560de637f7bd7762de84bc9e2291dad6ad1"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "withdraw(uint256,address) should be declared external:\n\t- Vault.withdraw(uint256,address) (contracts/Vault.sol#113-135)\n",
            "markdown": "withdraw(uint256,address) should be declared external:\n\t- [Vault.withdraw(uint256,address)](contracts/Vault.sol#L113-L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6645cde5822a0adbc85eef2687d5b98529d51b8e0594d5106d8c65e45a131016"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "depositIntoExecutor(address,uint256) should be declared external:\n\t- Vault.depositIntoExecutor(address,uint256) (contracts/Vault.sol#167-176)\n",
            "markdown": "depositIntoExecutor(address,uint256) should be declared external:\n\t- [Vault.depositIntoExecutor(address,uint256)](contracts/Vault.sol#L167-L176)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 167,
                  "endLine": 176
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a118e1112f07bc8e7317302df6519720bd2db603787188a93045920c2799c8d4"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "withdrawFromExecutor(address,uint256) should be declared external:\n\t- Vault.withdrawFromExecutor(address,uint256) (contracts/Vault.sol#181-190)\n",
            "markdown": "withdrawFromExecutor(address,uint256) should be declared external:\n\t- [Vault.withdrawFromExecutor(address,uint256)](contracts/Vault.sol#L181-L190)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "672aa158c89a370eb39aaafa7257529ccce05fea1be2aa5c6344051f9699e922"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setPerformanceFee(uint256) should be declared external:\n\t- Vault.setPerformanceFee(uint256) (contracts/Vault.sol#215-220)\n",
            "markdown": "setPerformanceFee(uint256) should be declared external:\n\t- [Vault.setPerformanceFee(uint256)](contracts/Vault.sol#L215-L220)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 215,
                  "endLine": 220
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad42055b5cddb55868fb3d3b8b609fef61390ebf808b482de4e3ec15df856f7d"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setExitFee(uint256) should be declared external:\n\t- Vault.setExitFee(uint256) (contracts/Vault.sol#229-234)\n",
            "markdown": "setExitFee(uint256) should be declared external:\n\t- [Vault.setExitFee(uint256)](contracts/Vault.sol#L229-L234)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 229,
                  "endLine": 234
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e36ed7b4147da88436dfd3dd6d804e1246bd220422f4986e94dfde8ed8213a0d"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setManagementFee(uint256) should be declared external:\n\t- Vault.setManagementFee(uint256) (contracts/Vault.sol#243-248)\n",
            "markdown": "setManagementFee(uint256) should be declared external:\n\t- [Vault.setManagementFee(uint256)](contracts/Vault.sol#L243-L248)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 243,
                  "endLine": 248
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "56eee11dc9aad128112babdceaa748e8d0ac75ae2466e35a43c39a7d06285672"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "addExecutor(address) should be declared external:\n\t- Vault.addExecutor(address) (contracts/Vault.sol#302-315)\n",
            "markdown": "addExecutor(address) should be declared external:\n\t- [Vault.addExecutor(address)](contracts/Vault.sol#L302-L315)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 302,
                  "endLine": 315
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2ca8ae10f78f4f7af74f4ad32fca34ffe798dd15c510bcf8cc9fb00c0b020fad"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "removeExecutor(address) should be declared external:\n\t- Vault.removeExecutor(address) (contracts/Vault.sol#320-333)\n",
            "markdown": "removeExecutor(address) should be declared external:\n\t- [Vault.removeExecutor(address)](contracts/Vault.sol#L320-L333)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 320,
                  "endLine": 333
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a84ecd3626252b121f4ddab8a639962f73f572699b4200f4c192ade30144275a"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setBatcher(address) should be declared external:\n\t- Vault.setBatcher(address) (contracts/Vault.sol#377-381)\n",
            "markdown": "setBatcher(address) should be declared external:\n\t- [Vault.setBatcher(address)](contracts/Vault.sol#L377-L381)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 381
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "508732a3b9b96dffbe89f46321c85ddc12df731a934bfb4139b1d5280ffc53e3"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setBatcherOnlyDeposit(bool) should be declared external:\n\t- Vault.setBatcherOnlyDeposit(bool) (contracts/Vault.sol#390-394)\n",
            "markdown": "setBatcherOnlyDeposit(bool) should be declared external:\n\t- [Vault.setBatcherOnlyDeposit(bool)](contracts/Vault.sol#L390-L394)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 390,
                  "endLine": 394
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "650f6c0f3c276765b46051e748ecd864060dd799c12f68abdb4e0c14061e816f"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setGovernance(address) should be declared external:\n\t- Vault.setGovernance(address) (contracts/Vault.sol#399-402)\n",
            "markdown": "setGovernance(address) should be declared external:\n\t- [Vault.setGovernance(address)](contracts/Vault.sol#L399-L402)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 399,
                  "endLine": 402
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c1a365ec03cb9b9a81ddcfe9963e26f57313577917ca9dd54c03e355884726da"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "acceptGovernance() should be declared external:\n\t- Vault.acceptGovernance() (contracts/Vault.sol#414-418)\n",
            "markdown": "acceptGovernance() should be declared external:\n\t- [Vault.acceptGovernance()](contracts/Vault.sol#L414-L418)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 414,
                  "endLine": 418
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ff16048cac584f0ae7fb6867653e54b2ac608b5806c62eee0eb2c86c92fd79f0"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setKeeper(address) should be declared external:\n\t- Vault.setKeeper(address) (contracts/Vault.sol#428-432)\n",
            "markdown": "setKeeper(address) should be declared external:\n\t- [Vault.setKeeper(address)](contracts/Vault.sol#L428-L432)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 428,
                  "endLine": 432
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "147a02609ec1125f6652661b004c8917e2fbc3e56c36cac8391e3067104a7f7b"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setEmergencyMode(bool) should be declared external:\n\t- Vault.setEmergencyMode(bool) (contracts/Vault.sol#441-447)\n",
            "markdown": "setEmergencyMode(bool) should be declared external:\n\t- [Vault.setEmergencyMode(bool)](contracts/Vault.sol#L441-L447)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 441,
                  "endLine": 447
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "07fe01e4dfb87f72dbd29c6d3b1a3654b59b2738f99e648deabbd3bb264add97"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "sweep(address) should be declared external:\n\t- Vault.sweep(address) (contracts/Vault.sol#453-459)\n",
            "markdown": "sweep(address) should be declared external:\n\t- [Vault.sweep(address)](contracts/Vault.sol#L453-L459)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/Vault.sol"
                },
                "region": {
                  "startLine": 453,
                  "endLine": 459
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c6d6a8b80869af3fc20a46f671e976bd8d7f60903288197656d9546999547d7"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- MockAsyncTradeExecutor.openPosition(bytes) (contracts/mocks/MockAsyncTradeExecutor.sol#65)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [MockAsyncTradeExecutor.openPosition(bytes)](contracts/mocks/MockAsyncTradeExecutor.sol#L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63dea0d6da335c1d110b9ff91c6b0e723f4bcccf09f442dbcd912151788d7c0e"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- MockAsyncTradeExecutor.closePosition(bytes) (contracts/mocks/MockAsyncTradeExecutor.sol#69)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [MockAsyncTradeExecutor.closePosition(bytes)](contracts/mocks/MockAsyncTradeExecutor.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "972abff672f9b32a7593ad37d9f531bcfbfed8a5714afaf9615bba864b2fee3c"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimRewards(bytes) should be declared external:\n\t- MockAsyncTradeExecutor.claimRewards(bytes) (contracts/mocks/MockAsyncTradeExecutor.sol#76)\n",
            "markdown": "claimRewards(bytes) should be declared external:\n\t- [MockAsyncTradeExecutor.claimRewards(bytes)](contracts/mocks/MockAsyncTradeExecutor.sol#L76)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 76
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bcd62e019b641fab5553271c4ed30b4411b8b4c510a4aaff0d7084fe96ad3ff9"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "setPosValue(uint256) should be declared external:\n\t- MockAsyncTradeExecutor.setPosValue(uint256) (contracts/mocks/MockAsyncTradeExecutor.sol#84-87)\n",
            "markdown": "setPosValue(uint256) should be declared external:\n\t- [MockAsyncTradeExecutor.setPosValue(uint256)](contracts/mocks/MockAsyncTradeExecutor.sol#L84-L87)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockAsyncTradeExecutor.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 87
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dd7178e5ef493e69d9f78209b98c9af550317c462a2ef04a4b82946979545de5"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "openPosition(bytes) should be declared external:\n\t- MockTradeExecutor.openPosition(bytes) (contracts/mocks/MockTradeExecutor.sol#54)\n",
            "markdown": "openPosition(bytes) should be declared external:\n\t- [MockTradeExecutor.openPosition(bytes)](contracts/mocks/MockTradeExecutor.sol#L54)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockTradeExecutor.sol"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9855dcc1df81b3e32ba23479b9736e4b9edf79e0dcf3562d482d83da3bcfd1ec"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "closePosition(bytes) should be declared external:\n\t- MockTradeExecutor.closePosition(bytes) (contracts/mocks/MockTradeExecutor.sol#58)\n",
            "markdown": "closePosition(bytes) should be declared external:\n\t- [MockTradeExecutor.closePosition(bytes)](contracts/mocks/MockTradeExecutor.sol#L58)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockTradeExecutor.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8b48907ce850b4e05ad94cfd07d86cbc3eee18f8fae1aa53d422a1c1d7a786eb"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "claimRewards(bytes) should be declared external:\n\t- MockTradeExecutor.claimRewards(bytes) (contracts/mocks/MockTradeExecutor.sol#65)\n",
            "markdown": "claimRewards(bytes) should be declared external:\n\t- [MockTradeExecutor.claimRewards(bytes)](contracts/mocks/MockTradeExecutor.sol#L65)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/MockTradeExecutor.sol"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ab8749b8e610a5e3900f189b901b8f757db757a9a6f977f831b8afbb030ae53b"
          }
        },
        {
          "ruleId": "4-0-external-function",
          "message": {
            "text": "mint(uint256) should be declared external:\n\t- WantERC20.mint(uint256) (contracts/mocks/WantERC20.sol#35-37)\n",
            "markdown": "mint(uint256) should be declared external:\n\t- [WantERC20.mint(uint256)](contracts/mocks/WantERC20.sol#L35-L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/mocks/WantERC20.sol"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 37
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bc4784861271135da9bff1b9d0bfe637e9d495887ffda8ec5ee3d4cbaa561c39"
          }
        }
      ]
    }
  ]
}